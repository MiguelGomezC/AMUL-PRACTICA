*------------------------------------------------------------*
Usuario:                Admin
Fecha:                13/12/20
Hora:                00H18
Sitio:                70161230
Plataforma:            X64_10HOME
Versión de mantenimiento: 9.04.01M6P111518
Versión de EM:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00H18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                13/12/20
Hora:                00H18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2_TCWSK "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2_TCWSK new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00H18" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70161230";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00H18" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
63868      proc freq data=EMWS1.Clus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Clus_VariableSet noprint;
63869      table ROLE*LEVEL/out=WORK.ClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ClusMETA;
63870      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.CLUS_VARIABLESET.
NOTE: The data set WORK.CLUSMETA has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
63871      proc print data=WORK.ClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ClusMETA label noobs;
63872      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
63873      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
63874      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
63875      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
63876      run;
 
NOTE: There were 2 observations read from the data set WORK.CLUSMETA.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
63877      title10;
MPRINT(EM_DIAGRAM):   title10;
63878      data WORK.M2JEV_8A;
MPRINT(EM_DIAGRAM):    data WORK.M2JEV_8A;
63879      set WORK.M2JEV_8A;
MPRINT(EM_DIAGRAM):   set WORK.M2JEV_8A;
63880      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
63881      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.M2JEV_8A.
NOTE: The data set WORK.M2JEV_8A has 20 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: preparando metadatos para el entrenamiento;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M2JEV_8A;
MPRINT(EM_DIAGRAM):   set WORK.M2JEV_8A;
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
63890      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
63891      * Clus: clustering preliminar;
MPRINT(EM_DIAGRAM):   * Clus: clustering preliminar;
63892      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63893      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
63894      * Clus: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * Clus: DMDBClass Macro ;
63895      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
63896      %macro DMDBClass;
63897
63898      %mend DMDBClass;
63899      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
63900      * Clus: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Clus: DMDBVar Macro ;
63901      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
63902      %macro DMDBVar;
63903          PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20
63904         PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
63905      %mend DMDBVar;
63906      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63907      * Clus: Create DMDB;
MPRINT(EM_DIAGRAM):   * Clus: Create DMDB;
63908      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63909      proc dmdb batch data=EMWS1.PRINCOMP_TRAIN
63910      dmdbcat=WORK.Clus_DMDB
63911      maxlevel = 513
63912      out=WORK.Clus_DMDB
63913      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.PRINCOMP_TRAIN dmdbcat=WORK.Clus_DMDB maxlevel = 513 out=WORK.Clus_DMDB ;
MPRINT(EM_DIAGRAM):   var
63914      var %DMDBVar;
MPRINT(DMDBVAR):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
MPRINT(EM_DIAGRAM):  ;
63915      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _FORMAT is uninitialized.
NOTE: Variable _NORMFMT is uninitialized.
NOTE: Records processed = 3000   Memory used = 511K.
NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: Vista EMWS1.PRINCOMP_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.59 seconds
      cpu time            0.59 seconds
 
NOTE: There were 3000 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 3000 observations read from the data set EMWS1.PRINCOMP_TRAIN.
NOTE: The data set WORK.CLUS_DMDB has 3000 observations and 20 variables.
NOTE: PROCEDURE DMDB ha utilizado (Tiempo de proceso total):
      real time           0.60 seconds
      cpu time            0.61 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
63916      quit;
63917      *--- end code ---*;
 
63918      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
63919      * Clus: Inputs intervalo Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs intervalo Macro ;
63920      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
63921      %macro DMVQINTERVAL;
63922          PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20
63923         PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
63924      %mend DMVQINTERVAL;
63925      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63926      * Clus: ejecutar procedimiento DMVQ;
MPRINT(EM_DIAGRAM):   * Clus: ejecutar procedimiento DMVQ;
63927      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63928      title;
MPRINT(EM_DIAGRAM):   title;
63929      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
63930      proc dmvq data=WORK.Clus_DMDB dmdbcat=WORK.Clus_DMDB std=STD nominal=GLM ordinal=RANK
63931      ;
MPRINT(EM_DIAGRAM):   proc dmvq data=WORK.Clus_DMDB dmdbcat=WORK.Clus_DMDB std=STD nominal=GLM ordinal=RANK ;
NOTE: The training set WORK.CLUS_DMDB.DATA has 20 variable(s).
NOTE: The DMVQ statement has finished with return code=0 and status=begin.
MPRINT(EM_DIAGRAM):   input
63932      input %DMVQINTERVAL / level=interval;
MPRINT(DMVQINTERVAL):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
MPRINT(EM_DIAGRAM):   / level=interval;
NOTE: 20 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
63933      VQ maxc = 50 clusname=_SEGMENT_ CLUSLABEL="Id de segmento" DISTLABEL="Distancia";
MPRINT(EM_DIAGRAM):   VQ maxc = 50 clusname=_SEGMENT_ CLUSLABEL="Id de segmento" DISTLABEL="Distancia";
NOTE: A maximum of 50 clusters have been requested.
NOTE: The VQ statement has finished with return code=0 and status=architecture.
63934      MAKE outvar=EMWS1.Clus_OUTVAR;
MPRINT(EM_DIAGRAM):   MAKE outvar=EMWS1.Clus_OUTVAR;
 
NOTE: 20 input variable(s).
NOTE: Number of cases=3000
NOTE: Sum of frequencies=3000
NOTE: Sum of weights=3000
NOTE: VARDEF=DF
NOTE: Maximum number of categories=0
NOTE: The total number of variables is 20 with dimensionality 20.
NOTE: 20 variables will be used for clustering.
NOTE: Open output data set EMWS1.CLUS_OUTVAR.DATA with 21 variables.
NOTE: The data set EMWS1.CLUS_OUTVAR has 4 observations and 21 variables.
NOTE: The MAKE statement has finished with return code=0 and status=made.
63935      INITIAL radius=0
63936      ;
MPRINT(EM_DIAGRAM):   INITIAL radius=0 ;
NOTE: 50 semillas seleccionadas del conjunto de datos WORK.CLUS_DMDB.DATA usando el algoritmo SEPARATE.
NOTE: The INITIAL statement has finished with return code=0 and status=initialized.
63937      TRAIN tech=FORGY
63938      ;
MPRINT(EM_DIAGRAM):   TRAIN tech=FORGY ;
WARNING: Se ha alcanzado el límite de 10 iteraciones sin convergencia.
NOTE: The TRAIN statement has finished with return code=0 and status=trained.
63939      SAVE outstat=WORK.Clus_OUTSTAT outmean=EMWS1.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   SAVE outstat=WORK.Clus_OUTSTAT outmean=EMWS1.Clus_OUTMEAN;
NOTE: The data set WORK.CLUS_OUTSTAT has 316 observations and 23 variables.
NOTE: The data set EMWS1.CLUS_OUTMEAN has 50 observations and 29 variables.
NOTE: The SAVE statement has finished with return code=0 and status=statistics.
63940      code file="C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas"
63941      group=Clus
63942      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas" group=Clus ;
NOTE: External file C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas opened.
NOTE: The CODE statement has finished with return code=0 and status=statistics.
63943      run;
MPRINT(EM_DIAGRAM):   run;
 
63944      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 3000 observations read from the data set WORK.CLUS_DMDB.
NOTE: PROCEDURE DMVQ ha utilizado (Tiempo de proceso total):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
63945      proc transpose data=EMWS1.Clus_OUTVAR out=WORK.Clus_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Clus_OUTVAR out=WORK.Clus_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
63946      var PC_1--PC_9;
MPRINT(EM_DIAGRAM):   var PC_1--PC_9;
63947      where _TYPE_ in('TYPE' 'VARIABLE');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('TYPE' 'VARIABLE');
63948      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.CLUS_OUTVAR.
      WHERE _TYPE_ in ('TYPE', 'VARIABLE');
NOTE: The data set WORK.CLUS_OUTVAR has 20 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
63949      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
63950      * Clus: variables DMVQ;
MPRINT(EM_DIAGRAM):   * Clus: variables DMVQ;
63951      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
63952      %macro dmvqvars;
63953          PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20
63954         PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
63955      %mend ;
63956
63957
 
63958      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
63959      * Clus: determinando el número de clústeres;
MPRINT(EM_DIAGRAM):   * Clus: determinando el número de clústeres;
63960      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
63961      proc cluster data=EMWS1.Clus_OUTMEAN method=WARD pseudo outtree=EMWS1.Clus_CLUSSEED
63962      ;
MPRINT(EM_DIAGRAM):   proc cluster data=EMWS1.Clus_OUTMEAN method=WARD pseudo outtree=EMWS1.Clus_CLUSSEED ;
MPRINT(EM_DIAGRAM):   var
63963      var %dmvqvars;
MPRINT(DMVQVARS):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
MPRINT(EM_DIAGRAM):  ;
63964      copy _SEGMENT_;
MPRINT(EM_DIAGRAM):   copy _SEGMENT_;
63965      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS1.CLUS_CLUSSEED has 99 observations and 37 variables.
NOTE: The PROCEDURE CLUSTER printed page 3.
NOTE: PROCEDURE CLUSTER ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
63966      quit;
63967      proc sort data =EMWS1.Clus_CLUSSEED out=WORK._SEED_;
MPRINT(EM_DIAGRAM):   proc sort data =EMWS1.Clus_CLUSSEED out=WORK._SEED_;
63968      by _ncl_;
MPRINT(EM_DIAGRAM):   by _ncl_;
63969      where (_ccc_ > -99999.0);
MPRINT(EM_DIAGRAM):   where (_ccc_ > -99999.0);
63970      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 49 observations read from the data set EMWS1.CLUS_CLUSSEED.
      WHERE _ccc_>-99999;
NOTE: The data set WORK._SEED_ has 49 observations and 37 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
63971      data WORK._SEED2_;
MPRINT(EM_DIAGRAM):   data WORK._SEED2_;
63972      retain oJump occc oncl;
MPRINT(EM_DIAGRAM):   retain oJump occc oncl;
63973      set WORK._SEED_;
MPRINT(EM_DIAGRAM):   set WORK._SEED_;
63974      _lccc_=lag(_ccc_);
MPRINT(EM_DIAGRAM):   _lccc_=lag(_ccc_);
63975      if _lccc_ > . then jump = _ccc_ - _lccc_;
MPRINT(EM_DIAGRAM):   if _lccc_ > . then jump = _ccc_ - _lccc_;
63976      if jump<0 and ojump>0 then do;
MPRINT(EM_DIAGRAM):   if jump<0 and ojump>0 then do;
63977      * Have a local Max;
MPRINT(EM_DIAGRAM):   * Have a local Max;
63978      numclus = oncl;
MPRINT(EM_DIAGRAM):   numclus = oncl;
63979      cccvalue = occc;
MPRINT(EM_DIAGRAM):   cccvalue = occc;
63980      output;
MPRINT(EM_DIAGRAM):   output;
63981      end;
MPRINT(EM_DIAGRAM):   end;
63982      ojump = jump;
MPRINT(EM_DIAGRAM):   ojump = jump;
63983      occc = _ccc_;
MPRINT(EM_DIAGRAM):   occc = _ccc_;
63984      oncl = _ncl_;
MPRINT(EM_DIAGRAM):   oncl = _ncl_;
63985      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 49 observations read from the data set WORK._SEED_.
NOTE: The data set WORK._SEED2_ has 1 observations and 44 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
63986      proc print data=WORK._SEED2_ label;
MPRINT(EM_DIAGRAM):   proc print data=WORK._SEED2_ label;
63987      var numclus cccvalue;
MPRINT(EM_DIAGRAM):   var numclus cccvalue;
63988      label numclus="%sysfunc(sasmsg(sashelp.dmine, rpt_numclus_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label numclus= "Número de clústeres";
63989      label cccvalue="%sysfunc(sasmsg(sashelp.dmine, rpt_ccc_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label cccvalue= "Criterio cúbico de clustering";
63990      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_OptClus_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Candidatos para número de clústeres óptimos";
MPRINT(EM_DIAGRAM):   run;
63991      run;
 
NOTE: There were 1 observations read from the data set WORK._SEED2_.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
63992      title10;
MPRINT(EM_DIAGRAM):   title10;
63993      data WORK._SEED2_;
MPRINT(EM_DIAGRAM):    data WORK._SEED2_;
63994      length msg $200;
MPRINT(EM_DIAGRAM):   length msg $200;
63995      set WORK._SEED2_ end=eof;
MPRINT(EM_DIAGRAM):   set WORK._SEED2_ end=eof;
63996      retain select cccSelect 0 numSel;
MPRINT(EM_DIAGRAM):   retain select cccSelect 0 numSel;
63997      if _N_=1 then numSel = numClus;
MPRINT(EM_DIAGRAM):   if _N_=1 then numSel = numClus;
63998      if cccvalue>=3 then do;
MPRINT(EM_DIAGRAM):   if cccvalue>=3 then do;
63999      if 20>= numclus >= 2 and cccSelect<1 then do;
MPRINT(EM_DIAGRAM):   if 20>= numclus >= 2 and cccSelect<1 then do;
64000      cccSelect = 1;
MPRINT(EM_DIAGRAM):   cccSelect = 1;
64001      select =1;
MPRINT(EM_DIAGRAM):   select =1;
64002      numSel = numClus;
MPRINT(EM_DIAGRAM):   numSel = numClus;
64003      end;
MPRINT(EM_DIAGRAM):   end;
64004      end;
MPRINT(EM_DIAGRAM):   end;
64005      else if 20>= numclus >= 2 and select<1 then do;
MPRINT(EM_DIAGRAM):   else if 20>= numclus >= 2 and select<1 then do;
64006      select = 1;
MPRINT(EM_DIAGRAM):   select = 1;
64007      numSel = numClus;
MPRINT(EM_DIAGRAM):   numSel = numClus;
64008      end;
MPRINT(EM_DIAGRAM):   end;
64009      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
64010      if ^(select=1 and cccselect=1) then do;
MPRINT(EM_DIAGRAM):   if ^(select=1 and cccselect=1) then do;
64011      put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
64012      put '*;';
MPRINT(EM_DIAGRAM):   put '*;';
64013      put "WARNING: puede que el número de clústeres seleccionados basados en los valores CCC no sean válidos. Consulte la documentación de Cubic Clustering Criterion.";
MPRINT(EM_DIAGRAM):   put "WARNING: puede que el número de clústeres seleccionados basados en los valores CCC no sean válidos. Consulte la documentación de Cubic Clustering Criterion.";
64014      put '*;';
MPRINT(EM_DIAGRAM):   put '*;';
64015      put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
64016      end;
MPRINT(EM_DIAGRAM):   end;
64017      if select<1 then do;
MPRINT(EM_DIAGRAM):   if select<1 then do;
64018      msg = sasmsg('sashelp.dmine', 'rpt_noCCCclusternum_note', 'NOQUOTE');
MPRINT(EM_DIAGRAM):   msg = sasmsg('sashelp.dmine', 'rpt_noCCCclusternum_note', 'NOQUOTE');
64019      put msg;
MPRINT(EM_DIAGRAM):   put msg;
64020      end;
MPRINT(EM_DIAGRAM):   end;
64021      if cccselect<1 then do;
MPRINT(EM_DIAGRAM):   if cccselect<1 then do;
64022      msg = sasmsg('sashelp.dmine', 'rpt_noValidclusterNum_note', 'NOQUOTE');
MPRINT(EM_DIAGRAM):   msg = sasmsg('sashelp.dmine', 'rpt_noValidclusterNum_note', 'NOQUOTE');
64023      put msg;
MPRINT(EM_DIAGRAM):   put msg;
64024      end;
MPRINT(EM_DIAGRAM):   end;
64025      call symput('em_maxC', strip(put(numSel,best.)));
MPRINT(EM_DIAGRAM):   call symput('em_maxC', strip(put(numSel,best.)));
64026      end;
MPRINT(EM_DIAGRAM):   end;
64027      run;
MPRINT(EM_DIAGRAM):   run;
 
*------------------------------------------------------------*
*;
WARNING: puede que el número de clústeres seleccionados basados en los valores CCC no sean válidos. Consulte la documentación de Cubic Clustering Criterion.
*;
*------------------------------------------------------------*
No hay clústeres que coincidan con el valor CCC mínimo especificado.
No hay clústeres que coincidan con el número mínimo y máximo especificado de clústeres. El número de clústeres se establecerá en el primer pico local.
NOTE: There were 1 observations read from the data set WORK._SEED2_.
NOTE: The data set WORK._SEED2_ has 1 observations and 48 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
64028      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
64029      * Clus: entrenamiento;
MPRINT(EM_DIAGRAM):   * Clus: entrenamiento;
64030      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64031      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64032      * Clus: ejecutar procedimiento DMVQ;
MPRINT(EM_DIAGRAM):   * Clus: ejecutar procedimiento DMVQ;
64033      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64034      title;
MPRINT(EM_DIAGRAM):   title;
64035      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
64036      proc dmvq data=WORK.Clus_DMDB dmdbcat=WORK.Clus_DMDB std=STD nominal=GLM ordinal=RANK
64037      ;
MPRINT(EM_DIAGRAM):   proc dmvq data=WORK.Clus_DMDB dmdbcat=WORK.Clus_DMDB std=STD nominal=GLM ordinal=RANK ;
NOTE: The training set WORK.CLUS_DMDB.DATA has 20 variable(s).
NOTE: The DMVQ statement has finished with return code=0 and status=begin.
MPRINT(EM_DIAGRAM):   input
64038      input %DMVQINTERVAL / level=interval;
MPRINT(DMVQINTERVAL):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
MPRINT(EM_DIAGRAM):   / level=interval;
NOTE: 20 input variable(s) defined for ID=I1.
NOTE: The INPUT statement has finished with return code=0 and status=variables.
64039      VQ maxc = 23 clusname=_SEGMENT_ CLUSLABEL="Id de segmento" DISTLABEL="Distancia";
MPRINT(EM_DIAGRAM):   VQ maxc = 23 clusname=_SEGMENT_ CLUSLABEL="Id de segmento" DISTLABEL="Distancia";
NOTE: A maximum of 23 clusters have been requested.
NOTE: The VQ statement has finished with return code=0 and status=architecture.
64040      MAKE outvar=EMWS1.Clus_OUTVAR;
MPRINT(EM_DIAGRAM):   MAKE outvar=EMWS1.Clus_OUTVAR;
 
NOTE: 20 input variable(s).
NOTE: Number of cases=3000
NOTE: Sum of frequencies=3000
NOTE: Sum of weights=3000
NOTE: VARDEF=DF
NOTE: Maximum number of categories=0
NOTE: The total number of variables is 20 with dimensionality 20.
NOTE: 20 variables will be used for clustering.
NOTE: Open output data set EMWS1.CLUS_OUTVAR.DATA with 21 variables.
NOTE: The data set EMWS1.CLUS_OUTVAR has 4 observations and 21 variables.
NOTE: The MAKE statement has finished with return code=0 and status=made.
64041      INITIAL radius=0
64042      ;
MPRINT(EM_DIAGRAM):   INITIAL radius=0 ;
NOTE: 23 semillas seleccionadas del conjunto de datos WORK.CLUS_DMDB.DATA usando el algoritmo SEPARATE.
NOTE: The INITIAL statement has finished with return code=0 and status=initialized.
64043      TRAIN tech=FORGY
64044      ;
MPRINT(EM_DIAGRAM):   TRAIN tech=FORGY ;
NOTE: F-Convergence criterion is satisfied.
NOTE: The TRAIN statement has finished with return code=0 and status=trained.
64045      SAVE outstat=EMWS1.Clus_OUTSTAT outmean=EMWS1.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   SAVE outstat=EMWS1.Clus_OUTSTAT outmean=EMWS1.Clus_OUTMEAN;
NOTE: The data set EMWS1.CLUS_OUTSTAT has 154 observations and 23 variables.
NOTE: The data set EMWS1.CLUS_OUTMEAN has 23 observations and 29 variables.
NOTE: The SAVE statement has finished with return code=0 and status=statistics.
64046      code file="C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas"
64047      group=Clus
64048      ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas" group=Clus ;
NOTE: External file C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\DMVQSCORECODE.sas opened.
NOTE: The CODE statement has finished with return code=0 and status=statistics.
64049      run;
MPRINT(EM_DIAGRAM):   run;
 
64050      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 3000 observations read from the data set WORK.CLUS_DMDB.
NOTE: PROCEDURE DMVQ ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
64051      libname _spdslib;
MPRINT(EM_DIAGRAM):    libname _spdslib;
WARNING: Libref _SPDSLIB is not assigned.
64052      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
64053      * Clus: Cluster Label;
MPRINT(EM_DIAGRAM):   * Clus: Cluster Label;
64054      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64055      data EMWS1.Clus_LABEL;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_LABEL;
64056      length _SEGMENT_ 8 Label $80;
MPRINT(EM_DIAGRAM):   length _SEGMENT_ 8 Label $80;
64057      format _SEGMENT_ 4.;
MPRINT(EM_DIAGRAM):   format _SEGMENT_ 4.;
64058      label _SEGMENT_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentName_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Nombre del segmento";
64059      label Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentLabel_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Etiqueta del segmento";
64060      _SEGMENT_= 1;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 1;
64061      Label='Cluster1';
MPRINT(EM_DIAGRAM):   Label='Cluster1';
64062      output;
MPRINT(EM_DIAGRAM):   output;
64063      _SEGMENT_= 2;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 2;
64064      Label='Cluster2';
MPRINT(EM_DIAGRAM):   Label='Cluster2';
64065      output;
MPRINT(EM_DIAGRAM):   output;
64066      _SEGMENT_= 3;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 3;
64067      Label='Cluster3';
MPRINT(EM_DIAGRAM):   Label='Cluster3';
64068      output;
MPRINT(EM_DIAGRAM):   output;
64069      _SEGMENT_= 4;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 4;
64070      Label='Cluster4';
MPRINT(EM_DIAGRAM):   Label='Cluster4';
64071      output;
MPRINT(EM_DIAGRAM):   output;
64072      _SEGMENT_= 5;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 5;
64073      Label='Cluster5';
MPRINT(EM_DIAGRAM):   Label='Cluster5';
64074      output;
MPRINT(EM_DIAGRAM):   output;
64075      _SEGMENT_= 6;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 6;
64076      Label='Cluster6';
MPRINT(EM_DIAGRAM):   Label='Cluster6';
64077      output;
MPRINT(EM_DIAGRAM):   output;
64078      _SEGMENT_= 7;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 7;
64079      Label='Cluster7';
MPRINT(EM_DIAGRAM):   Label='Cluster7';
64080      output;
MPRINT(EM_DIAGRAM):   output;
64081      _SEGMENT_= 8;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 8;
64082      Label='Cluster8';
MPRINT(EM_DIAGRAM):   Label='Cluster8';
64083      output;
MPRINT(EM_DIAGRAM):   output;
64084      _SEGMENT_= 9;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 9;
64085      Label='Cluster9';
MPRINT(EM_DIAGRAM):   Label='Cluster9';
64086      output;
MPRINT(EM_DIAGRAM):   output;
64087      _SEGMENT_= 10;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 10;
64088      Label='Cluster10';
MPRINT(EM_DIAGRAM):   Label='Cluster10';
64089      output;
MPRINT(EM_DIAGRAM):   output;
64090      _SEGMENT_= 11;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 11;
64091      Label='Cluster11';
MPRINT(EM_DIAGRAM):   Label='Cluster11';
64092      output;
MPRINT(EM_DIAGRAM):   output;
64093      _SEGMENT_= 12;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 12;
64094      Label='Cluster12';
MPRINT(EM_DIAGRAM):   Label='Cluster12';
64095      output;
MPRINT(EM_DIAGRAM):   output;
64096      _SEGMENT_= 13;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 13;
64097      Label='Cluster13';
MPRINT(EM_DIAGRAM):   Label='Cluster13';
64098      output;
MPRINT(EM_DIAGRAM):   output;
64099      _SEGMENT_= 14;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 14;
64100      Label='Cluster14';
MPRINT(EM_DIAGRAM):   Label='Cluster14';
64101      output;
MPRINT(EM_DIAGRAM):   output;
64102      _SEGMENT_= 15;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 15;
64103      Label='Cluster15';
MPRINT(EM_DIAGRAM):   Label='Cluster15';
64104      output;
MPRINT(EM_DIAGRAM):   output;
64105      _SEGMENT_= 16;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 16;
64106      Label='Cluster16';
MPRINT(EM_DIAGRAM):   Label='Cluster16';
64107      output;
MPRINT(EM_DIAGRAM):   output;
64108      _SEGMENT_= 17;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 17;
64109      Label='Cluster17';
MPRINT(EM_DIAGRAM):   Label='Cluster17';
64110      output;
MPRINT(EM_DIAGRAM):   output;
64111      _SEGMENT_= 18;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 18;
64112      Label='Cluster18';
MPRINT(EM_DIAGRAM):   Label='Cluster18';
64113      output;
MPRINT(EM_DIAGRAM):   output;
64114      _SEGMENT_= 19;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 19;
64115      Label='Cluster19';
MPRINT(EM_DIAGRAM):   Label='Cluster19';
64116      output;
MPRINT(EM_DIAGRAM):   output;
64117      _SEGMENT_= 20;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 20;
64118      Label='Cluster20';
MPRINT(EM_DIAGRAM):   Label='Cluster20';
64119      output;
MPRINT(EM_DIAGRAM):   output;
64120      _SEGMENT_= 21;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 21;
64121      Label='Cluster21';
MPRINT(EM_DIAGRAM):   Label='Cluster21';
64122      output;
MPRINT(EM_DIAGRAM):   output;
64123      _SEGMENT_= 22;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 22;
64124      Label='Cluster22';
MPRINT(EM_DIAGRAM):   Label='Cluster22';
64125      output;
MPRINT(EM_DIAGRAM):   output;
64126      _SEGMENT_= 23;
MPRINT(EM_DIAGRAM):   _SEGMENT_= 23;
64127      Label='Cluster23';
MPRINT(EM_DIAGRAM):   Label='Cluster23';
64128      output;
MPRINT(EM_DIAGRAM):   output;
64129      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS1.CLUS_LABEL has 23 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00H18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                13/12/20
Hora:                00H18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O25GMDR5 "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O25GMDR5 new;
MPRINT(EM_DIAGRAM):   run;
64231      proc transpose data=EMWS1.Clus_OUTVAR out=WORK.Clus_OUTVAR(rename=(COl2=NAME) where=(COL1='IMPUTED'));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Clus_OUTVAR out=WORK.Clus_OUTVAR(rename=(COl2=NAME) where=(COL1='IMPUTED'));
64232      var PC_1--PC_9;
MPRINT(EM_DIAGRAM):   var PC_1--PC_9;
64233      where _TYPE_ in('TYPE' 'VARIABLE');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('TYPE' 'VARIABLE');
64234      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.CLUS_OUTVAR.
      WHERE _TYPE_ in ('TYPE', 'VARIABLE');
NOTE: The data set WORK.CLUS_OUTVAR has 0 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
64235      proc sort data=WORK.Clus_OUTVAR;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_OUTVAR;
64236      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
64237      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.CLUS_OUTVAR has 0 observations and 4 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
64238      proc sort data=EMWS1.Clus_VariableSet(KEEP=NAME ROLE LEVEL) out=WORK.Clus_SORTEDVARS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_VariableSet(KEEP=NAME ROLE LEVEL) out=WORK.Clus_SORTEDVARS;
64239      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
64240      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.CLUS_VARIABLESET.
NOTE: The data set WORK.CLUS_SORTEDVARS has 21 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
64241      data WORK.Clus_OUTVAR;
MPRINT(EM_DIAGRAM):   data WORK.Clus_OUTVAR;
64242      merge WORK.Clus_OUTVAR(in=INVAR) WORK.Clus_SORTEDVARS;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_OUTVAR(in=INVAR) WORK.Clus_SORTEDVARS;
64243      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
64244      if INVAR then output;
MPRINT(EM_DIAGRAM):   if INVAR then output;
64245      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 0 observations read from the data set WORK.CLUS_OUTVAR.
NOTE: There were 21 observations read from the data set WORK.CLUS_SORTEDVARS.
NOTE: The data set WORK.CLUS_OUTVAR has 0 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
64246      filename emflow "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
64247      *------------------------------------------------------------*;
64248      * Clus: Scoring DATA data;
64249      *------------------------------------------------------------*;
64250      data EMWS1.Clus_TRAIN
64251      / view=EMWS1.Clus_TRAIN
64252      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TRAIN / view=EMWS1.Clus_TRAIN ;
64253      set EMWS1.PRINCOMP_TRAIN
64254      ;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_TRAIN ;
64255      %inc emflow;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize PC_1 ;
MPRINT(EM_DIAGRAM):   drop T_PC_1 ;
MPRINT(EM_DIAGRAM):   if missing( PC_1 ) then T_PC_1 = .;
MPRINT(EM_DIAGRAM):   else T_PC_1 = (PC_1 - 0.03318655417595) * 15.2455507803493;
MPRINT(EM_DIAGRAM):   *** Standardize PC_10 ;
MPRINT(EM_DIAGRAM):   drop T_PC_10 ;
MPRINT(EM_DIAGRAM):   if missing( PC_10 ) then T_PC_10 = .;
MPRINT(EM_DIAGRAM):   else T_PC_10 = (PC_10 - 0.00180598335757) * 26.2885943947214;
MPRINT(EM_DIAGRAM):   *** Standardize PC_11 ;
MPRINT(EM_DIAGRAM):   drop T_PC_11 ;
MPRINT(EM_DIAGRAM):   if missing( PC_11 ) then T_PC_11 = .;
MPRINT(EM_DIAGRAM):   else T_PC_11 = (PC_11 - 0.00039402396105) * 26.9380594505906;
MPRINT(EM_DIAGRAM):   *** Standardize PC_12 ;
MPRINT(EM_DIAGRAM):   drop T_PC_12 ;
MPRINT(EM_DIAGRAM):   if missing( PC_12 ) then T_PC_12 = .;
MPRINT(EM_DIAGRAM):   else T_PC_12 = (PC_12 - 0.00235740769568) * 27.6533965483725;
MPRINT(EM_DIAGRAM):   *** Standardize PC_13 ;
MPRINT(EM_DIAGRAM):   drop T_PC_13 ;
MPRINT(EM_DIAGRAM):   if missing( PC_13 ) then T_PC_13 = .;
MPRINT(EM_DIAGRAM):   else T_PC_13 = (PC_13 - -0.00021858557335) * 28.0092731443424;
MPRINT(EM_DIAGRAM):   *** Standardize PC_14 ;
MPRINT(EM_DIAGRAM):   drop T_PC_14 ;
MPRINT(EM_DIAGRAM):   if missing( PC_14 ) then T_PC_14 = .;
MPRINT(EM_DIAGRAM):   else T_PC_14 = (PC_14 - 0.00007811443969) * 28.2884985540873;
MPRINT(EM_DIAGRAM):   *** Standardize PC_15 ;
MPRINT(EM_DIAGRAM):   drop T_PC_15 ;
MPRINT(EM_DIAGRAM):   if missing( PC_15 ) then T_PC_15 = .;
MPRINT(EM_DIAGRAM):   else T_PC_15 = (PC_15 - -0.00055492364217) * 28.5101404942049;
MPRINT(EM_DIAGRAM):   *** Standardize PC_16 ;
MPRINT(EM_DIAGRAM):   drop T_PC_16 ;
MPRINT(EM_DIAGRAM):   if missing( PC_16 ) then T_PC_16 = .;
MPRINT(EM_DIAGRAM):   else T_PC_16 = (PC_16 - 0.00145632265651) * 28.9395732981546;
MPRINT(EM_DIAGRAM):   *** Standardize PC_17 ;
MPRINT(EM_DIAGRAM):   drop T_PC_17 ;
MPRINT(EM_DIAGRAM):   if missing( PC_17 ) then T_PC_17 = .;
MPRINT(EM_DIAGRAM):   else T_PC_17 = (PC_17 - 0.00243600423981) * 29.4173957149439;
MPRINT(EM_DIAGRAM):   *** Standardize PC_18 ;
MPRINT(EM_DIAGRAM):   drop T_PC_18 ;
MPRINT(EM_DIAGRAM):   if missing( PC_18 ) then T_PC_18 = .;
MPRINT(EM_DIAGRAM):   else T_PC_18 = (PC_18 - -0.00014069832294) * 29.7560132338027;
MPRINT(EM_DIAGRAM):   *** Standardize PC_19 ;
MPRINT(EM_DIAGRAM):   drop T_PC_19 ;
MPRINT(EM_DIAGRAM):   if missing( PC_19 ) then T_PC_19 = .;
MPRINT(EM_DIAGRAM):   else T_PC_19 = (PC_19 - 0.00115709927046) * 29.9903255333019;
MPRINT(EM_DIAGRAM):   *** Standardize PC_2 ;
MPRINT(EM_DIAGRAM):   drop T_PC_2 ;
MPRINT(EM_DIAGRAM):   if missing( PC_2 ) then T_PC_2 = .;
MPRINT(EM_DIAGRAM):   else T_PC_2 = (PC_2 - 0.05473325942454) * 26.1754271468546;
MPRINT(EM_DIAGRAM):   *** Standardize PC_20 ;
MPRINT(EM_DIAGRAM):   drop T_PC_20 ;
MPRINT(EM_DIAGRAM):   if missing( PC_20 ) then T_PC_20 = .;
MPRINT(EM_DIAGRAM):   else T_PC_20 = (PC_20 - 0.00077669327732) * 30.3573128740427;
MPRINT(EM_DIAGRAM):   *** Standardize PC_3 ;
MPRINT(EM_DIAGRAM):   drop T_PC_3 ;
MPRINT(EM_DIAGRAM):   if missing( PC_3 ) then T_PC_3 = .;
MPRINT(EM_DIAGRAM):   else T_PC_3 = (PC_3 - 0.0080727347431) * 17.6572768381086;
MPRINT(EM_DIAGRAM):   *** Standardize PC_4 ;
MPRINT(EM_DIAGRAM):   drop T_PC_4 ;
MPRINT(EM_DIAGRAM):   if missing( PC_4 ) then T_PC_4 = .;
MPRINT(EM_DIAGRAM):   else T_PC_4 = (PC_4 - 0.00119227878951) * 19.0059033625974;
MPRINT(EM_DIAGRAM):   *** Standardize PC_5 ;
MPRINT(EM_DIAGRAM):   drop T_PC_5 ;
MPRINT(EM_DIAGRAM):   if missing( PC_5 ) then T_PC_5 = .;
MPRINT(EM_DIAGRAM):   else T_PC_5 = (PC_5 - 0.00677147298244) * 20.2894697299779;
MPRINT(EM_DIAGRAM):   *** Standardize PC_6 ;
MPRINT(EM_DIAGRAM):   drop T_PC_6 ;
MPRINT(EM_DIAGRAM):   if missing( PC_6 ) then T_PC_6 = .;
MPRINT(EM_DIAGRAM):   else T_PC_6 = (PC_6 - 0.00532096437585) * 21.1181468754015;
MPRINT(EM_DIAGRAM):   *** Standardize PC_7 ;
MPRINT(EM_DIAGRAM):   drop T_PC_7 ;
MPRINT(EM_DIAGRAM):   if missing( PC_7 ) then T_PC_7 = .;
MPRINT(EM_DIAGRAM):   else T_PC_7 = (PC_7 - 0.00342454535797) * 21.5967491364649;
MPRINT(EM_DIAGRAM):   *** Standardize PC_8 ;
MPRINT(EM_DIAGRAM):   drop T_PC_8 ;
MPRINT(EM_DIAGRAM):   if missing( PC_8 ) then T_PC_8 = .;
MPRINT(EM_DIAGRAM):   else T_PC_8 = (PC_8 - 0.00329851446281) * 23.6591862709302;
MPRINT(EM_DIAGRAM):   *** Standardize PC_9 ;
MPRINT(EM_DIAGRAM):   drop T_PC_9 ;
MPRINT(EM_DIAGRAM):   if missing( PC_9 ) then T_PC_9 = .;
MPRINT(EM_DIAGRAM):   else T_PC_9 = (PC_9 - 0.00291827138231) * 25.4860305464463;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Id de segmento' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distancia' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [23] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 23;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_1 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_1 - 26.668151255032 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_1 - -0.19363895595414 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_1 - -0.05636096141465 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_1 - -0.08187447969882 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_1 - 0.64967166403847 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_1 - 18.1504889863368 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_1 - -0.0820458807773 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_1 - -0.01235497283253 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_1 - -0.09903026895614 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_1 - 10.1997378759499 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_1 - -0.01072184726071 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_1 - 0.41191923561408 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_1 - -0.04982769287253 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_1 - -0.009186707564 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_1 - 1.65701325090489 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_1 - 20.9319908172442 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_1 - -0.24576013524867 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_1 - 2.08030960111255 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_1 - 0.32953433342105 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_1 - 0.3038811750275 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_1 - 0.27066631623675 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_1 - 0.08727553901899 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_1 - 0.00246026144858 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_10 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_10 - -0.02204527098626 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_10 - -0.22127499562019 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_10 - 0.01110002286653 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_10 - -0.76679140232894 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_10 - -18.5851880241802 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_10 - -0.82954756972133 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_10 - -0.3285075436003 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_10 - 0.03182977905691 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_10 - 0.04692299707517 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_10 - -1.19077898493202 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_10 - -1.54312697670385 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_10 - 0.07093760417627 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_10 - -0.02618794779918 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_10 - -0.14613075504309 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_10 - 0.26117391895207 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_10 - -0.11701132995108 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_10 - 0.8147914885749 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_10 - 6.59608486804535 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_10 - -0.25307491893344 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_10 - -0.03505781846002 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_10 - -0.19840569855489 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_10 - 0.24195658973848 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_10 - -1.95400186233867 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_11 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_11 - 0.01102224600697 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_11 - -0.05515153202234 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_11 - -0.08652235130313 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_11 - 0.10109754158098 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_11 - 0.36700878979541 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_11 - 1.09834860268962 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_11 - 0.45815982191396 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_11 - -0.16032737389244 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_11 - 0.12431683361367 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_11 - 0.11577052537431 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_11 - -0.34767749205941 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_11 - 2.96144393038594 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_11 - -1.00722857420804 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_11 - -0.64142482619805 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_11 - 5.77281959604525 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_11 - 0.58248801833539 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_11 - 0.17085725572167 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_11 - -0.17276058432074 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_11 - 4.81084070162523 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_11 - -3.12466133855783 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_11 - -0.81110308133184 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_11 - -2.87429990894912 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_11 - 0.24405888980294 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_12 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_12 - -0.11057830967328 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_12 - -0.36173518801715 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_12 - -0.26756866575567 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_12 - -0.4660947670866 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_12 - 1.16295020192969 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_12 - 0.41919389972824 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_12 - -8.87639424981375 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_12 - 0.27049377833097 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_12 - -0.06308322672261 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_12 - -0.36538690075212 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_12 - -1.14511557562628 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_12 - -0.2035272457407 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_12 - 2.47683625248173 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_12 - 0.01162306250494 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_12 - -2.65853477434113 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_12 - 0.30416622008529 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_12 - -0.41237328996943 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_12 - -0.6589904960428 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_12 - -0.27346658810251 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_12 - -0.65962339057166 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_12 - 0.3916989045521 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_12 - 2.19019793684943 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_12 - -1.60945288754684 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_13 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_13 - 0.02520698359054 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_13 - 0.15011687834774 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_13 - 0.36863129955341 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_13 - -6.73041866959073 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_13 - 0.02835865622358 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_13 - 0.03054115274558 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_13 - 0.02238195455006 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_13 - -0.05198933742162 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_13 - -0.00032027257456 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_13 - -0.1131213636619 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_13 - 6.20766502342188 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_13 - 0.2157418356392 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_13 - 7.32375018017765 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_13 - 0.70206506507448 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_13 - 1.17349353138517 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_13 - 0.08325528653924 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_13 - -0.03892523494251 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_13 - 0.04384063859029 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_13 - 0.33674384609475 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_13 - 0.7793819046159 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_13 - -1.18933620087676 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_13 - -5.65810348028453 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_13 - -20.3997838972411 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_14 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_14 - 0.2119418917834 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_14 - -0.12643247546891 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_14 - -0.55019208071305 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_14 - 2.82172641784853 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_14 - -0.53944579682452 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_14 - -0.29739722690038 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_14 - -0.19639184563757 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_14 - 0.08371892472231 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_14 - -0.30280868823997 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_14 - 0.15063072966793 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_14 - -3.73396063554461 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_14 - 0.15022786723009 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_14 - 1.60619926490385 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_14 - 3.19745572101823 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_14 - 1.97260539312879 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_14 - -0.17929253000013 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_14 - -0.04751121877252 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_14 - 0.29737484140501 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_14 - 0.36262929062803 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_14 - 2.47686550678129 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_14 - -2.86441337556014 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_14 - -13.7343731399856 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_14 - 8.31402180087728 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_15 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_15 - 0.0538158943611 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_15 - -0.05112606850168 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_15 - -0.37436281348608 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_15 - -0.02271271046707 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_15 - -0.54042320326894 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_15 - 0.03401032845638 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_15 - 2.27074455700245 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_15 - -0.08381827652876 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_15 - -0.42236106582171 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_15 - -0.55531246502302 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_15 - -1.22418852478213 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_15 - 0.121611799308 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_15 - 5.48041722098893 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_15 - 4.08592633843872 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_15 - -0.50461537532621 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_15 - 0.19434029765873 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_15 - 0.04969016491263 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_15 - 0.24775094919412 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_15 - 1.09396378654387 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_15 - 0.41953726283304 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_15 - 2.90102590014039 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_15 - 11.5963588646183 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_15 - -0.17204867161434 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_16 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_16 - -0.24287955570695 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_16 - -0.22883996445626 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_16 - 0.66534054334917 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_16 - 0.84184934942161 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_16 - 0.80533997223158 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_16 - 0.2071991722487 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_16 - 3.81732098984377 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_16 - 0.24515264853572 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_16 - -0.29250904003623 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_16 - -0.22406499327816 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_16 - -5.78195379579461 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_16 - -0.3706695660861 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_16 - 10.0705819816931 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_16 - -3.16511198619166 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_16 - -1.16641253936448 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_16 - 0.10882237868757 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_16 - -0.25301085118237 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_16 - -0.14165376912153 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_16 - -0.54192012408869 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_16 - -1.49644224433393 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_16 - -0.3657143344885 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_16 - -0.74085553755719 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_16 - 1.76640712860791 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_17 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_17 - -0.03338578591271 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_17 - 0.18230837721448 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_17 - 0.48480072095842 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_17 - -2.68468994128477 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_17 - 0.1678327587047 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_17 - 0.03903574067573 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_17 - 2.97302433223708 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_17 - 0.25943389126298 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_17 - -0.60659298909911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_17 - 0.21906206196383 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_17 - -0.25217130788143 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_17 - 0.78891510419734 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_17 - -9.04911517048785 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_17 - -0.09256825057425 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_17 - 5.5211641740197 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_17 - -0.11779015201469 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_17 - -0.52715876112979 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_17 - 0.17758209183954 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_17 - -0.65647269956316 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_17 - 0.8869378975308 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_17 - -0.66356893468564 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_17 - 0.86806505919178 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_17 - -8.36630805770508 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_18 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_18 - 0.01113217169417 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_18 - 0.03848552035998 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_18 - 0.08890210727131 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_18 - 0.40374846932423 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_18 - 1.19288182900729 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_18 - 0.53601009949701 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_18 - -0.69195398028155 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_18 - -0.19673109345489 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_18 - 0.18494537109766 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_18 - -0.10806741854437 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_18 - -1.99014106516226 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_18 - 3.68632471902898 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_18 - 2.70200026396723 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_18 - -0.96409748002788 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_18 - 19.6792080997742 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_18 - 0.41501415916302 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_18 - 0.19283739753922 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_18 - -0.69212026567621 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_18 - -1.33425488057339 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_18 - 3.86515980892441 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_18 - -2.09287979417894 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_18 - 3.62473114104991 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_18 - 0.86865627176196 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_19 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_19 - 0.15072550354855 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_19 - 0.14900590615445 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_19 - 0.2026523256794 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_19 - -0.55648715031191 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_19 - 0.08709371990514 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_19 - 1.28261655163283 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_19 - -0.35811696030911 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_19 - -0.1127148516955 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_19 - 0.06984787123844 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_19 - 0.38292971198187 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_19 - -2.67956661977452 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_19 - -2.78301038878058 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_19 - -0.79929333303894 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_19 - -1.73560957378595 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_19 - -16.133975955835 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_19 - 0.62467096405658 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_19 - -0.12028604876744 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_19 - 0.15029498054084 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_19 - 2.83318422600406 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_19 - 4.37143862464033 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_19 - 0.513246895713 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_19 - 2.62520257328396 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_19 - -1.93158751332482 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_2 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_2 - -26.5931672666907 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_2 - -0.09697944927391 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_2 - 0.69029118072721 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_2 - 0.41727414720373 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_2 - 2.76347117924538 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_2 - -14.5330760027502 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_2 - 0.28537769286259 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_2 - -0.00419209512493 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_2 - 0.08350526999562 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_2 - -6.19892134903631 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_2 - 0.86534819533192 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_2 - 0.6634910402547 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_2 - 0.27520417463037 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_2 - 0.36034268821674 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_2 - 1.13718544701589 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_2 - -18.8238050496725 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_2 - -0.34718483044985 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_2 - 3.4850961624839 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_2 - 0.5281560566666 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_2 - 0.4482503906119 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_2 - 0.31068015884547 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_2 - 0.28383756199218 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_2 - 0.94399698168808 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_20 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_20 - -0.03574964321042 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_20 - 0.79630587338785 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_20 - -0.13282953522036 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_20 - -2.18592645490703 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_20 - 0.31457591915336 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_20 - 0.05724286973609 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_20 - -1.01994353736174 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_20 - -0.14237379199291 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_20 - 0.14755440177727 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_20 - 0.20033389811432 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_20 - -11.3051732591834 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_20 - -0.16622744442738 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_20 - -0.34516933107055 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_20 - 1.18394342221337 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_20 - -0.00430334137649 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_20 - -0.08618770171031 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_20 - -0.26401157452447 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_20 - -0.10396828090963 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_20 - -0.12228832733798 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_20 - -1.02550558965187 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_20 - 0.07419096905216 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_20 - -0.91740269424607 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_20 - -8.48969560345894 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_3 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_3 - 1.01537534278583 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_3 - 0.05370458853848 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_3 - 0.36375369351768 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_3 - 0.18227952447311 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_3 - -8.36809434575505 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_3 - -0.41286031587408 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_3 - 0.12587861844022 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_3 - 0.06100915021231 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_3 - 0.05099916761304 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_3 - -0.18275512451405 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_3 - 0.25642480701101 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_3 - 0.4234231223063 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_3 - 0.12441679676989 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_3 - 0.12047852082319 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_3 - 0.61937448903834 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_3 - -0.00230315393504 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_3 - -0.26113057222537 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_3 - -16.7065578936745 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_3 - 0.45354070607286 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_3 - 0.34745067207503 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_3 - 0.30335975350988 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_3 - 0.24605346385895 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_3 - 0.40718065489011 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_4 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_4 - 8.22204768794035 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_4 - 0.10554906417144 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_4 - -0.09433518478208 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_4 - 0.09561077658892 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_4 - -0.36144702905405 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_4 - -2.91983763179261 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_4 - -0.0862228549122 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_4 - 0.10635258014045 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_4 - -0.09067680641684 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_4 - -5.72672196634699 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_4 - 0.2784372358675 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_4 - -1.05842889027623 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_4 - -0.02274982365174 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_4 - 0.0077323878345 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_4 - -2.38060152497406 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_4 - 2.00350659921711 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_4 - -0.03680262700212 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_4 - -2.57606251132799 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_4 - -1.02020858406121 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_4 - -0.93402206124203 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_4 - -0.73670634652373 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_4 - -0.19972402427738 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_4 - 0.1325076022177 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_5 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_5 - 18.7160264635441 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_5 - 0.58869944736278 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_5 - 2.13190149158565 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_5 - 0.95757180682239 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_5 - 0.90667343842714 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_5 - -15.4313546534164 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_5 - 0.44082103759082 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_5 - -0.24484135738482 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_5 - 0.19944029281341 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_5 - -20.1976469705844 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_5 - 1.55497417232302 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_5 - -0.55885714823812 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_5 - 0.70949169833413 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_5 - 0.25587835192729 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_5 - -1.75835269298778 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_5 - 0.32796305558601 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_5 - 0.37622028254643 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_5 - 0.62972262137109 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_5 - -0.61368851934215 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_5 - -0.52766437744576 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_5 - -0.42168451301792 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_5 - -0.41408813494347 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_5 - 1.93664058262094 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_6 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_6 - -8.95011168807573 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_6 - 1.04435839342536 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_6 - 4.78862318156275 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_6 - 1.64749847583285 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_6 - -0.70586379677087 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_6 - 12.1081860864269 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_6 - 0.38834811963134 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_6 - -0.3367845213425 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_6 - 0.13639228240538 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_6 - 12.6260058039864 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_6 - 2.77542577296914 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_6 - -1.5396655356632 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_6 - 1.31486190552848 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_6 - 0.38664417310183 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_6 - -3.39071026470442 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_6 - 2.21899894566384 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_6 - 0.48791819917131 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_6 - -0.87277943338878 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_6 - -1.61952528927189 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_6 - -1.33279346684627 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_6 - -1.06078114117624 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_6 - -0.87810696987958 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_6 - 3.53185853803572 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_7 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_7 - -0.73588701766305 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_7 - 1.11491833952176 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_7 - -10.9006824591312 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_7 - 1.14599641537653 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_7 - -0.60966679087808 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_7 - 0.94545558941895 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_7 - -0.51147549259411 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_7 - -0.06208946190166 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_7 - -0.4035473650808 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_7 - 0.87530351914693 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_7 - 2.96351172415592 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_7 - -0.16775075895165 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_7 - 1.43412755585527 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_7 - -0.74286215076048 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_7 - -0.33445339354424 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_7 - 0.15140711726925 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_7 - 0.58712842318093 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_7 - -0.15419575913524 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_7 - -0.17047244800225 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_7 - -0.22490104656468 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_7 - -0.24428494901475 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_7 - -0.03562633945317 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_7 - 2.45452718985293 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_8 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_8 - -0.44482916059592 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_8 - -0.98818185007934 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_8 - -5.00825458836743 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_8 - -1.46198966647996 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_8 - 1.39224308956327 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_8 - 2.49785865214599 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_8 - 3.07381595073828 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_8 - -0.0837905081631 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_8 - 1.10877169992081 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_8 - 1.42138313753659 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_8 - -2.44239801063741 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_8 - -1.17202644393947 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_8 - -1.00617879229583 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_8 - 1.58411832454166 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_8 - -3.24632732630491 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_8 - 1.12980515397391 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_8 - -0.33686367745321 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_8 - -1.2677213581031 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_8 - -1.33885556803294 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_8 - -0.61092730270902 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_8 - -0.3865667818057 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_8 - -0.56191057778711 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_8 - -3.70945757438495 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_PC_9 ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_PC_9 - -0.18398138922751 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_PC_9 - -0.53523614760947 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_PC_9 - 0.27408769773999 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_PC_9 - -1.62859949204097 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_PC_9 - 4.33296549875561 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [6] + ( T_PC_9 - 0.62736465917376 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [7] + ( T_PC_9 - -0.49273912287361 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [8] + ( T_PC_9 - -0.02394369684394 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [9] + ( T_PC_9 - -0.2879262270666 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [10] + ( T_PC_9 - 0.70656772368688 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [11] + ( T_PC_9 - -2.92554469718539 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [12] + ( T_PC_9 - -0.34086325370073 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [13] + ( T_PC_9 - -1.63743170904636 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [14] + ( T_PC_9 - -0.11234009573972 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [15] + ( T_PC_9 - -0.88764780776622 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [16] + ( T_PC_9 - 0.06503692363588 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [17] + ( T_PC_9 - 3.59351846345973 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [18] + ( T_PC_9 - -2.6880206854292 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [19] + ( T_PC_9 - -0.21410493508102 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [20] + ( T_PC_9 - -0.02468597014131 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [21] + ( T_PC_9 - 0.03152018016943 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [22] + ( T_PC_9 - -0.10894696216267 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [23] + ( T_PC_9 - -3.99349236039083 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   _vqnvar = 20 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 4.5474735088646E-11 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 23;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (20 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 6 then _SEGMENT_LABEL_="Cluster6";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 7 then _SEGMENT_LABEL_="Cluster7";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 8 then _SEGMENT_LABEL_="Cluster8";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 9 then _SEGMENT_LABEL_="Cluster9";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 10 then _SEGMENT_LABEL_="Cluster10";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 11 then _SEGMENT_LABEL_="Cluster11";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 12 then _SEGMENT_LABEL_="Cluster12";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 13 then _SEGMENT_LABEL_="Cluster13";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 14 then _SEGMENT_LABEL_="Cluster14";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 15 then _SEGMENT_LABEL_="Cluster15";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 16 then _SEGMENT_LABEL_="Cluster16";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 17 then _SEGMENT_LABEL_="Cluster17";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 18 then _SEGMENT_LABEL_="Cluster18";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 19 then _SEGMENT_LABEL_="Cluster19";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 20 then _SEGMENT_LABEL_="Cluster20";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 21 then _SEGMENT_LABEL_="Cluster21";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 22 then _SEGMENT_LABEL_="Cluster22";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 23 then _SEGMENT_LABEL_="Cluster23";
64970      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.CLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Vista EMWS1.PRINCOMP_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
64971      quit;
64972      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
64973      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
64974      * Clus: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Clus: Computing metadata for TRAIN data;
64975      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: Vista EMWS1.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Clus_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
Sistema SAS
 
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Clus_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Clus_TRAIN out=WORK.M12QG1D3 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12QG1D3;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M12QG1D3(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M12QG1D3;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M12QG1D3;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1J1XDVD NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1J1XDVD;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1J1XDVD;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23VEX3C(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1J1XDVD;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1J1XDVD;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1J1XDVD;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1J1XDVD;
MPRINT(EMADVISECOLUMNS):   set WORK.M1J1XDVD;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT=
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Clus";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   retain _segFlag_ 0;
MPRINT(EM_DIAGRAM):   drop _segFlag_;
MPRINT(EM_DIAGRAM):   if upcase(name) = '_SEGMENT_' then do;
MPRINT(EM_DIAGRAM):   _segFlag_ = 1;
MPRINT(EM_DIAGRAM):   role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Variable';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(name) = '_SEGMENT_LABEL_' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Description';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = 'DISTANCE' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = '_IMPUTE_' then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if ^_segFlag_ and _eof_ then do;
MPRINT(EM_DIAGRAM):   type = 'N';
MPRINT(EM_DIAGRAM):   index = 'N';
MPRINT(EM_DIAGRAM):   indexType = 'NONE';
MPRINT(EM_DIAGRAM):   format = '';
MPRINT(EM_DIAGRAM):   informat = '';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Variable';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_LABEL_';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   label = 'Segment Description';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = 'Distance';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   label = 'Distance to Cluster Seed';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = '_Impute_';
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   label = '';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: Vista EMWS1.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.10 seconds
      cpu time            0.12 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00H18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                13/12/20
Hora:                00H18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1YFE8SO "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1YFE8SO new;
MPRINT(EM_DIAGRAM):   run;
65385      data WORK.M17PWLGR;
MPRINT(EM_DIAGRAM):    data WORK.M17PWLGR;
65386      set WORK.M17PWLGR;
MPRINT(EM_DIAGRAM):   set WORK.M17PWLGR;
65387      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
65388      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.M17PWLGR.
NOTE: The data set WORK.M17PWLGR has 20 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65389      data WORK.M17PWLGR;
MPRINT(EM_DIAGRAM):    data WORK.M17PWLGR;
65390      set WORK.M17PWLGR end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M17PWLGR end=_eof_ nobs=_nobs_;
65391      output;
MPRINT(EM_DIAGRAM):   output;
65392      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
65393      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
65394      ROLE = 'TARGET';
MPRINT(EM_DIAGRAM):   ROLE = 'TARGET';
65395      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
65396      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
65397      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
65398      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
65399      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
65400      USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
65401      output;
MPRINT(EM_DIAGRAM):   output;
65402      end;
MPRINT(EM_DIAGRAM):   end;
65403      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.M17PWLGR.
NOTE: The data set WORK.M17PWLGR has 21 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65404      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
65405      * Clus: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Clus: Create decision matrix;
65406      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
65407      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65408      * Clus: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Variables Macro ;
65409      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65410      %macro EM_TREEVARS;
65411          PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20
65412         PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
65413      %mend EM_TREEVARS;
65414      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65415      * Clus: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Targets Macro ;
65416      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65417      %macro EM_TREETARGETS;
65418          _SEGMENT_
65419      %mend EM_TREETARGETS;
65420      data EMWS1.EM_Clus / view=EMWS1.EM_Clus;
MPRINT(EM_DIAGRAM):   data EMWS1.EM_Clus / view=EMWS1.EM_Clus;
65421      set
65421    ! EMWS1.Clus_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_TRAIN(keep
MPRINT(EM_DIAGRAM):  =PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9 _SEGMENT_);
65422      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.EM_CLUS.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Vista EMWS1.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs intervalo Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65423      *------------------------------------------------------------* ;
65424      * Clus: Inputs intervalo Macro ;
65425      *------------------------------------------------------------* ;
65426      %macro INTINPUTS;
65427          PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20
65428         PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
65429      %mend INTINPUTS;
65430      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65431      * Clus: Inputs binarios y nominales Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs binarios y nominales Macro ;
65432      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65433      %macro NOMINPUTS;
65434
65435      %mend NOMINPUTS;
65436      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65437      * Clus: Inputs ordinales Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs ordinales Macro ;
65438      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
65439      %macro ORDINPUTS;
65440
65441      %mend ORDINPUTS;
65442      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
65443      * Clus: ejecutar procedimiento ARBOR;
MPRINT(EM_DIAGRAM):   * Clus: ejecutar procedimiento ARBOR;
65444      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
65445      proc arbor data=EMWS1.EM_Clus
65446      MAXSURRS=5
65447      ;
MPRINT(EM_DIAGRAM):    proc arbor data=EMWS1.EM_Clus MAXSURRS=5 ;
65448      ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
65449      input %INTINPUTS
MPRINT(INTINPUTS):   PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
65450      / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
65451      target _SEGMENT_ / level=NOMINAL
65452      Criterion=PROBCHISQ
65453      ;
MPRINT(EM_DIAGRAM):   target _SEGMENT_ / level=NOMINAL Criterion=PROBCHISQ ;
65454      ;
MPRINT(EM_DIAGRAM):   ;
65455      Performance DISK
65456      ;
MPRINT(EM_DIAGRAM):   Performance DISK ;
65457      MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: Variable _FORMAT is uninitialized.
NOTE: Variable _NORMFMT is uninitialized.
NOTE: 1406975 kilobytes of physical memory.
NOTE: Will use 3000 out of 3000 training cases.
NOTE: Using memory pool with 579836928 bytes.
NOTE: Passed training data 18 times.
NOTE: Training used 1580024 bytes of work memory.
NOTE: The subtree sequence contains 7 subtrees. The largest has 13 nodes and 7 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
NOTE: Created macro variable NLEAVES equal to 7.
65458      save
65459      MODEL=EMWS1.Clus_PLOTDS
65460      SEQUENCE=EMWS1.Clus_OUTSEQ
65461      IMPORTANCE=EMWS1.Clus_OUTIMPORT
65462      NODESTAT=EMWS1.Clus_OUTNODES
65463      SUMMARY=WORK.OUTSUMMARY_TREE_29D4APA
65464      STATSBYNODE=WORK.OUTSTATS_TREE_29D4APA
65465      Pathlistnonmissing = WORK.OUTPATH_TREE_29D4APA
65466      Rules = WORK.OUTRULES_TREE_29D4APA
65467      ;
MPRINT(EM_DIAGRAM):   save MODEL=EMWS1.Clus_PLOTDS SEQUENCE=EMWS1.Clus_OUTSEQ IMPORTANCE=EMWS1.Clus_OUTIMPORT NODESTAT=EMWS1.Clus_OUTNODES SUMMARY=WORK.OUTSUMMARY_TREE_29D4APA STATSBYNODE=WORK.OUTSTATS_TREE_29D4APA Pathlistnonmissing =
WORK.OUTPATH_TREE_29D4APA Rules = WORK.OUTRULES_TREE_29D4APA ;
NOTE: The data set EMWS1.CLUS_OUTIMPORT has 20 observations and 5 variables.
NOTE: The data set EMWS1.CLUS_PLOTDS has 1371 observations and 4 variables.
NOTE: The data set EMWS1.CLUS_OUTNODES has 13 observations and 62 variables.
NOTE: The data set WORK.OUTPATH_TREE_29D4APA has 66 observations and 7 variables.
NOTE: The data set WORK.OUTRULES_TREE_29D4APA has 246 observations and 6 variables.
NOTE: The data set EMWS1.CLUS_OUTSEQ has 7 observations and 11 variables.
NOTE: The data set WORK.OUTSTATS_TREE_29D4APA has 325 observations and 5 variables.
NOTE: The data set WORK.OUTSUMMARY_TREE_29D4APA has 96 observations and 26 variables.
65468      run;
MPRINT(EM_DIAGRAM):   run;
 
65469      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: There were 3000 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 3000 observations read from the data set EMWS1.PRINCOMP_TRAIN.
NOTE: Vista EMWS1.EM_CLUS.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.96 seconds
      cpu time            0.96 seconds
 
NOTE: There were 3000 observations read from the data set EMWS1.CLUS_TRAIN.
NOTE: There were 3000 observations read from the data set EMWS1.EM_CLUS.
NOTE: The data set WORK._NAMEDAT has 23 observations and 5 variables.
NOTE: PROCEDURE ARBOR ha utilizado (Tiempo de proceso total):
      real time           0.97 seconds
      cpu time            0.96 seconds
 
 
65470      data EMWS1.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):    data EMWS1.Clus_OUTIMPORT;
65471      set EMWS1.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTIMPORT;
65472      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
65473         "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
65474      ;
MPRINT(EM_DIAGRAM):   label NAME = "Nombre de la variable" LABEL = "Etiqueta" NRULES = "Número de reglas de división" IMPORTANCE = "Importancia" NSURROGATES = "Número de reglas sustitutas" ;
65475      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.CLUS_OUTIMPORT.
NOTE: The data set EMWS1.CLUS_OUTIMPORT has 20 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65476      filename x "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
65477      data temp;
MPRINT(EM_DIAGRAM):    data temp;
65478      length varname $23;
MPRINT(EM_DIAGRAM):   length varname $23;
65479      retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
65480      set WORK.OUTPATH_TREE_29D4APA;
MPRINT(EM_DIAGRAM):   set WORK.OUTPATH_TREE_29D4APA;
65481      if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
65482      else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
65483      output;
MPRINT(EM_DIAGRAM):   output;
65484      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 66 observations read from the data set WORK.OUTPATH_TREE_29D4APA.
NOTE: The data set WORK.TEMP has 66 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65485      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
65486      by node;
MPRINT(EM_DIAGRAM):   by node;
65487      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 66 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 66 observations and 8 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65488      proc sort data=EMWS1.Clus_OUTNODES out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_OUTNODES out=outnodes;
65489      by node;
MPRINT(EM_DIAGRAM):   by node;
65490      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_OUTNODES.
NOTE: The data set WORK.OUTNODES has 13 observations and 62 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65491      data temp;
MPRINT(EM_DIAGRAM):   data temp;
65492      merge temp(in=_a) outnodes(keep= node
65493      NPRIORS
65494      P__SEGMENT_9
65495      P__SEGMENT_8
65496      P__SEGMENT_2
65497      P__SEGMENT_17
65498      P__SEGMENT_12
65499      P__SEGMENT_7
65500      P__SEGMENT_5
65501      P__SEGMENT_13
65502      P__SEGMENT_20
65503      P__SEGMENT_14
65504      P__SEGMENT_3
65505      P__SEGMENT_19
65506      P__SEGMENT_11
65507      P__SEGMENT_21
65508      P__SEGMENT_4
65509      P__SEGMENT_1
65510      P__SEGMENT_22
65511      P__SEGMENT_18
65512      P__SEGMENT_6
65513      P__SEGMENT_15
65514      P__SEGMENT_16
65515      P__SEGMENT_23
65516      P__SEGMENT_10
65517      );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P__SEGMENT_9 P__SEGMENT_8 P__SEGMENT_2 P__SEGMENT_17 P__SEGMENT_12 P__SEGMENT_7 P__SEGMENT_5 P__SEGMENT_13 P__SEGMENT_20 P__SEGMENT_14 P__SEGMENT_3 P__SEGMENT_19 P__SEGMENT_11
P__SEGMENT_21 P__SEGMENT_4 P__SEGMENT_1 P__SEGMENT_22 P__SEGMENT_18 P__SEGMENT_6 P__SEGMENT_15 P__SEGMENT_16 P__SEGMENT_23 P__SEGMENT_10 );
65518      by node;
MPRINT(EM_DIAGRAM):   by node;
65519      if _a;
MPRINT(EM_DIAGRAM):   if _a;
65520      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 66 observations read from the data set WORK.TEMP.
NOTE: There were 13 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 66 observations and 32 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65521      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
65522      by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
65523      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 66 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 66 observations and 32 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65524      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
65525      file x;
MPRINT(EM_DIAGRAM):   file x;
65526      set temp;
MPRINT(EM_DIAGRAM):   set temp;
65527      by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
65528      retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
65529      length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
65530      if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
65531      origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
65532      oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
65533      end;
MPRINT(EM_DIAGRAM):   end;
65534      if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
65535      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
65536      put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
65537      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
65538      end;
MPRINT(EM_DIAGRAM):   end;
65539      if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
65540      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
65541      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
65542      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
65543      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
65544      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
65545      end;
MPRINT(EM_DIAGRAM):   end;
65546      else do;
MPRINT(EM_DIAGRAM):   else do;
65547      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
65548      end;
MPRINT(EM_DIAGRAM):   end;
65549      end;
MPRINT(EM_DIAGRAM):   end;
65550      end;
MPRINT(EM_DIAGRAM):   end;
65551      else do;
MPRINT(EM_DIAGRAM):   else do;
65552      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
65553      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
65554      end;
MPRINT(EM_DIAGRAM):   end;
65555      else do;
MPRINT(EM_DIAGRAM):   else do;
65556      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
65557      end;
MPRINT(EM_DIAGRAM):   end;
65558      end;
MPRINT(EM_DIAGRAM):   end;
65559      end;
MPRINT(EM_DIAGRAM):   end;
65560      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
65561      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
65562      string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
65563      end;
MPRINT(EM_DIAGRAM):   end;
65564      else do;
MPRINT(EM_DIAGRAM):   else do;
65565      string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
65566      end;
MPRINT(EM_DIAGRAM):   end;
65567      end;
MPRINT(EM_DIAGRAM):   end;
65568      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
65569      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
65570      string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
65571      end;
MPRINT(EM_DIAGRAM):   end;
65572      else do;
MPRINT(EM_DIAGRAM):   else do;
65573      string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
65574      end;
MPRINT(EM_DIAGRAM):   end;
65575      end;
MPRINT(EM_DIAGRAM):   end;
65576      else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
65577      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
65578      string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
65579      end;
MPRINT(EM_DIAGRAM):   end;
65580      else do;
MPRINT(EM_DIAGRAM):   else do;
65581      string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
65582      end;
MPRINT(EM_DIAGRAM):   end;
65583      end;
MPRINT(EM_DIAGRAM):   end;
65584      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
65585      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
65586      end;
MPRINT(EM_DIAGRAM):   end;
65587      else do;
MPRINT(EM_DIAGRAM):   else do;
65588      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
65589      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
65590      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
65591      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
65592      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
65593      end;
MPRINT(EM_DIAGRAM):   end;
65594      end;
MPRINT(EM_DIAGRAM):   end;
65595      else do;
MPRINT(EM_DIAGRAM):   else do;
65596      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
65597      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
65598      end;
MPRINT(EM_DIAGRAM):   end;
65599      end;
MPRINT(EM_DIAGRAM):   end;
65600      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
65601      string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
65602      end;
MPRINT(EM_DIAGRAM):   end;
65603      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
65604      end;
MPRINT(EM_DIAGRAM):   end;
65605      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
65606      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
65607      end;
MPRINT(EM_DIAGRAM):   end;
65608      if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
65609      if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
65610      if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
65611      string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
65612      end;
MPRINT(EM_DIAGRAM):   end;
65613      end;
MPRINT(EM_DIAGRAM):   end;
65614      put string;
MPRINT(EM_DIAGRAM):   put string;
65615      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
65616      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
65617      end;
MPRINT(EM_DIAGRAM):   end;
65618      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
65619      put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
65620      put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
65621      put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
65622      put " Predicted: _SEGMENT_=9  = " P__SEGMENT_9;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=9  = " P__SEGMENT_9;
65623      put " Predicted: _SEGMENT_=8  = " P__SEGMENT_8;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=8  = " P__SEGMENT_8;
65624      put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
65625      put " Predicted: _SEGMENT_=17  = " P__SEGMENT_17;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=17  = " P__SEGMENT_17;
65626      put " Predicted: _SEGMENT_=12  = " P__SEGMENT_12;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=12  = " P__SEGMENT_12;
65627      put " Predicted: _SEGMENT_=7  = " P__SEGMENT_7;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=7  = " P__SEGMENT_7;
65628      put " Predicted: _SEGMENT_=5  = " P__SEGMENT_5;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=5  = " P__SEGMENT_5;
65629      put " Predicted: _SEGMENT_=13  = " P__SEGMENT_13;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=13  = " P__SEGMENT_13;
65630      put " Predicted: _SEGMENT_=20  = " P__SEGMENT_20;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=20  = " P__SEGMENT_20;
65631      put " Predicted: _SEGMENT_=14  = " P__SEGMENT_14;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=14  = " P__SEGMENT_14;
65632      put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
65633      put " Predicted: _SEGMENT_=19  = " P__SEGMENT_19;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=19  = " P__SEGMENT_19;
65634      put " Predicted: _SEGMENT_=11  = " P__SEGMENT_11;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=11  = " P__SEGMENT_11;
65635      put " Predicted: _SEGMENT_=21  = " P__SEGMENT_21;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=21  = " P__SEGMENT_21;
65636      put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
65637      put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
65638      put " Predicted: _SEGMENT_=22  = " P__SEGMENT_22;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=22  = " P__SEGMENT_22;
65639      put " Predicted: _SEGMENT_=18  = " P__SEGMENT_18;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=18  = " P__SEGMENT_18;
65640      put " Predicted: _SEGMENT_=6  = " P__SEGMENT_6;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=6  = " P__SEGMENT_6;
65641      put " Predicted: _SEGMENT_=15  = " P__SEGMENT_15;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=15  = " P__SEGMENT_15;
65642      put " Predicted: _SEGMENT_=16  = " P__SEGMENT_16;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=16  = " P__SEGMENT_16;
65643      put " Predicted: _SEGMENT_=23  = " P__SEGMENT_23;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=23  = " P__SEGMENT_23;
65644      put " Predicted: _SEGMENT_=10  = " P__SEGMENT_10;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=10  = " P__SEGMENT_10;
65645      put " ";
MPRINT(EM_DIAGRAM):   put " ";
65646      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
65647      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
65648      end;
MPRINT(EM_DIAGRAM):   end;
65649      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      65544:67    65547:66    65591:108   65592:72
NOTE: The file X is:
      Nombre archivo=C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,
      Tamaño de archivo (bytes)=0,
      Última modificación=13 de diciembre de 2020 00H18,
      Create Time=13 de diciembre de 2020 00H17
 
NOTE: 234 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 87.
NOTE: There were 66 observations read from the data set WORK.TEMP.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65650      filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
65651      /* belowtext */
65652      data templabel;
MPRINT(EM_DIAGRAM):    data templabel;
65653      set WORK.OUTRULES_TREE_29D4APA;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_29D4APA;
65654      if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
65655      rename character_value = belowtext;
MPRINT(EM_DIAGRAM):   rename character_value = belowtext;
65656      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
65657      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 246 observations read from the data set WORK.OUTRULES_TREE_29D4APA.
NOTE: The data set WORK.TEMPLABEL has 6 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65658      data tempvar;
MPRINT(EM_DIAGRAM):   data tempvar;
65659      set WORK.OUTRULES_TREE_29D4APA;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_29D4APA;
65660      if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
65661      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
65662      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 246 observations read from the data set WORK.OUTRULES_TREE_29D4APA.
NOTE: The data set WORK.TEMPVAR has 6 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65663      proc sort data=templabel;
MPRINT(EM_DIAGRAM):   proc sort data=templabel;
65664      by node;
MPRINT(EM_DIAGRAM):   by node;
65665      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPLABEL.
NOTE: The data set WORK.TEMPLABEL has 6 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65666      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
65667      by node;
MPRINT(EM_DIAGRAM):   by node;
65668      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 6 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65669      data tempbelow;
MPRINT(EM_DIAGRAM):   data tempbelow;
65670      merge templabel tempvar;
MPRINT(EM_DIAGRAM):   merge templabel tempvar;
65671      by node;
MPRINT(EM_DIAGRAM):   by node;
65672      if missing(belowtext) then belowtext= character_value;
MPRINT(EM_DIAGRAM):   if missing(belowtext) then belowtext= character_value;
65673      keep node belowtext;
MPRINT(EM_DIAGRAM):   keep node belowtext;
65674      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPLABEL.
NOTE: There were 6 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPBELOW has 6 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65675      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
65676      by node;
MPRINT(EM_DIAGRAM):   by node;
65677      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TEMPBELOW has 6 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65678      /* abovetext */
65679      data tempoutrules;
MPRINT(EM_DIAGRAM):   data tempoutrules;
65680      set WORK.OUTRULES_TREE_29D4APA;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_29D4APA;
65681      if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
MPRINT(EM_DIAGRAM):   if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
65682      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 246 observations read from the data set WORK.OUTRULES_TREE_29D4APA.
NOTE: The data set WORK.TEMPOUTRULES has 6 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65683      proc sort data=tempoutrules;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutrules;
65684      by node numeric_value;
MPRINT(EM_DIAGRAM):   by node numeric_value;
65685      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 6 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65686      data tempabove;
MPRINT(EM_DIAGRAM):   data tempabove;
65687      set tempoutrules(rename=(node=parent));
MPRINT(EM_DIAGRAM):   set tempoutrules(rename=(node=parent));
65688      by parent numeric_value;
MPRINT(EM_DIAGRAM):   by parent numeric_value;
65689      retain abovetext tempstring flag branch origval origchar;
MPRINT(EM_DIAGRAM):   retain abovetext tempstring flag branch origval origchar;
65690      *length abovetext tempstring origchar $45;
MPRINT(EM_DIAGRAM):   *length abovetext tempstring origchar $45;
65691      length abovetext $256;
MPRINT(EM_DIAGRAM):   length abovetext $256;
65692      length tempstring origchar $64;
MPRINT(EM_DIAGRAM):   length tempstring origchar $64;
65693      if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_DIAGRAM):   if STAT in ("INTERVAL", "ORDINAL") then do;
65694      if first.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent then do;
65695      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
65696      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
65697      abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(NUMERIC_VALUE);
65698      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
65699      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
65700      output;
MPRINT(EM_DIAGRAM):   output;
65701      end;
MPRINT(EM_DIAGRAM):   end;
65702      else do;
MPRINT(EM_DIAGRAM):   else do;
65703      abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(CHARACTER_VALUE);
65704      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
65705      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
65706      output;
MPRINT(EM_DIAGRAM):   output;
65707      end;
MPRINT(EM_DIAGRAM):   end;
65708      if first.parent AND last.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent AND last.parent then do;
65709      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
65710      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
65711      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
65712      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
65713      output;
MPRINT(EM_DIAGRAM):   output;
65714      end;
MPRINT(EM_DIAGRAM):   end;
65715      else do;
MPRINT(EM_DIAGRAM):   else do;
65716      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
65717      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
65718      output;
MPRINT(EM_DIAGRAM):   output;
65719      end;
MPRINT(EM_DIAGRAM):   end;
65720      end;
MPRINT(EM_DIAGRAM):   end;
65721      end;
MPRINT(EM_DIAGRAM):   end;
65722      else if last.parent then do;
MPRINT(EM_DIAGRAM):   else if last.parent then do;
65723      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
65724      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
65725      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
65726      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
65727      end;
MPRINT(EM_DIAGRAM):   end;
65728      else do;
MPRINT(EM_DIAGRAM):   else do;
65729      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
65730      end;
MPRINT(EM_DIAGRAM):   end;
65731      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
65732      output;
MPRINT(EM_DIAGRAM):   output;
65733      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
65734      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
65735      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
65736      end;
MPRINT(EM_DIAGRAM):   end;
65737      else do;
MPRINT(EM_DIAGRAM):   else do;
65738      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
65739      end;
MPRINT(EM_DIAGRAM):   end;
65740      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
65741      output;
MPRINT(EM_DIAGRAM):   output;
65742      end;
MPRINT(EM_DIAGRAM):   end;
65743      else do;
MPRINT(EM_DIAGRAM):   else do;
65744      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
65745      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
65746      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
65747      end;
MPRINT(EM_DIAGRAM):   end;
65748      else do;
MPRINT(EM_DIAGRAM):   else do;
65749      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
65750      end;
MPRINT(EM_DIAGRAM):   end;
65751      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
65752      output;
MPRINT(EM_DIAGRAM):   output;
65753      end;
MPRINT(EM_DIAGRAM):   end;
65754      end;
MPRINT(EM_DIAGRAM):   end;
65755      else do;
MPRINT(EM_DIAGRAM):   else do;
65756      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
65757      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
65758      numeric_value = round(numeric_value,0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value,0.0001);
65759      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
65760      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
65761      end;
MPRINT(EM_DIAGRAM):   end;
65762      else do;
MPRINT(EM_DIAGRAM):   else do;
65763      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
65764      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
65765      end;
MPRINT(EM_DIAGRAM):   end;
65766      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
65767      output;
MPRINT(EM_DIAGRAM):   output;
65768      end;
MPRINT(EM_DIAGRAM):   end;
65769      else do;
MPRINT(EM_DIAGRAM):   else do;
65770      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
65771      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
65772      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
65773      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
65774      end;
MPRINT(EM_DIAGRAM):   end;
65775      else do;
MPRINT(EM_DIAGRAM):   else do;
65776      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
65777      origval = character_value;
MPRINT(EM_DIAGRAM):   origval = character_value;
65778      end;
MPRINT(EM_DIAGRAM):   end;
65779      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
65780      output;
MPRINT(EM_DIAGRAM):   output;
65781      end;
MPRINT(EM_DIAGRAM):   end;
65782      end;
MPRINT(EM_DIAGRAM):   end;
65783      end;
MPRINT(EM_DIAGRAM):   end;
65784      else do;
MPRINT(EM_DIAGRAM):   else do;
65785      if first.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value then do;
65786      flag = 0;
MPRINT(EM_DIAGRAM):   flag = 0;
65787      abovetext = CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   abovetext = CHARACTER_VALUE;
65788      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
65789      if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value AND last.numeric_value then do;
65790      output;
MPRINT(EM_DIAGRAM):   output;
65791      end;
MPRINT(EM_DIAGRAM):   end;
65792      end;
MPRINT(EM_DIAGRAM):   end;
65793      else if last.numeric_value then do;
MPRINT(EM_DIAGRAM):   else if last.numeric_value then do;
65794      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
65795      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
65796      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
65797      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
65798      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
65799      end;
MPRINT(EM_DIAGRAM):   end;
65800      else do;
MPRINT(EM_DIAGRAM):   else do;
65801      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
65802      flag = 1;
MPRINT(EM_DIAGRAM):   flag = 1;
65803      end;
MPRINT(EM_DIAGRAM):   end;
65804      end;
MPRINT(EM_DIAGRAM):   end;
65805      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
65806      output;
MPRINT(EM_DIAGRAM):   output;
65807      end;
MPRINT(EM_DIAGRAM):   end;
65808      else do;
MPRINT(EM_DIAGRAM):   else do;
65809      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
65810      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
65811      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
65812      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
65813      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
65814      end;
MPRINT(EM_DIAGRAM):   end;
65815      else do;
MPRINT(EM_DIAGRAM):   else do;
65816      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
65817      flag=1;
MPRINT(EM_DIAGRAM):   flag=1;
65818      end;
MPRINT(EM_DIAGRAM):   end;
65819      end;
MPRINT(EM_DIAGRAM):   end;
65820      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
65821      end;
MPRINT(EM_DIAGRAM):   end;
65822      end;
MPRINT(EM_DIAGRAM):   end;
65823      keep parent branch abovetext;
MPRINT(EM_DIAGRAM):   keep parent branch abovetext;
65824      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      65697:25   65712:26   65726:24   65726:47   65735:26   65746:26   65759:24   65759:47   65772:26
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      65777:11
NOTE: There were 6 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPABOVE has 12 observations and 3 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65825      /* MIssing value to abovetext */
65826      data tempmissing;
MPRINT(EM_DIAGRAM):   data tempmissing;
65827      set WORK.OUTRULES_TREE_29D4APA;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_29D4APA;
65828      if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
65829      rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_DIAGRAM):   rename node=parent numeric_value=branch character_value=misschar;
65830      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 246 observations read from the data set WORK.OUTRULES_TREE_29D4APA.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65831      proc sort data=work.tempabove;
MPRINT(EM_DIAGRAM):   proc sort data=work.tempabove;
65832      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
65833      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set WORK.TEMPABOVE.
NOTE: The data set WORK.TEMPABOVE has 12 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65834      proc sort data=EMWS1.Clus_OUTNODES out=tempoutnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_OUTNODES out=tempoutnodes;
65835      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
65836      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 62 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65837      proc sort data=tempmissing;
MPRINT(EM_DIAGRAM):   proc sort data=tempmissing;
65838      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
65839      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65840      data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
65841      merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
MPRINT(EM_DIAGRAM):   merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
65842      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
65843      length traintotal validtotal 8;
MPRINT(EM_DIAGRAM):   length traintotal validtotal 8;
65844      retain traintotal validtotal;
MPRINT(EM_DIAGRAM):   retain traintotal validtotal;
65845      if _a then do;
MPRINT(EM_DIAGRAM):   if _a then do;
65846      if ^MISSING(abovetext) then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(abovetext) then do;
65847      abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext= strip(abovetext)||" Falta Or";
65848      end;
MPRINT(EM_DIAGRAM):   end;
65849      else do;
MPRINT(EM_DIAGRAM):   else do;
65850      abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext = " Sólo valores ausentes";
65851      end;
MPRINT(EM_DIAGRAM):   end;
65852      end;
MPRINT(EM_DIAGRAM):   end;
65853      if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   if MISSING(abovetext) then abovetext="Valores no ausentes";
65854      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
65855      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
65856      validtotal=VN;
MPRINT(EM_DIAGRAM):   validtotal=VN;
65857      end;
MPRINT(EM_DIAGRAM):   end;
65858      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Total de entrenamiento";
65859      drop role rank stat misschar belowtext;
MPRINT(EM_DIAGRAM):   drop role rank stat misschar belowtext;
65860      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable VN is uninitialized.
NOTE: There were 12 observations read from the data set WORK.TEMPABOVE.
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 64 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65861      proc sort data=WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_outnodes;
65862      by node;
MPRINT(EM_DIAGRAM):   by node;
65863      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 64 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65864      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
65865      by node;
MPRINT(EM_DIAGRAM):   by node;
65866      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65867      data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
65868      merge WORK.Clus_outnodes tempbelow;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_outnodes tempbelow;
65869      by node;
MPRINT(EM_DIAGRAM):   by node;
65870      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 65 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Variable _FORMAT is uninitialized.
NOTE: Variable _NORMFMT is uninitialized.
NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: There were 3000 observations read from the data set EMWS1.IDS_DATA.
NOTE: There were 3000 observations read from the data set EMWS1.PRINCOMP_TRAIN.
NOTE: Vista EMWS1.EM_CLUS.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.69 seconds
      cpu time            0.68 seconds
 
NOTE: There were 3000 observations read from the data set EMWS1.CLUS_TRAIN.
65871      data tempoutstats;
MPRINT(EM_DIAGRAM):    data tempoutstats;
65872      set WORK.OUTSTATS_TREE_29D4APA;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_29D4APA;
65873      length tarlevel $8;
MPRINT(EM_DIAGRAM):   length tarlevel $8;
65874      tarlevel ="NOMINAL";
MPRINT(EM_DIAGRAM):   tarlevel ="NOMINAL";
65875      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 325 observations read from the data set WORK.OUTSTATS_TREE_29D4APA.
NOTE: The data set WORK.TEMPOUTSTATS has 325 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65876      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS1.Clus_TREE_PLOT;
65877      length NODETEXT TEXTALL $800 N NODECOLOR 8;
MPRINT(EM_DIAGRAM):   length NODETEXT TEXTALL $800 N NODECOLOR 8;
65878      set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
65879      label parent = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentID_vlabel, noquote))" depth = "%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, noquote))" belowtext= "%sysfunc(sasmsg(sashelp.dmine, rpt_belowtext_vlabel, noquote))" abovetext =
65880         "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))" linkwidth = "%sysfunc(sasmsg(sashelp.dmine, rpt_linkwidth_vlabel, noquote))" nodetext = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodetext_vlabel, noquote))" textall =
65881         "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))" N = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainn_vlabel, noquote))" nodecolor = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))" node =
65882         "%sysfunc(sasmsg(sashelp.dmine, rpt_node_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label parent = "Id padre" depth = "Profundidad" belowtext= "Por debajo del texto" abovetext = "Por encima del texto" linkwidth = "Anchura del enlace" nodetext = "Texto del nodo" textall = "Todo el texto" N = "Entrenar: número de
observaciones" nodecolor = "Color del nodo" node = "Nodo";
65883      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
65884      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TEXTALL is uninitialized.
NOTE: Variable NODECOLOR is uninitialized.
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
65885      proc sort data=EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_TREE_PLOT;
65886      by node;
MPRINT(EM_DIAGRAM):   by node;
65887      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 10 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65888      proc sort data=tempoutstats;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutstats;
65889      by node;
MPRINT(EM_DIAGRAM):   by node;
65890      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 325 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 325 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65891      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS1.Clus_TREE_PLOT;
65892      merge EMWS1.Clus_TREE_PLOT tempoutstats;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_TREE_PLOT tempoutstats;
65893      length text $800 _RASE_ P__SEGMENT_9 8;
MPRINT(EM_DIAGRAM):   length text $800 _RASE_ P__SEGMENT_9 8;
65894      retain P__SEGMENT_9 eventlevel;
MPRINT(EM_DIAGRAM):   retain P__SEGMENT_9 eventlevel;
65895      by node;
MPRINT(EM_DIAGRAM):   by node;
65896      if statname='N' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='N' then N=statvalue;
65897      if statname='NPRIORS' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='NPRIORS' then N=statvalue;
65898      if statname='PREDICTION' then eventlevel=category;
MPRINT(EM_DIAGRAM):   if statname='PREDICTION' then eventlevel=category;
65899      _RASE_ = .;
MPRINT(EM_DIAGRAM):   _RASE_ = .;
65900      if tarlevel ^= 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^= 'INTERVAL' then do;
65901      if STATNAME = 'PROBABILITY' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PROBABILITY' then do;
65902      if CATEGORY=EVENTLEVEL then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL then do;
65903      nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
65904      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
65905      P__SEGMENT_9 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   P__SEGMENT_9 = round(STATVALUE, .01);
65906      end;
MPRINT(EM_DIAGRAM):   end;
65907      else do;
MPRINT(EM_DIAGRAM):   else do;
65908      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
65909      end;
MPRINT(EM_DIAGRAM):   end;
65910      textall = strip(textall)||'0A'x||strip( text);
MPRINT(EM_DIAGRAM):   textall = strip(textall)||'0A'x||strip( text);
65911      end;
MPRINT(EM_DIAGRAM):   end;
65912      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
65913      nodetext = trim(nodetext)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||" Número:"|| put(N, 13.);
65914      textall = trim(textall)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||" Número:"|| put(N, 13.);
65915      output EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS1.Clus_TREE_PLOT;
65916      end;
MPRINT(EM_DIAGRAM):   end;
65917      end;
MPRINT(EM_DIAGRAM):   end;
65918      else do;
MPRINT(EM_DIAGRAM):   else do;
65919      if statname='RASE' then _RASE_=statvalue;
MPRINT(EM_DIAGRAM):   if statname='RASE' then _RASE_=statvalue;
65920      label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Entrenar: error cuadrado del promedio de la raíz";
65921      if STATNAME = 'PREDICTION' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PREDICTION' then do;
65922      nodetext= "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"|| put(STATVALUE, 13.4)||'0A'x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext= "Promedio"|| put(STATVALUE, 13.4)||'0A'x|| "Número:"|| put(N, 13.);
65923      textall = nodetext;
MPRINT(EM_DIAGRAM):   textall = nodetext;
65924      P__SEGMENT_9 = STATVALUE;
MPRINT(EM_DIAGRAM):   P__SEGMENT_9 = STATVALUE;
65925      ;
MPRINT(EM_DIAGRAM):   ;
65926      ;
MPRINT(EM_DIAGRAM):   ;
65927      end;
MPRINT(EM_DIAGRAM):   end;
65928      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
65929      output EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS1.Clus_TREE_PLOT;
65930      end;
MPRINT(EM_DIAGRAM):   end;
65931      ;
MPRINT(EM_DIAGRAM):   ;
65932      end;
MPRINT(EM_DIAGRAM):   end;
65933      label P__SEGMENT_9 = "%sysfunc(sasmsg(sashelp.dmine, rpt_predictedvar_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label P__SEGMENT_9 = "Variable predicha";
65934      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_9;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_9;
65935      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: There were 325 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 12 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
65936      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
65937      set WORK.OUTSTATS_TREE_29D4APA;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_29D4APA;
65938      retain eventlevel;
MPRINT(EM_DIAGRAM):   retain eventlevel;
65939      if STATNAME='PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' then eventlevel=CATEGORY;
65940      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 325 observations read from the data set WORK.OUTSTATS_TREE_29D4APA.
NOTE: The data set WORK.TEMPCOLOR has 325 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65941      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
65942      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
65943      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
65944      if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
65945      end;
MPRINT(EM_DIAGRAM):   end;
65946      else do;
MPRINT(EM_DIAGRAM):   else do;
65947      if STATNAME="PREDICTION";
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION";
65948      end;
MPRINT(EM_DIAGRAM):   end;
65949      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 325 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65950      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
65951      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
65952      length nodecolor 8;
MPRINT(EM_DIAGRAM):   length nodecolor 8;
65953      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
65954      nodecolor = round(100*(STATVALUE), .01);
MPRINT(EM_DIAGRAM):   nodecolor = round(100*(STATVALUE), .01);
65955      end;
MPRINT(EM_DIAGRAM):   end;
65956      else do;
MPRINT(EM_DIAGRAM):   else do;
65957      nodecolor=round(statvalue, .01);
MPRINT(EM_DIAGRAM):   nodecolor=round(statvalue, .01);
65958      end;
MPRINT(EM_DIAGRAM):   end;
65959      keep node nodecolor;
MPRINT(EM_DIAGRAM):   keep node nodecolor;
65960      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65961      proc sort data=EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_TREE_PLOT;
65962      by node;
MPRINT(EM_DIAGRAM):   by node;
65963      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 12 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65964      proc sort data=tempcolor;
MPRINT(EM_DIAGRAM):   proc sort data=tempcolor;
65965      by node;
MPRINT(EM_DIAGRAM):   by node;
65966      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65967      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TREE_PLOT;
65968      merge EMWS1.Clus_TREE_PLOT tempcolor;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_TREE_PLOT tempcolor;
65969      by node;
MPRINT(EM_DIAGRAM):   by node;
65970      length traintotal 8;
MPRINT(EM_DIAGRAM):   length traintotal 8;
65971      retain traintotal;
MPRINT(EM_DIAGRAM):   retain traintotal;
65972      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Total de entrenamiento";
65973      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
65974      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
65975      end;
MPRINT(EM_DIAGRAM):   end;
65976      if NODE eq . then delete;
MPRINT(EM_DIAGRAM):   if NODE eq . then delete;
65977      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 13 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65978      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TREE_PLOT;
65979      set EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_TREE_PLOT;
65980      textall = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote, )):"|| put(Node, 13.)||'0A'x||trim(textall);
MPRINT(EM_DIAGRAM):   textall = "Id de nodo:"|| put(Node, 13.)||'0A'x||trim(textall);
65981      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 13 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65982      data tempout;
MPRINT(EM_DIAGRAM):   data tempout;
65983      set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
65984      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set WORK.TEMPOUT has 13 observations and 65 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65985      proc sort data=tempout;
MPRINT(EM_DIAGRAM):   proc sort data=tempout;
65986      by descending P__SEGMENT_9;
MPRINT(EM_DIAGRAM):   by descending P__SEGMENT_9;
65987      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TEMPOUT has 13 observations and 65 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65988      data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
65989      set tempout;
MPRINT(EM_DIAGRAM):   set tempout;
65990      if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
65991      label index="%sysfunc(sasmsg(sashelp.dmine, rpt_leafindex_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label index= "Índice de hoja";
65992      label percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_train = "Casos de porcentaje";
65993      label perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_train = "Porcentaje de evento";
65994      label tprob="%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel  , NOQUOTE, %nrbquote()))";
MPRINT(EM_DIAGRAM):   label tprob= "Porcentaje de entrenamiento ";
65995      tprob = round(P__SEGMENT_9, .01);
MPRINT(EM_DIAGRAM):   tprob = round(P__SEGMENT_9, .01);
65996      percevent_train = round ( tprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_train = round ( tprob*100, .01);
65997      *perc_train =round( ( N / traintotal)*100, .001);
MPRINT(EM_DIAGRAM):   *perc_train =round( ( N / traintotal)*100, .001);
65998      perc_train =round( ( N / traintotal), .01);
MPRINT(EM_DIAGRAM):   perc_train =round( ( N / traintotal), .01);
65999      if missing(perc_train) then perc_train = round( linkwidth*100, .001);
MPRINT(EM_DIAGRAM):   if missing(perc_train) then perc_train = round( linkwidth*100, .001);
66000      index = _n_;
MPRINT(EM_DIAGRAM):   index = _n_;
66001      keep NODE index tprob perc_train percevent_train
66002      ;
MPRINT(EM_DIAGRAM):   keep NODE index tprob perc_train percevent_train ;
66003      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TREE_TEMP has 7 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66004      proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):   proc sort data=tree_temp;
66005      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
66006      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 7 observations and 5 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66007      proc sort data=EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_TREE_PLOT;
66008      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
66009      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 13 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66010      data EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_TREE_PLOT;
66011      merge EMWS1.Clus_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_TREE_PLOT tree_temp;
66012      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
66013      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: There were 7 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 17 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66014      proc sort data=EMWS1.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_TREE_PLOT;
66015      by node index;
MPRINT(EM_DIAGRAM):   by node index;
66016      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.CLUS_TREE_PLOT.
NOTE: The data set EMWS1.CLUS_TREE_PLOT has 13 observations and 17 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66017      title9 ' ';
MPRINT(EM_DIAGRAM):    title9 ' ';
66018      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_VariableImportance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Importancia de la variable";
66019      proc print data=EMWS1.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
66020      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66021      title10;
MPRINT(EM_DIAGRAM):   title10;
66022      data WORK.M1R5P7G9;
MPRINT(EM_DIAGRAM):    data WORK.M1R5P7G9;
66023      set WORK.M1R5P7G9;
MPRINT(EM_DIAGRAM):   set WORK.M1R5P7G9;
66024      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
66025      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M1R5P7G9.
NOTE: The data set WORK.M1R5P7G9 has 21 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66026      proc sort data=EMWS1.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
66027      where IMPORTANCE>0;
MPRINT(EM_DIAGRAM):   where IMPORTANCE>0;
66028      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66029      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The data set WORK.CLUS_GRAPHVARS has 15 observations and 1 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66030      proc sort data = WORK.M1R5P7G9;
MPRINT(EM_DIAGRAM):   proc sort data = WORK.M1R5P7G9;
66031      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66032      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M1R5P7G9.
NOTE: The data set WORK.M1R5P7G9 has 21 observations and 21 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66033      data WORK.M1R5P7G9;
MPRINT(EM_DIAGRAM):   data WORK.M1R5P7G9;
66034      merge WORK.M1R5P7G9 WORK.Clus_GRAPHVARS(in=_b_);
MPRINT(EM_DIAGRAM):   merge WORK.M1R5P7G9 WORK.Clus_GRAPHVARS(in=_b_);
66035      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66036      if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
MPRINT(EM_DIAGRAM):   if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
66037      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set WORK.M1R5P7G9.
NOTE: There were 15 observations read from the data set WORK.CLUS_GRAPHVARS.
NOTE: The data set WORK.M1R5P7G9 has 15 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66038      data WORK.M1R5P7G9;
MPRINT(EM_DIAGRAM):    data WORK.M1R5P7G9;
66039      set WORK.M1R5P7G9 end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M1R5P7G9 end=_eof_ nobs=_nobs_;
66040      output;
MPRINT(EM_DIAGRAM):   output;
66041      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
66042      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
66043      ROLE = 'BY';
MPRINT(EM_DIAGRAM):   ROLE = 'BY';
66044      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
66045      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
66046      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
66047      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
66048      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
66049      output;
MPRINT(EM_DIAGRAM):   output;
66050      end;
MPRINT(EM_DIAGRAM):   end;
66051      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set WORK.M1R5P7G9.
NOTE: The data set WORK.M1R5P7G9 has 16 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66052      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
66053      * Clus: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus: STDIZE Variables Macro ;
66054      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
66055      %macro stdizevar;
66056          PC_1 PC_10 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7
66057         PC_9
66058      %mend stdizevar;
66059      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66060      * Clus: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Clus: Computing Summary Statistics;
66061      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66062      proc stdize
66063      data = EMWS1.Clus_TRAIN
66064      out=_null_
66065      outstat=WORK.Clus_STAT
66066      add=0 fuzz=1E-14 initial=MAD
66067      vardef=df
66068      method=STD
66069      mult=1
66070      pctlmtd=ORD_STAT pctldef=2
66071      pctlpts=(
66072      0
66073      100
66074      )
66075      ;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS1.Clus_TRAIN out=_null_ outstat=WORK.Clus_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 100 ) ;
MPRINT(EM_DIAGRAM):   var
66076      var %stdizevar;
MPRINT(STDIZEVAR):   PC_1 PC_10 PC_13 PC_14 PC_15 PC_16 PC_17 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7 PC_9
MPRINT(EM_DIAGRAM):  ;
66077      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: INITIAL= will be ignored.
NOTE: Variable _FORMAT is uninitialized.
NOTE: Variable _NORMFMT is uninitialized.
NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: There were 3000 observations read from the data set EMWS1.IDS_DATA.
NOTE: Vista EMWS1.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.70 seconds
      cpu time            0.71 seconds
 
NOTE: There were 3000 observations read from the data set EMWS1.PRINCOMP_TRAIN.
NOTE: There were 3000 observations read from the data set EMWS1.CLUS_TRAIN.
NOTE: The data set WORK.CLUS_STAT has 10 observations and 16 variables.
NOTE: PROCEDURE STDIZE ha utilizado (Tiempo de proceso total):
      real time           0.71 seconds
      cpu time            0.71 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
66078      quit;
 
66079      data WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):    data WORK.Clus_MINMAX;
66080      set WORK.Clus_STAT;
MPRINT(EM_DIAGRAM):   set WORK.Clus_STAT;
66081      where _TYPE_ in('P0','P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('P0','P100');
66082      if _TYPE_='P0' then _TYPE_='MIN';
MPRINT(EM_DIAGRAM):   if _TYPE_='P0' then _TYPE_='MIN';
66083      else if _TYPE_='P100' then _TYPE_='MAX';
MPRINT(EM_DIAGRAM):   else if _TYPE_='P100' then _TYPE_='MAX';
66084      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.CLUS_STAT.
      WHERE _TYPE_ in ('P0', 'P100');
NOTE: The data set WORK.CLUS_MINMAX has 2 observations and 16 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66085      proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
66086      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
66087      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.CLUS_MINMAX.
NOTE: The data set WORK.CLUS_MINMAX has 15 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66088      data WORK.Clus_UGRID;
MPRINT(EM_DIAGRAM):    data WORK.Clus_UGRID;
66089      set WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):   set WORK.Clus_MINMAX;
66090      B1 = MIN + (1-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B1 = MIN + (1-1)*(MAX-MIN)/8;
66091      B2 = MIN + (2-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B2 = MIN + (2-1)*(MAX-MIN)/8;
66092      B3 = MIN + (3-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B3 = MIN + (3-1)*(MAX-MIN)/8;
66093      B4 = MIN + (4-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B4 = MIN + (4-1)*(MAX-MIN)/8;
66094      B5 = MIN + (5-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B5 = MIN + (5-1)*(MAX-MIN)/8;
66095      B6 = MIN + (6-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B6 = MIN + (6-1)*(MAX-MIN)/8;
66096      B7 = MIN + (7-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B7 = MIN + (7-1)*(MAX-MIN)/8;
66097      B8 = MIN + (8-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B8 = MIN + (8-1)*(MAX-MIN)/8;
66098      B9 = MIN + (9-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B9 = MIN + (9-1)*(MAX-MIN)/8;
66099      drop MIN MAX;
MPRINT(EM_DIAGRAM):   drop MIN MAX;
66100      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set WORK.CLUS_MINMAX.
NOTE: The data set WORK.CLUS_UGRID has 15 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66101      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66102      * Clus: creando formatos para las variables de intervalo de agrupamiento;
MPRINT(EM_DIAGRAM):   * Clus: creando formatos para las variables de intervalo de agrupamiento;
66103      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66104      proc format;
MPRINT(EM_DIAGRAM):   proc format;
66105      value F1_
66106      0.00502537838905-0.22720072220684 = "0.005:0.2272"
66107      0.22720072220684-0.44937606602463 = "0.2272:0.4494"
66108      0.44937606602463-0.67155140984242 = "0.4494:0.6716"
66109      0.67155140984242-0.89372675366021 = "0.6716:0.8937"
66110      0.89372675366021-1.115902097478 = "0.8937:1.1159"
66111      1.115902097478-1.33807744129579 = "1.1159:1.3381"
66112      1.33807744129579-1.56025278511358 = "1.3381:1.5603"
66113      1.56025278511358-1.78242812893137 = "1.5603:1.7824"
66114      ;
MPRINT(EM_DIAGRAM):   value F1_ 0.00502537838905-0.22720072220684 = "0.005:0.2272" 0.22720072220684-0.44937606602463 = "0.2272:0.4494" 0.44937606602463-0.67155140984242 = "0.4494:0.6716" 0.67155140984242-0.89372675366021 = "0.6716:0.8937"
0.89372675366021-1.115902097478 = "0.8937:1.1159" 1.115902097478-1.33807744129579 = "1.1159:1.3381" 1.33807744129579-1.56025278511358 = "1.3381:1.5603" 1.56025278511358-1.78242812893137 = "1.5603:1.7824" ;
NOTE: Format F1_ has been output.
66115      value F2_
66116      -0.82605241213561--0.68468456734326 = "-0.826:-0.685"
66117      -0.68468456734326--0.54331672255092 = "-0.685:-0.543"
66118      -0.54331672255092--0.40194887775858 = "-0.543:-0.402"
66119      -0.40194887775858--0.26058103296623 = "-0.402:-0.261"
66120      -0.26058103296623--0.11921318817389 = "-0.261:-0.119"
66121      -0.11921318817389-0.02215465661844 = "-0.119:0.0222"
66122      0.02215465661844-0.16352250141079 = "0.0222:0.1635"
66123      0.16352250141079-0.30489034620313 = "0.1635:0.3049"
66124      ;
MPRINT(EM_DIAGRAM):   value F2_ -0.82605241213561--0.68468456734326 = "-0.826:-0.685" -0.68468456734326--0.54331672255092 = "-0.685:-0.543" -0.54331672255092--0.40194887775858 = "-0.543:-0.402" -0.40194887775858--0.26058103296623 = "-0.402:-0.261"
-0.26058103296623--0.11921318817389 = "-0.261:-0.119" -0.11921318817389-0.02215465661844 = "-0.119:0.0222" 0.02215465661844-0.16352250141079 = "0.0222:0.1635" 0.16352250141079-0.30489034620313 = "0.1635:0.3049" ;
NOTE: Format F2_ has been output.
66125      value F3_
66126      -0.84567618819636--0.6969725084157 = "-0.846:-0.697"
66127      -0.6969725084157--0.54826882863505 = "-0.697:-0.548"
66128      -0.54826882863505--0.39956514885439 = "-0.548:-0.4"
66129      -0.39956514885439--0.25086146907373 = "-0.4:-0.251"
66130      -0.25086146907373--0.10215778929308 = "-0.251:-0.102"
66131      -0.10215778929308-0.04654589048757 = "-0.102:0.0465"
66132      0.04654589048757-0.19524957026823 = "0.0465:0.1952"
66133      0.19524957026823-0.34395325004888 = "0.1952:0.344"
66134      ;
MPRINT(EM_DIAGRAM):   value F3_ -0.84567618819636--0.6969725084157 = "-0.846:-0.697" -0.6969725084157--0.54826882863505 = "-0.697:-0.548" -0.54826882863505--0.39956514885439 = "-0.548:-0.4" -0.39956514885439--0.25086146907373 = "-0.4:-0.251"
-0.25086146907373--0.10215778929308 = "-0.251:-0.102" -0.10215778929308-0.04654589048757 = "-0.102:0.0465" 0.04654589048757-0.19524957026823 = "0.0465:0.1952" 0.19524957026823-0.34395325004888 = "0.1952:0.344" ;
NOTE: Format F3_ has been output.
66135      value F4_
66136      -0.59625327104--0.47795578996855 = "-0.596:-0.478"
66137      -0.47795578996855--0.35965830889709 = "-0.478:-0.36"
66138      -0.35965830889709--0.24136082782564 = "-0.36:-0.241"
66139      -0.24136082782564--0.12306334675419 = "-0.241:-0.123"
66140      -0.12306334675419--0.00476586568273 = "-0.123:-0.005"
66141      -0.00476586568273-0.11353161538871 = "-0.005:0.1135"
66142      0.11353161538871-0.23182909646017 = "0.1135:0.2318"
66143      0.23182909646017-0.35012657753162 = "0.2318:0.3501"
66144      ;
MPRINT(EM_DIAGRAM):   value F4_ -0.59625327104--0.47795578996855 = "-0.596:-0.478" -0.47795578996855--0.35965830889709 = "-0.478:-0.36" -0.35965830889709--0.24136082782564 = "-0.36:-0.241" -0.24136082782564--0.12306334675419 = "-0.241:-0.123"
-0.12306334675419--0.00476586568273 = "-0.123:-0.005" -0.00476586568273-0.11353161538871 = "-0.005:0.1135" 0.11353161538871-0.23182909646017 = "0.1135:0.2318" 0.23182909646017-0.35012657753162 = "0.2318:0.3501" ;
NOTE: Format F4_ has been output.
66145      value F5_
66146      -0.15343115707124--0.07184104239334 = "-0.153:-0.072"
66147      -0.07184104239334-0.00974907228456 = "-0.072:0.0097"
66148      0.00974907228456-0.09133918696246 = "0.0097:0.0913"
66149      0.09133918696246-0.17292930164036 = "0.0913:0.1729"
66150      0.17292930164036-0.25451941631826 = "0.1729:0.2545"
66151      0.25451941631826-0.33610953099616 = "0.2545:0.3361"
66152      0.33610953099616-0.41769964567407 = "0.3361:0.4177"
66153      0.41769964567407-0.49928976035197 = "0.4177:0.4993"
66154      ;
MPRINT(EM_DIAGRAM):   value F5_ -0.15343115707124--0.07184104239334 = "-0.153:-0.072" -0.07184104239334-0.00974907228456 = "-0.072:0.0097" 0.00974907228456-0.09133918696246 = "0.0097:0.0913" 0.09133918696246-0.17292930164036 = "0.0913:0.1729"
0.17292930164036-0.25451941631826 = "0.1729:0.2545" 0.25451941631826-0.33610953099616 = "0.2545:0.3361" 0.33610953099616-0.41769964567407 = "0.3361:0.4177" 0.41769964567407-0.49928976035197 = "0.4177:0.4993" ;
NOTE: Format F5_ has been output.
66155      value F6_
66156      -0.33081401941927--0.22952488455093 = "-0.331:-0.23"
66157      -0.22952488455093--0.1282357496826 = "-0.23:-0.128"
66158      -0.1282357496826--0.02694661481426 = "-0.128:-0.027"
66159      -0.02694661481426-0.07434252005407 = "-0.027:0.0743"
66160      0.07434252005407-0.17563165492241 = "0.0743:0.1756"
66161      0.17563165492241-0.27692078979075 = "0.1756:0.2769"
66162      0.27692078979075-0.37820992465908 = "0.2769:0.3782"
66163      0.37820992465908-0.47949905952742 = "0.3782:0.4795"
66164      ;
MPRINT(EM_DIAGRAM):   value F6_ -0.33081401941927--0.22952488455093 = "-0.331:-0.23" -0.22952488455093--0.1282357496826 = "-0.23:-0.128" -0.1282357496826--0.02694661481426 = "-0.128:-0.027" -0.02694661481426-0.07434252005407 = "-0.027:0.0743"
0.07434252005407-0.17563165492241 = "0.0743:0.1756" 0.17563165492241-0.27692078979075 = "0.1756:0.2769" 0.27692078979075-0.37820992465908 = "0.2769:0.3782" 0.37820992465908-0.47949905952742 = "0.3782:0.4795" ;
NOTE: Format F6_ has been output.
66165      value F7_
66166      -0.41657224434528--0.34073575713796 = "-0.417:-0.341"
66167      -0.34073575713796--0.26489926993063 = "-0.341:-0.265"
66168      -0.26489926993063--0.18906278272331 = "-0.265:-0.189"
66169      -0.18906278272331--0.11322629551598 = "-0.189:-0.113"
66170      -0.11322629551598--0.03738980830866 = "-0.113:-0.037"
66171      -0.03738980830866-0.03844667889866 = "-0.037:0.0384"
66172      0.03844667889866-0.11428316610598 = "0.0384:0.1143"
66173      0.11428316610598-0.19011965331331 = "0.1143:0.1901"
66174      ;
MPRINT(EM_DIAGRAM):   value F7_ -0.41657224434528--0.34073575713796 = "-0.417:-0.341" -0.34073575713796--0.26489926993063 = "-0.341:-0.265" -0.26489926993063--0.18906278272331 = "-0.265:-0.189" -0.18906278272331--0.11322629551598 = "-0.189:-0.113"
-0.11322629551598--0.03738980830866 = "-0.113:-0.037" -0.03738980830866-0.03844667889866 = "-0.037:0.0384" 0.03844667889866-0.11428316610598 = "0.0384:0.1143" 0.11428316610598-0.19011965331331 = "0.1143:0.1901" ;
NOTE: Format F7_ has been output.
66175      value F8_
66176      -0.96122598805945--0.81456881435031 = "-0.961:-0.815"
66177      -0.81456881435031--0.66791164064116 = "-0.815:-0.668"
66178      -0.66791164064116--0.52125446693202 = "-0.668:-0.521"
66179      -0.52125446693202--0.37459729322288 = "-0.521:-0.375"
66180      -0.37459729322288--0.22794011951373 = "-0.375:-0.228"
66181      -0.22794011951373--0.08128294580459 = "-0.228:-0.081"
66182      -0.08128294580459-0.06537422790455 = "-0.081:0.0654"
66183      0.06537422790455-0.21203140161369 = "0.0654:0.212"
66184      ;
MPRINT(EM_DIAGRAM):   value F8_ -0.96122598805945--0.81456881435031 = "-0.961:-0.815" -0.81456881435031--0.66791164064116 = "-0.815:-0.668" -0.66791164064116--0.52125446693202 = "-0.668:-0.521" -0.52125446693202--0.37459729322288 = "-0.521:-0.375"
-0.37459729322288--0.22794011951373 = "-0.375:-0.228" -0.22794011951373--0.08128294580459 = "-0.228:-0.081" -0.08128294580459-0.06537422790455 = "-0.081:0.0654" 0.06537422790455-0.21203140161369 = "0.0654:0.212" ;
NOTE: Format F8_ has been output.
66185      value F9_
66186      -0.69440115616418--0.58651360524659 = "-0.694:-0.587"
66187      -0.58651360524659--0.47862605432901 = "-0.587:-0.479"
66188      -0.47862605432901--0.37073850341142 = "-0.479:-0.371"
66189      -0.37073850341142--0.26285095249384 = "-0.371:-0.263"
66190      -0.26285095249384--0.15496340157625 = "-0.263:-0.155"
66191      -0.15496340157625--0.04707585065867 = "-0.155:-0.047"
66192      -0.04707585065867-0.06081170025891 = "-0.047:0.0608"
66193      0.06081170025891-0.16869925117649 = "0.0608:0.1687"
66194      ;
MPRINT(EM_DIAGRAM):   value F9_ -0.69440115616418--0.58651360524659 = "-0.694:-0.587" -0.58651360524659--0.47862605432901 = "-0.587:-0.479" -0.47862605432901--0.37073850341142 = "-0.479:-0.371" -0.37073850341142--0.26285095249384 = "-0.371:-0.263"
-0.26285095249384--0.15496340157625 = "-0.263:-0.155" -0.15496340157625--0.04707585065867 = "-0.155:-0.047" -0.04707585065867-0.06081170025891 = "-0.047:0.0608" 0.06081170025891-0.16869925117649 = "0.0608:0.1687" ;
NOTE: Format F9_ has been output.
66195      value F10_
66196      -1.0734964704326--0.93111223982224 = "-1.073:-0.931"
66197      -0.93111223982224--0.78872800921187 = "-0.931:-0.789"
66198      -0.78872800921187--0.64634377860151 = "-0.789:-0.646"
66199      -0.64634377860151--0.50395954799114 = "-0.646:-0.504"
66200      -0.50395954799114--0.36157531738078 = "-0.504:-0.362"
66201      -0.36157531738078--0.21919108677041 = "-0.362:-0.219"
66202      -0.21919108677041--0.07680685616004 = "-0.219:-0.077"
66203      -0.07680685616004-0.06557737445031 = "-0.077:0.0656"
66204      ;
MPRINT(EM_DIAGRAM):   value F10_ -1.0734964704326--0.93111223982224 = "-1.073:-0.931" -0.93111223982224--0.78872800921187 = "-0.931:-0.789" -0.78872800921187--0.64634377860151 = "-0.789:-0.646" -0.64634377860151--0.50395954799114 = "-0.646:-0.504"
-0.50395954799114--0.36157531738078 = "-0.504:-0.362" -0.36157531738078--0.21919108677041 = "-0.362:-0.219" -0.21919108677041--0.07680685616004 = "-0.219:-0.077" -0.07680685616004-0.06557737445031 = "-0.077:0.0656" ;
NOTE: Format F10_ has been output.
66205      value F11_
66206      -0.31021486349557--0.2097412059385 = "-0.31:-0.21"
66207      -0.2097412059385--0.10926754838143 = "-0.21:-0.109"
66208      -0.10926754838143--0.00879389082437 = "-0.109:-0.009"
66209      -0.00879389082437-0.09167976673269 = "-0.009:0.0917"
66210      0.09167976673269-0.19215342428976 = "0.0917:0.1922"
66211      0.19215342428976-0.29262708184683 = "0.1922:0.2926"
66212      0.29262708184683-0.3931007394039 = "0.2926:0.3931"
66213      0.3931007394039-0.49357439696097 = "0.3931:0.4936"
66214      ;
MPRINT(EM_DIAGRAM):   value F11_ -0.31021486349557--0.2097412059385 = "-0.31:-0.21" -0.2097412059385--0.10926754838143 = "-0.21:-0.109" -0.10926754838143--0.00879389082437 = "-0.109:-0.009" -0.00879389082437-0.09167976673269 = "-0.009:0.0917"
0.09167976673269-0.19215342428976 = "0.0917:0.1922" 0.19215342428976-0.29262708184683 = "0.1922:0.2926" 0.29262708184683-0.3931007394039 = "0.2926:0.3931" 0.3931007394039-0.49357439696097 = "0.3931:0.4936" ;
NOTE: Format F11_ has been output.
66215      value F12_
66216      -1.01245980235898--0.76974961145251 = "-1.012:-0.77"
66217      -0.76974961145251--0.52703942054605 = "-0.77:-0.527"
66218      -0.52703942054605--0.28432922963959 = "-0.527:-0.284"
66219      -0.28432922963959--0.04161903873312 = "-0.284:-0.042"
66220      -0.04161903873312-0.20109115217333 = "-0.042:0.2011"
66221      0.20109115217333-0.44380134307979 = "0.2011:0.4438"
66222      0.44380134307979-0.68651153398626 = "0.4438:0.6865"
66223      0.68651153398626-0.92922172489272 = "0.6865:0.9292"
66224      ;
MPRINT(EM_DIAGRAM):   value F12_ -1.01245980235898--0.76974961145251 = "-1.012:-0.77" -0.76974961145251--0.52703942054605 = "-0.77:-0.527" -0.52703942054605--0.28432922963959 = "-0.527:-0.284" -0.28432922963959--0.04161903873312 = "-0.284:-0.042"
-0.04161903873312-0.20109115217333 = "-0.042:0.2011" 0.20109115217333-0.44380134307979 = "0.2011:0.4438" 0.44380134307979-0.68651153398626 = "0.4438:0.6865" 0.68651153398626-0.92922172489272 = "0.6865:0.9292" ;
NOTE: Format F12_ has been output.
66225      value F13_
66226      -0.41849044961241--0.28898342773512 = "-0.418:-0.289"
66227      -0.28898342773512--0.15947640585783 = "-0.289:-0.159"
66228      -0.15947640585783--0.02996938398054 = "-0.159:-0.03"
66229      -0.02996938398054-0.09953763789674 = "-0.03:0.0995"
66230      0.09953763789674-0.22904465977403 = "0.0995:0.229"
66231      0.22904465977403-0.35855168165132 = "0.229:0.3586"
66232      0.35855168165132-0.48805870352861 = "0.3586:0.4881"
66233      0.48805870352861-0.6175657254059 = "0.4881:0.6176"
66234      ;
MPRINT(EM_DIAGRAM):   value F13_ -0.41849044961241--0.28898342773512 = "-0.418:-0.289" -0.28898342773512--0.15947640585783 = "-0.289:-0.159" -0.15947640585783--0.02996938398054 = "-0.159:-0.03" -0.02996938398054-0.09953763789674 = "-0.03:0.0995"
0.09953763789674-0.22904465977403 = "0.0995:0.229" 0.22904465977403-0.35855168165132 = "0.229:0.3586" 0.35855168165132-0.48805870352861 = "0.3586:0.4881" 0.48805870352861-0.6175657254059 = "0.4881:0.6176" ;
NOTE: Format F13_ has been output.
66235      value F14_
66236      -0.93187667324857--0.79205997826009 = "-0.932:-0.792"
66237      -0.79205997826009--0.65224328327162 = "-0.792:-0.652"
66238      -0.65224328327162--0.51242658828314 = "-0.652:-0.512"
66239      -0.51242658828314--0.37260989329467 = "-0.512:-0.373"
66240      -0.37260989329467--0.23279319830619 = "-0.373:-0.233"
66241      -0.23279319830619--0.09297650331772 = "-0.233:-0.093"
66242      -0.09297650331772-0.04684019167075 = "-0.093:0.0468"
66243      0.04684019167075-0.18665688665922 = "0.0468:0.1867"
66244      ;
MPRINT(EM_DIAGRAM):   value F14_ -0.93187667324857--0.79205997826009 = "-0.932:-0.792" -0.79205997826009--0.65224328327162 = "-0.792:-0.652" -0.65224328327162--0.51242658828314 = "-0.652:-0.512" -0.51242658828314--0.37260989329467 = "-0.512:-0.373"
-0.37260989329467--0.23279319830619 = "-0.373:-0.233" -0.23279319830619--0.09297650331772 = "-0.233:-0.093" -0.09297650331772-0.04684019167075 = "-0.093:0.0468" 0.04684019167075-0.18665688665922 = "0.0468:0.1867" ;
NOTE: Format F14_ has been output.
66245      value F15_
66246      -0.17724658289688--0.07239574331439 = "-0.177:-0.072"
66247      -0.07239574331439-0.0324550962681 = "-0.072:0.0325"
66248      0.0324550962681-0.13730593585059 = "0.0325:0.1373"
66249      0.13730593585059-0.24215677543309 = "0.1373:0.2422"
66250      0.24215677543309-0.34700761501559 = "0.2422:0.347"
66251      0.34700761501559-0.45185845459808 = "0.347:0.4519"
66252      0.45185845459808-0.55670929418058 = "0.4519:0.5567"
66253      0.55670929418058-0.66156013376307 = "0.5567:0.6616"
66254      ;
MPRINT(EM_DIAGRAM):   value F15_ -0.17724658289688--0.07239574331439 = "-0.177:-0.072" -0.07239574331439-0.0324550962681 = "-0.072:0.0325" 0.0324550962681-0.13730593585059 = "0.0325:0.1373" 0.13730593585059-0.24215677543309 = "0.1373:0.2422"
0.24215677543309-0.34700761501559 = "0.2422:0.347" 0.34700761501559-0.45185845459808 = "0.347:0.4519" 0.45185845459808-0.55670929418058 = "0.4519:0.5567" 0.55670929418058-0.66156013376307 = "0.5567:0.6616" ;
NOTE: Format F15_ has been output.
MPRINT(EM_DIAGRAM):   run;
66255      run;
 
NOTE: PROCEDURE FORMAT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66256      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
66257      ods output crosstabfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output crosstabfreqs=WORK.TEMPFREQ;
66258      proc freq data = EMWS1.Clus_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS1.Clus_TRAIN order=formatted addnames;
66259      table PC_1 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_1 * _SEGMENT_ / missing;
66260      table PC_10 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_10 * _SEGMENT_ / missing;
66261      table PC_13 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_13 * _SEGMENT_ / missing;
66262      table PC_14 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_14 * _SEGMENT_ / missing;
66263      table PC_15 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_15 * _SEGMENT_ / missing;
66264      table PC_16 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_16 * _SEGMENT_ / missing;
66265      table PC_17 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_17 * _SEGMENT_ / missing;
66266      table PC_2 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_2 * _SEGMENT_ / missing;
66267      table PC_20 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_20 * _SEGMENT_ / missing;
66268      table PC_3 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_3 * _SEGMENT_ / missing;
66269      table PC_4 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_4 * _SEGMENT_ / missing;
66270      table PC_5 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_5 * _SEGMENT_ / missing;
66271      table PC_6 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_6 * _SEGMENT_ / missing;
66272      table PC_7 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_7 * _SEGMENT_ / missing;
66273      table PC_9 * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PC_9 * _SEGMENT_ / missing;
66274      format PC_1 F1_.;
MPRINT(EM_DIAGRAM):   format PC_1 F1_.;
66275      format PC_10 F2_.;
MPRINT(EM_DIAGRAM):   format PC_10 F2_.;
66276      format PC_13 F3_.;
MPRINT(EM_DIAGRAM):   format PC_13 F3_.;
66277      format PC_14 F4_.;
MPRINT(EM_DIAGRAM):   format PC_14 F4_.;
66278      format PC_15 F5_.;
MPRINT(EM_DIAGRAM):   format PC_15 F5_.;
66279      format PC_16 F6_.;
MPRINT(EM_DIAGRAM):   format PC_16 F6_.;
66280      format PC_17 F7_.;
MPRINT(EM_DIAGRAM):   format PC_17 F7_.;
66281      format PC_2 F8_.;
MPRINT(EM_DIAGRAM):   format PC_2 F8_.;
66282      format PC_20 F9_.;
MPRINT(EM_DIAGRAM):   format PC_20 F9_.;
66283      format PC_3 F10_.;
MPRINT(EM_DIAGRAM):   format PC_3 F10_.;
66284      format PC_4 F11_.;
MPRINT(EM_DIAGRAM):   format PC_4 F11_.;
66285      format PC_5 F12_.;
MPRINT(EM_DIAGRAM):   format PC_5 F12_.;
66286      format PC_6 F13_.;
MPRINT(EM_DIAGRAM):   format PC_6 F13_.;
66287      format PC_7 F14_.;
MPRINT(EM_DIAGRAM):   format PC_7 F14_.;
66288      format PC_9 F15_.;
MPRINT(EM_DIAGRAM):   format PC_9 F15_.;
66289      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _FORMAT is uninitialized.
NOTE: Variable _NORMFMT is uninitialized.
NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: There were 3000 observations read from the data set EMWS1.IDS_DATA.
NOTE: Vista EMWS1.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.71 seconds
      cpu time            0.71 seconds
 
NOTE: There were 3000 observations read from the data set EMWS1.PRINCOMP_TRAIN.
NOTE: The data set WORK.TEMPFREQ has 2976 observations and 26 variables.
NOTE: There were 3000 observations read from the data set EMWS1.CLUS_TRAIN.
NOTE: PROCEDURE FREQ ha utilizado (Tiempo de proceso total):
      real time           0.74 seconds
      cpu time            0.75 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
66290      quit;
66291      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
66292      data EMWS1.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data EMWS1.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
66293      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" _SEGMENT_ = "Segment Variable" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ =
66294         "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT =
66295         "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" _SEGMENT_ = "Segment Variable" Type = "Tipo" _X_ = "Valor numérico" _XLABEL_ = "Valor formateado" COUNT = "Número de ocurrencias" PERCENT = "Porcentaje";
66296      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
66297      varnum = varnum(dsid, 'ROWVARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'ROWVARIABLE');
66298      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
66299      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
66300      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
66301      bynum = varnum(dsid, "_SEGMENT_");
MPRINT(EM_DIAGRAM):   bynum = varnum(dsid, "_SEGMENT_");
66302      length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
MPRINT(EM_DIAGRAM):   length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
66303      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
66304      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
66305      percent = getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent = getvarn(dsid, pvarnum);
66306      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
66307      varblnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   varblnum = varnum(dsid, _VARIABLE_);
66308      _SEGMENT_ = getvarn(dsid, bynum);
MPRINT(EM_DIAGRAM):   _SEGMENT_ = getvarn(dsid, bynum);
66309      type = vartype(dsid, varblnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, varblnum);
66310      varformat = varfmt(dsid, varblnum);
MPRINT(EM_DIAGRAM):   varformat = varfmt(dsid, varblnum);
66311      if varformat eq '' then varformat = 'best12.';
MPRINT(EM_DIAGRAM):   if varformat eq '' then varformat = 'best12.';
66312      _X_=.;
MPRINT(EM_DIAGRAM):   _X_=.;
66313      if type = 'N' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
66314      _X_ = getvarn(dsid, varblnum);
MPRINT(EM_DIAGRAM):   _X_ = getvarn(dsid, varblnum);
66315      _XLABEL_ = left(putn(_X_, varformat));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(putn(_X_, varformat));
66316      end;
MPRINT(EM_DIAGRAM):   end;
66317      else _XLABEL_ = getvarc(dsid, varblnum);
MPRINT(EM_DIAGRAM):   else _XLABEL_ = getvarc(dsid, varblnum);
66318      if getvarc(dsid, typenum) = '11' then output;
MPRINT(EM_DIAGRAM):   if getvarc(dsid, typenum) = '11' then output;
66319      end;
MPRINT(EM_DIAGRAM):   end;
66320      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
66321      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS1.CLUS_PROFILE has 2507 observations and 7 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
66322      proc sort data=EMWS1.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_PROFILE NOTHREADS;
66323      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
66324      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2507 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set EMWS1.CLUS_PROFILE has 2507 observations and 7 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66325      proc means data=EMWS1.Clus_PROFILE noprint missing NWAY;
MPRINT(EM_DIAGRAM):   proc means data=EMWS1.Clus_PROFILE noprint missing NWAY;
66326      class _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   class _VARIABLE_ _SEGMENT_;
66327      var COUNT;
MPRINT(EM_DIAGRAM):   var COUNT;
66328      output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
MPRINT(EM_DIAGRAM):   output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
66329      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2507 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set WORK.CLUS_STATCOUNT has 345 observations and 3 variables.
NOTE: PROCEDURE MEANS ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66330      proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
66331      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
66332      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 345 observations read from the data set WORK.CLUS_STATCOUNT.
NOTE: The data set WORK.CLUS_STATCOUNT has 345 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66333      data EMWS1.Clus_PROFILE(drop=SUM);
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_PROFILE(drop=SUM);
66334      label BYPERCENT= "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel, NOQUOTE, _SEGMENT_))";
MPRINT(EM_DIAGRAM):   label BYPERCENT= "Porcentaje";
66335      merge EMWS1.Clus_PROFILE WORK.Clus_STATCOUNT;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_PROFILE WORK.Clus_STATCOUNT;
66336      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
66337      if SUM ne . then BYPERCENT = 100*COUNT/SUM;
MPRINT(EM_DIAGRAM):   if SUM ne . then BYPERCENT = 100*COUNT/SUM;
66338      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2507 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: There were 345 observations read from the data set WORK.CLUS_STATCOUNT.
NOTE: The data set EMWS1.CLUS_PROFILE has 2507 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66339      proc sort data=EMWS1.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_PROFILE NOTHREADS;
66340      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
66341      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2507 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set EMWS1.CLUS_PROFILE has 2507 observations and 8 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66342      proc sort data=WORK.M1R5P7G9;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M1R5P7G9;
66343      by Name;
MPRINT(EM_DIAGRAM):   by Name;
66344      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set WORK.M1R5P7G9.
NOTE: The data set WORK.M1R5P7G9 has 16 observations and 21 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66345      data EMWS1.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_PROFILE;
66346      merge EMWS1.Clus_PROFILE(in=_a) WORK.M1R5P7G9(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_PROFILE(in=_a) WORK.M1R5P7G9(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
66347      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
66348      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Rol";
66349      label Label = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Etiqueta";
66350      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
66351      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable Label is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _VARIABLE_ by input data sets. This might cause unexpected results.
NOTE: There were 2507 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: There were 16 observations read from the data set WORK.M1R5P7G9.
NOTE: The data set EMWS1.CLUS_PROFILE has 2507 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66352      proc sort data=EMWS1.Clus_PROFILE;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Clus_PROFILE;
66353      by _SEGMENT_ _VARIABLE_ _X_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_ _X_;
66354      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2507 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set EMWS1.CLUS_PROFILE has 2507 observations and 10 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66355      data EMWS1.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
66356      set EMWS1.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_PROFILE;
66357      retain orderedValue 0;
MPRINT(EM_DIAGRAM):   retain orderedValue 0;
66358      label OrderedValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_OrderedValue_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label OrderedValue = "Valores ordenados";
66359      by _SEGMENT_ _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_;
66360      if first._variable_ then orderedValue=1;
MPRINT(EM_DIAGRAM):   if first._variable_ then orderedValue=1;
66361      else orderedValue+1;
MPRINT(EM_DIAGRAM):   else orderedValue+1;
66362      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2507 observations read from the data set EMWS1.CLUS_PROFILE.
NOTE: The data set EMWS1.CLUS_PROFILE has 2507 observations and 11 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66363      data WORK.Clus_temp;
MPRINT(EM_DIAGRAM):    data WORK.Clus_temp;
66364      set EMWS1.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTMEAN;
66365      _idvar_=left(put(_SEGMENT_,4.));
MPRINT(EM_DIAGRAM):   _idvar_=left(put(_SEGMENT_,4.));
66366      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.CLUS_OUTMEAN.
NOTE: The data set WORK.CLUS_TEMP has 23 observations and 30 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66367      proc distance data=WORK.Clus_temp out=EMWS1.Clus_DISTANCE method=l(2) shape=square;
MPRINT(EM_DIAGRAM):   proc distance data=WORK.Clus_temp out=EMWS1.Clus_DISTANCE method=l(2) shape=square;
66368      id _idvar_;
MPRINT(EM_DIAGRAM):   id _idvar_;
66369      var interval(%dmvqvars);
MPRINT(EM_DIAGRAM):   var interval(
MPRINT(DMVQVARS):  PC_1 PC_10 PC_11 PC_12 PC_13 PC_14 PC_15 PC_16 PC_17 PC_18 PC_19 PC_2 PC_20 PC_3 PC_4 PC_5 PC_6 PC_7 PC_8 PC_9
MPRINT(EM_DIAGRAM):  );
66370      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set EMWS1.CLUS_DISTANCE has 23 observations and 24 variables.
NOTE: PROCEDURE DISTANCE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66371      proc mds data=EMWS1.Clus_DISTANCE out=WORK.Clus_mds level=absolute nohist shape=square dim=3;
MPRINT(EM_DIAGRAM):    proc mds data=EMWS1.Clus_DISTANCE out=WORK.Clus_mds level=absolute nohist shape=square dim=3;
66372      object _idvar_;
MPRINT(EM_DIAGRAM):   object _idvar_;
66373      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Convergence reached in 20 iterations.
NOTE: The data set WORK.CLUS_MDS has 24 observations and 8 variables.
NOTE: PROCEDURE MDS ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
66374      quit;
66375      data WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   data WORK.Clus_mds;
66376      set WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   set WORK.Clus_mds;
66377      if _type_ ne 'CONFIG' then delete;
MPRINT(EM_DIAGRAM):   if _type_ ne 'CONFIG' then delete;
66378      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.CLUS_MDS.
NOTE: The data set WORK.CLUS_MDS has 23 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66379      data WORK.Clus_mds(label="&label" keep=_idvar_ _radius_ dim1 dim2 dim3);
WARNING: Apparent symbolic reference LABEL not resolved.
MPRINT(EM_DIAGRAM):   data WORK.Clus_mds(label="&label" KEEP=_idvar_ _radius_ dim1 dim2 dim3);
66380      merge WORK.Clus_temp WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_temp WORK.Clus_mds;
66381      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.CLUS_TEMP.
NOTE: There were 23 observations read from the data set WORK.CLUS_MDS.
NOTE: The data set WORK.CLUS_MDS has 23 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66382      goptions reset=all device=PNG;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG;
66383      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
66384      title1 "%sysfunc(sasmsg(sashelp.dmine, rpt_ClusterDistance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title1 "Proximidades clúster";
66385      %plotit(data=WORK.Clus_mds, datatype=mds, radii=_radius_, labelvar=_idvar_, symtype=circle, symbols='*', gout=WORK.Clus, gname=DISTANCE, gopts2=nodisplay, gopts=device=GIF, gopplot=cback=white, titlecol=black, labelcol=black, tickcol=black,
MPRINT(EM_DIAGRAM):   *------debugging routine to dump out macro variables------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):  *=========================== Macro Start =============================;
66386         framecol=black, post=C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD10396_MIIKYMEDIA_\Prc2\plotit.ps);
MPRINT(PLOTIT):   options nonotes;
MPRINT(PLOTIT):   options missing='.';
MPRINT(PLOTIT):   options noserror;
MPRINT(PLOTIT):   options serror;
MPRINT(PLOTIT):   *------store starting time, initialize a few variables-------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length name $ 8 __debug value $ 500 glob $ 32767;
MPRINT(PLOTIT):   __time = datetime();
MPRINT(PLOTIT):   call symput('start',compress(put(__time,best15.)));
MPRINT(PLOTIT):   *------override parameters?-------;
MPRINT(PLOTIT):   glob = left(symget('plotitop'));
MPRINT(PLOTIT):   if glob ne ' ' then put 'Overridden Parameters:';
MPRINT(PLOTIT):   do while(glob ne ' ');
MPRINT(PLOTIT):   i = index(glob, '=');
MPRINT(PLOTIT):   name = substr(glob, 1, i - 1);
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   i = index(glob, ',');
MPRINT(PLOTIT):   if i = 0 then i = length(glob) + 1;
MPRINT(PLOTIT):   value = substr(glob, 1, i);
MPRINT(PLOTIT):   value = translate(value, ' ', ',');
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   put name +(-1) '=' value;
MPRINT(PLOTIT):   call symput(name, trim(value));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------debugging flags-------;
MPRINT(PLOTIT):   __debug = symget('debug');
MPRINT(PLOTIT):   call symput('dbyes' ,compress(put(index(__debug,'vars') ,3.)));
MPRINT(PLOTIT):   call symput('dbprint' ,compress(put(index(__debug,'dprint'),3.)));
MPRINT(PLOTIT):   call symput('dbtime' ,compress(put(index(__debug,'time') ,3.)));
MPRINT(PLOTIT):   call symput('dbmprint',compress(put(index(__debug,'mprint'),3.)));
MPRINT(PLOTIT):   if (sysprod('stat') + sysprod('graph')) ne 2 then do;
MPRINT(PLOTIT):   put 'ERROR: SAS/STAT and SAS/GRAPH must be licensed ' 'to run this macro.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('style') ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: STYLE= is not supported in this release of the macro.' / '       Use OPTIONS NOGSTYLE to get the old appearance.' / '       Typically, you should set a style ' 'on the ODS destination.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length s $ 20;
MPRINT(PLOTIT):   retain s ' ';
MPRINT(PLOTIT):   file print;
MPRINT(PLOTIT):   set sashelp.vdest;
MPRINT(PLOTIT):   notb = style ne ' ';
MPRINT(PLOTIT):   style = lowcase(style);
MPRINT(PLOTIT):   if style eq 'listing' and s eq ' ' then call symputx('style', style, 'L');
MPRINT(PLOTIT):   else if style ne 'listing' and notb then do;
MPRINT(PLOTIT):   if s eq ' ' then s = style;
MPRINT(PLOTIT):   else if style ne s then do;
MPRINT(PLOTIT):   file log;
MPRINT(PLOTIT):   put 'ERROR: Multiple non-listing destinations with ' 'multiple ' 'styles ' 'are ' 'open.';
MPRINT(PLOTIT):   call symput('abort', '2');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if s ne ' ' then call symputx('style', s, 'L');
MPRINT(PLOTIT):   if _error_ then call symput('abort', '1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   *------mention var names for ordinary SAS syntax check-------;
MPRINT(PLOTIT):   retain _idvar_ __junk 0;
MPRINT(PLOTIT):   array __1 _idvar_ __junk;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(symget('labelvar')) > 67 or length(symget('symvar')) > 67 or length(symget('typevar')) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store current linesize and pagesize to restore later------;
MPRINT(PLOTIT):   length __ls __ps __var sysscp $ 8 ;
MPRINT(PLOTIT):   __num = getoption('number');
MPRINT(PLOTIT):   __ls = getoption('linesize');
MPRINT(PLOTIT):   __ps = getoption('pagesize');
MPRINT(PLOTIT):   __lab = getoption('label');
MPRINT(PLOTIT):   __var = getoption('validvarname');
MPRINT(PLOTIT):   __page = input(__ps, 8.);
MPRINT(PLOTIT):   if __page < 200 then __logps = __page + 1;
MPRINT(PLOTIT):   else __logps = 200;
MPRINT(PLOTIT):   if __logps < 20 then __logps = 20;
MPRINT(PLOTIT):   call symput('v7' , put(index(__var, '6') eq 0, 1.));
MPRINT(PLOTIT):   call symput('restornum',compress(__num));
MPRINT(PLOTIT):   call symput('restorla', compress(__lab));
MPRINT(PLOTIT):   call symput('restorls', compress(__ls));
MPRINT(PLOTIT):   call symput('restorps', compress(__ps));
MPRINT(PLOTIT):   call symput('logps' , compress(put(__logps, best8.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options label;
MPRINT(PLOTIT):   *------start parameter checking, initialization------;
MPRINT(PLOTIT):   *------initialization------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length data f1-f11 $ 72 name $ 70 post opts datatype plotvars $ 500 filepref $ 32;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------change other options based on GSTYLE/NOGSTYLE------;
MPRINT(PLOTIT):   if upcase(symget('style')) ne ' ' then do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'none');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LBFh');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'swiss');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LRTBFlb');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   datatype = upcase(symget('datatype'));
MPRINT(PLOTIT):   *------start setting up background color, border------;
MPRINT(PLOTIT):   opts = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('noback', put(index(opts, 'noback') ge 1, 1.));
MPRINT(PLOTIT):   if symget('noback') eq '1' then call symput('cframe', ' ');
MPRINT(PLOTIT):   if index(opts, 'noborder') then b = '0';
MPRINT(PLOTIT):   else if index(opts, 'border') then b = '1';
MPRINT(PLOTIT):   else if upcase(symget('style')) eq ' ' then b = '0';
MPRINT(PLOTIT):   else b = '1';
MPRINT(PLOTIT):   call symput('border', b);
MPRINT(PLOTIT):   *------initialize some macro variables------;
MPRINT(PLOTIT):   call symput('onetype','1');
MPRINT(PLOTIT):   call symput('singular','1e-8');
MPRINT(PLOTIT):   call symput('allblank','1');
MPRINT(PLOTIT):   call symput('botblank','0');
MPRINT(PLOTIT):   call symput('nlines' ,'0');
MPRINT(PLOTIT):   call symput('symnumer','0');
MPRINT(PLOTIT):   call symput('typenum' ,'0');
MPRINT(PLOTIT):   call symput('search' ,' ');
MPRINT(PLOTIT):   call symput('actualls','-1');
MPRINT(PLOTIT):   call symput('symdummy','#');
MPRINT(PLOTIT):   call symput('paintcol',' ');
MPRINT(PLOTIT):   call symput('paintmin','.');
MPRINT(PLOTIT):   call symput('paintmax','.');
MPRINT(PLOTIT):   call symput('paintnum','0');
MPRINT(PLOTIT):   call symput('ncontour','0');
MPRINT(PLOTIT):   call symput('hcontour','0');
MPRINT(PLOTIT):   call symput('vcontour','0');
MPRINT(PLOTIT):   call symput('hcondir ','0');
MPRINT(PLOTIT):   call symput('vcondir ','0');
MPRINT(PLOTIT):   call symput('looklist','0');
MPRINT(PLOTIT):   call symput('sizsquar','1');
MPRINT(PLOTIT):   call symput('ntitles' ,'0');
MPRINT(PLOTIT):   call symput('device' ,symget('sysdevic'));
MPRINT(PLOTIT):   call symput('datatype',trim(datatype));
MPRINT(PLOTIT):   call symput('listtitl','*** Wrapped Listing of Point Locations ***');
MPRINT(PLOTIT):   *------set vector scale factor------;
MPRINT(PLOTIT):   name = ' ';
MPRINT(PLOTIT):   do i = 5 to 2 by -1;
MPRINT(PLOTIT):   if name = ' ' then name = scan(datatype,i,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if name = ' ' or nmiss(input(name,?? 32.)) then name = '1';
MPRINT(PLOTIT):   call symput('biplot',trim(name));
MPRINT(PLOTIT):   *------make sure there are input data------;
MPRINT(PLOTIT):   data = left(upcase(symget('data')));
MPRINT(PLOTIT):   if data in (' ' '_LAST_') then do;
MPRINT(PLOTIT):   data = symget('syslast');
MPRINT(PLOTIT):   call symput('data',trim(data));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if data = '_NULL_' then do;
MPRINT(PLOTIT):   put 'ERROR: No input data set.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default file name------;
MPRINT(PLOTIT):   post = symget('post');
MPRINT(PLOTIT):   if post = ' ' then do;
MPRINT(PLOTIT):   sysscp = symget('sysscp');
MPRINT(PLOTIT):   filepref = symget('filepref');
MPRINT(PLOTIT):   if filepref = ' ' then filepref = 'sasplot';
MPRINT(PLOTIT):   if sysscp = 'CMS' then post = trim(filepref) || ' ' || 'ps';
MPRINT(PLOTIT):   else if sysscp =: 'VMS' or sysscp = 'WIN' or sysscp = 'OS2' then post = trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   else post = '.' || trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('post', trim(post));
MPRINT(PLOTIT):   *------some options cannot have null values------;
MPRINT(PLOTIT):   if symget('out') = ' ' then call symput('out' ,'anno');
MPRINT(PLOTIT):   if symget('tempdat1') = ' ' then call symput('tempdat1','tempdat1');
MPRINT(PLOTIT):   if symget('tempdat2') = ' ' then call symput('tempdat2','tempdat2');
MPRINT(PLOTIT):   if symget('tempdat3') = ' ' then call symput('tempdat3','tempdat3');
MPRINT(PLOTIT):   if symget('tempdat4') = ' ' then call symput('tempdat4','tempdat4');
MPRINT(PLOTIT):   if symget('tempdat5') = ' ' then call symput('tempdat5','tempdat5');
MPRINT(PLOTIT):   if symget('tempdat6') = ' ' then call symput('tempdat6','tempdat6');
MPRINT(PLOTIT):   if symget('regdat') = ' ' then call symput('regdat' ,'regdat');
MPRINT(PLOTIT):   if symget('preproc') = ' ' then call symput('preproc' ,'preproc');
MPRINT(PLOTIT):   if symget('extraobs') = ' ' then call symput('extraobs','extraobs');
MPRINT(PLOTIT):   if symget('radii') = ' ' then call symput('radii' ,'1, 2');
MPRINT(PLOTIT):   if symget('cirsegs') = ' ' then call symput('cirsegs' ,'.1');
MPRINT(PLOTIT):   if symget('cursegs') = ' ' then call symput('cursegs' ,'200');
MPRINT(PLOTIT):   if symget('maxiter') = ' ' then call symput('maxiter' ,'15');
MPRINT(PLOTIT):   if symget('lsinc') = ' ' then call symput('lsinc' ,'15');
MPRINT(PLOTIT):   if symget('place') = ' ' then call symput('place' ,'2 search');
MPRINT(PLOTIT):   if symget('symlen') = ' ' then call symput('symlen' ,'1');
MPRINT(PLOTIT):   if symget('ls') = ' ' then call symput('ls','compute search');
MPRINT(PLOTIT):   if symget('maxokpen') = ' ' then call symput('maxokpen','0');
MPRINT(PLOTIT):   if symget('ticklen') = ' ' then call symput('ticklen' ,'1.5');
MPRINT(PLOTIT):   if symget('tickfor') = ' ' then call symput('tickfor' ,'32.');
MPRINT(PLOTIT):   if symget('hnobs') = ' ' then call symput('hnobs' ,'0');
MPRINT(PLOTIT):   if symget('vnobs') = ' ' then call symput('vnobs' ,'0');
MPRINT(PLOTIT):   *------is radii a variable name?------;
MPRINT(PLOTIT):   name = upcase(substr(left(symget('radii')),1,1));
MPRINT(PLOTIT):   call symput('radname', put('A' <= name <= 'Z' or name = '_' or name = '"' or name = "'", 1.));
MPRINT(PLOTIT):   *------always use a formchar------;
MPRINT(PLOTIT):   call symput('procopts', trim(symget('procopts')) || " formchar='|----|+|---'");
MPRINT(PLOTIT):   *------was TYPES= specified?------;
MPRINT(PLOTIT):   call symput('typespec', put(symget('types') ne ' ',1.));
MPRINT(PLOTIT):   *------set default plotvars------;
MPRINT(PLOTIT):   plotvars = symget('plotvars');
MPRINT(PLOTIT):   if plotvars = ' ' then do;
MPRINT(PLOTIT):   if index(datatype,'MDS') or index(datatype,'MCA') or index(datatype,'ROW') or index(datatype,'COLUMN') or index(datatype,'CORRESP') then plotvars = 'Dim2 Dim1';
MPRINT(PLOTIT):   else if index(datatype,'MDPREF') or index(datatype,'VECTOR') or index(datatype,'IDEAL') then plotvars = 'Prin2 Prin1';
MPRINT(PLOTIT):   call symput('plotvars',trim(plotvars));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for conflicting data set names------;
MPRINT(PLOTIT):   f1 = left(upcase(symget('data')));
MPRINT(PLOTIT):   f2 = left(upcase(symget('out')));
MPRINT(PLOTIT):   f3 = left(upcase(symget('tempdat1')));
MPRINT(PLOTIT):   f4 = left(upcase(symget('tempdat2')));
MPRINT(PLOTIT):   f5 = left(upcase(symget('tempdat3')));
MPRINT(PLOTIT):   f6 = left(upcase(symget('tempdat4')));
MPRINT(PLOTIT):   f7 = left(upcase(symget('tempdat5')));
MPRINT(PLOTIT):   f8 = left(upcase(symget('tempdat6')));
MPRINT(PLOTIT):   f9 = left(upcase(symget('preproc')));
MPRINT(PLOTIT):   f10 = left(upcase(symget('extraobs')));
MPRINT(PLOTIT):   f11 = left(upcase(symget('regdat')));
MPRINT(PLOTIT):   opts = 'DATA OUT TEMPDAT1 TEMPDAT2 TEMPDAT3 TEMPDAT4 TEMPDAT5 ' || 'TEMPDAT6 PREPROC EXTRAOBS REGDAT';
MPRINT(PLOTIT):   array f[11] f1-f11;
MPRINT(PLOTIT):   do i = 1 to 11;
MPRINT(PLOTIT):   if f[i] =: 'WORK.' then f[i] = substr(f[i],6);
MPRINT(PLOTIT):   __name = f[i];
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   f[i] = __name;
MPRINT(PLOTIT):   do j = 1 to (i - 1);
MPRINT(PLOTIT):   if f[i] = f[j] then do;
MPRINT(PLOTIT):   oi = scan(opts,i,' ');
MPRINT(PLOTIT):   oj = scan(opts,j,' ');
MPRINT(PLOTIT):   put 'ERROR: Data sets ' oi +(-1) '=' f[i] 'and ' oj +(-1) '=' f[j] 'must be different.';
MPRINT(PLOTIT):   if oj = 'DATA' then put 'WARNING: You may have not specified DATA=.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------store input data set variable names------;
MPRINT(PLOTIT):   proc contents data=WORK.Clus_mds noprint out=tempdat1;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort data=tempdat1(keep=varnum type name);
MPRINT(PLOTIT):   by varnum;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------look for the type variable, plot variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length tvname vplotvar hplotvar upname vnormvar hnormvar pnormvar snormvar $ 70 __list plotvars __name $ 500 __c $ 1;
MPRINT(PLOTIT):   retain tvname vplotvar hplotvar hnormvar vnormvar pnormvar snormvar ' ' ok 1 vfound hfound pfound sfound 0;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   f = (index(symget('datatype'), 'FUNCTION') or index(upcase(symget('symtype')), 'FUNCTION'));
MPRINT(PLOTIT):   call symput('functype', put(f, 1.));
MPRINT(PLOTIT):   __name = symget('typevar');
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   tvname = __name;
MPRINT(PLOTIT):   __list = symget('plotvars');
MPRINT(PLOTIT):   __n = 1;
MPRINT(PLOTIT):   plotvars = __list;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   vnormvar = __name;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   hnormvar = __name;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   pfound = (lowcase(__name) eq '_blank_' or __name eq ' ');
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   pnormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   sfound = (lowcase(__name) eq '_symbol_' or __name eq ' ' or lowcase(__name) eq "'00'x" or lowcase(__name) eq '"00"x');
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   snormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __list = symget('paint');
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   call symput('paintvar',trim(__name));
MPRINT(PLOTIT):   call symput('paint' ,trim(__list));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   if upname = tvname or (tvname = ' ' and upname = '_TYPE_') then do;
MPRINT(PLOTIT):   if tvname = ' ' then call symput('typevar','_type_');
MPRINT(PLOTIT):   if (type = 1) then call symput('typenum','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------plotting variables must be numeric------;
MPRINT(PLOTIT):   if (upname = hnormvar or upname = vnormvar) and type = 2 then do;
MPRINT(PLOTIT):   put 'ERROR: PLOTVARS=' plotvars 'must be numeric.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default plotting variables if not set yet------;
MPRINT(PLOTIT):   if type = 1 then do;
MPRINT(PLOTIT):   if hplotvar = ' ' then do;
MPRINT(PLOTIT):   hplotvar = name;
MPRINT(PLOTIT):   hnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if vplotvar = ' ' then do;
MPRINT(PLOTIT):   vplotvar = name;
MPRINT(PLOTIT):   vnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------make sure axis variables are found------;
MPRINT(PLOTIT):   if upname = hnormvar then do;
MPRINT(PLOTIT):   hfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = vnormvar then do;
MPRINT(PLOTIT):   vfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = pnormvar then pfound = 1;
MPRINT(PLOTIT):   if upname = snormvar then sfound = 1;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   call symput('vplotvar',trim(vplotvar));
MPRINT(PLOTIT):   call symput('hplotvar',trim(hplotvar));
MPRINT(PLOTIT):   __list = trim(hplotvar) || ' ' || trim(vplotvar);
MPRINT(PLOTIT):   call symput('plotvars',trim(hplotvar) || ' ' || trim(vplotvar));
MPRINT(PLOTIT):   name = 'A' || vplotvar;
MPRINT(PLOTIT):   call symput('appvar1',trim(name));
MPRINT(PLOTIT):   if vplotvar = ' ' or hplotvar = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Not enough variables to plot.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not hfound then do;
MPRINT(PLOTIT):   put 'ERROR: Horizontal axis variable ' hplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not vfound then do;
MPRINT(PLOTIT):   put 'ERROR: Vertical axis variable ' vplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   put 'ERROR: Label variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   put 'ERROR: Symbol variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if hnormvar = '_TYPE_' or vnormvar = '_TYPE_' then put 'WARNING: _TYPE_ is one of the axis variables.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to length(__name);
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   namescan: * Returns nth name from a list. * Input: __list, __n * Output: __list, (trashed) * __name * Sample usage: * __list = 'a "b"n "C d"N d';
MPRINT(PLOTIT):   * __n = 2;
MPRINT(PLOTIT):   * link namescan;
MPRINT(PLOTIT):   * Creates: __name = '"b"n' * Notes: __name must have a length of at least 67. * a much longer length (say > 256) helps guard * against long, blank padded n-literals.;
MPRINT(PLOTIT):   __list = left(__list);
MPRINT(PLOTIT):   do __i = 1 to __n;
MPRINT(PLOTIT):   __c = substr(__list, 1, 1);
MPRINT(PLOTIT):   if trim(__c) in ("'", '"') then do;
MPRINT(PLOTIT):   __e = 0;
MPRINT(PLOTIT):   __len = length(__list);
MPRINT(PLOTIT):   do __k = 2 to __len until(__e);
MPRINT(PLOTIT):   if upcase(substr(__list, __k, 2)) in ("''", '""') then __k + 1;
MPRINT(PLOTIT):   else if upcase(substr(__list, __k, 2)) = compress(__c || 'N') then __e = __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else __e = index(__list, ' ') - 1;
MPRINT(PLOTIT):   if __e < 1 then __e = length(__list);
MPRINT(PLOTIT):   __name = substr(__list, 1, __e);
MPRINT(PLOTIT):   __list = left(substr(__list, __e + 2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(__name) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __list __n __i __k __len __name __c __e;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------generate TYPES= list from data?------;
MPRINT(PLOTIT):   *------preliminary preprocessing that changes the data------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   set WORK.Clus_mds;
MPRINT(PLOTIT):   if n(Dim2,Dim1) = 2;
MPRINT(PLOTIT):   *------eliminate anti-ideal points------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------get colors from style------;
MPRINT(PLOTIT):   data tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   length w c $ 20 n 8;
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Set defaults based on options (from the pre-style days);
MPRINT(PLOTIT):   data tempdat6;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   w = 'parent      ';
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   c = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gaxis       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('framecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gborderlines';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcfit       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('curvecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'glabel      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('labelcol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gtext       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('titlecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gwalls      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('cframe');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata1     ';
MPRINT(PLOTIT):   n = 1;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata2     ';
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata3     ';
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata4     ';
MPRINT(PLOTIT):   n = 4;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata5     ';
MPRINT(PLOTIT):   n = 5;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata6     ';
MPRINT(PLOTIT):   n = 6;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata7     ';
MPRINT(PLOTIT):   n = 7;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata8     ';
MPRINT(PLOTIT):   n = 8;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata9     ';
MPRINT(PLOTIT):   n = 9;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata10    ';
MPRINT(PLOTIT):   n = 10;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata11    ';
MPRINT(PLOTIT):   n = 11;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata12    ';
MPRINT(PLOTIT):   n = 12;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Get values from style and style parents up to four levels;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.listing / file="C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD10396_MIIKYMEDIA_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat2(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD10396_MIIKYMEDIA_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.default / file="C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD10396_MIIKYMEDIA_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD10396_MIIKYMEDIA_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   merge tempdat6 tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length list $ 200;
MPRINT(PLOTIT):   retain list ' ';
MPRINT(PLOTIT):   set tempdat3 end=eof;
MPRINT(PLOTIT):   if w eq 'gaxis' then do;
MPRINT(PLOTIT):   if symget('framecol') eq ' ' then call symputx('framecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gtext' then do;
MPRINT(PLOTIT):   if symget('titlecol') eq ' ' then call symputx('titlecol', c, 'L');
MPRINT(PLOTIT):   if symget('tickcol') eq ' ' then call symputx('tickcol' , c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'glabel' then do;
MPRINT(PLOTIT):   if symget('labelcol') eq ' ' then call symputx('labelcol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gcfit' then do;
MPRINT(PLOTIT):   if symget('curvecol') eq ' ' then call symputx('curvecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not 0 and w eq 'gwalls' and symget('cframe') eq ' ' and c ne '_undef_' then call symputx('cframe', c, 'L');
MPRINT(PLOTIT):   else if 1 and w eq 'gborderlines' then call symput('border', c);
MPRINT(PLOTIT):   if 1 and w =: 'gcdata' then do;
MPRINT(PLOTIT):   if n = 1 then n = .;
MPRINT(PLOTIT):   else if n = . then n = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(n);
MPRINT(PLOTIT):   list = trim(list) || ' ' || c;
MPRINT(PLOTIT):   list = compbl(list);
MPRINT(PLOTIT):   if eof then call symput('colors', compbl(list));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------more initializations------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length name symvar $ 70 color framecol titlecol labelcol tickcol curvecol monochro font size name1-name2 tsize $ 12 anele anele2 $ 16 word $ 24 list list2 datatype types colors symbols symcol symtype symfont symsize labcol labfont
labsize britypes rgbtypes exttypes $ 500;
MPRINT(PLOTIT):   *------finalize border, border color------;
MPRINT(PLOTIT):   word = symget('border');
MPRINT(PLOTIT):   if word eq '1' then word = "black";
MPRINT(PLOTIT):   else if word eq '0' then word = ' ';
MPRINT(PLOTIT):   call symput('border', trim(word));
MPRINT(PLOTIT):   *------set default symbol variable------;
MPRINT(PLOTIT):   symvar = symget('symvar');
MPRINT(PLOTIT):   *------list of valid DATATYPE= values------;
MPRINT(PLOTIT):   array dts[15] corresp mca row column mdpref mdpref2 vector ideal mds curve curve2 function contour square symbol;
MPRINT(PLOTIT):   *------22 lists, 10 lists of ntypes elements, 9 single-element lists 3 longer lists------;
MPRINT(PLOTIT):   listn = 22;
MPRINT(PLOTIT):   listm = 10;
MPRINT(PLOTIT):   listo = 19;
MPRINT(PLOTIT):   array vars[22] $ types colors symbols symcol symtype symfont symsize labcol labfont labsize color framecol titlecol labelcol tickcol curvecol monochro font cframe britypes rgbtypes exttypes;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------check method------;
MPRINT(PLOTIT):   name = symget('method');
MPRINT(PLOTIT):   word = lowcase(compress(name,' 2'));
MPRINT(PLOTIT):   if not (word in ('gplot' 'print' 'plot' 'none')) then do;
MPRINT(PLOTIT):   put 'ERROR: METHOD=' name 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   call symput('method',trim(word));
MPRINT(PLOTIT):   if word = 'plot' then call symput('looklist', '1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------convert binary options ------;
MPRINT(PLOTIT):   list = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('diag' ,put(index(list,'diag') > 0,1.));
MPRINT(PLOTIT):   call symput('expand' ,put(index(list,'expand') > 0,1.));
MPRINT(PLOTIT):   call symput('closebord',put(index(list,'close') > 0,1.));
MPRINT(PLOTIT):   call symput('center' ,put(index(list,'nocenter') = 0,1.));
MPRINT(PLOTIT):   call symput('clip' ,put(index(list,'noclip') = 0,1.));
MPRINT(PLOTIT):   call symput('delete' ,put(index(list,'nodelete') = 0,1.));
MPRINT(PLOTIT):   call symput('linetext' ,put(index(list,'textline') = 0,1.));
MPRINT(PLOTIT):   call symput('squarplt' ,put(index(list,'square') > 0,1.));
MPRINT(PLOTIT):   print = (index(list,'noprint') = 0);
MPRINT(PLOTIT):   call symput('legend' ,put(index(list,'nolegend') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('history',put(index(list,'nohistory') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('code' ,put(index(list,'nocode') = 0 and print,1.));
MPRINT(PLOTIT):   *------make sure all options are recognized------;
MPRINT(PLOTIT):   list2 = 'noborder border close diag expand noclip nocode nodelete ' || 'nocenter noback nohistory nolegend noprint square textline';
MPRINT(PLOTIT):   do i = 1 to 13;
MPRINT(PLOTIT):   word = scan(list2,i);
MPRINT(PLOTIT):   j = index(list,trim(word));
MPRINT(PLOTIT):   if j then substr(list,j,length(word)) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: The following options are not recognized: ' list +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check INTERPOL=------;
MPRINT(PLOTIT):   list = lowcase(symget('interpol'));
MPRINT(PLOTIT):   call symput('intrtick',put((index(list,'tick') or not (index(list,'ls') or index(list,'no'))),1.));
MPRINT(PLOTIT):   call symput('intrls' ,put((index(list,'ls') or not index(list,'no')),1.));
MPRINT(PLOTIT):   call symput('hlogscal',put((index(list,'hlog') > 0),1.));
MPRINT(PLOTIT):   call symput('vlogscal',put((index(list,'vlog') > 0),1.));
MPRINT(PLOTIT):   *------parse the DATATYPE= option------;
MPRINT(PLOTIT):   datatype = symget('datatype');
MPRINT(PLOTIT):   list = datatype;
MPRINT(PLOTIT):   do i = 1 to 15;
MPRINT(PLOTIT):   call vname(dts[i],name);
MPRINT(PLOTIT):   j = index(datatype,trim(upcase(name)));
MPRINT(PLOTIT):   if j then substr(list,j,length(name)) = ' ';
MPRINT(PLOTIT):   dts[i] = (j ne 0);
MPRINT(PLOTIT):   call symput(name,compress(put(dts[i],1.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list = compress(list,'0123456789.e+-');
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid DATATYPE=' datatype +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------get the lists that must be quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   vars[i] = symget(name);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symtype = lowcase(symtype);
MPRINT(PLOTIT):   britypes = lowcase(britypes);
MPRINT(PLOTIT):   rgbtypes = lowcase(rgbtypes);
MPRINT(PLOTIT):   exttypes = lowcase(exttypes);
MPRINT(PLOTIT):   *-----make sure these are set------;
MPRINT(PLOTIT):   if font = ' ' then font = 'swiss';
MPRINT(PLOTIT):   tsize = symget('tsize');
MPRINT(PLOTIT):   if tsize = ' ' then do;
MPRINT(PLOTIT):   tsize = '1';
MPRINT(PLOTIT):   call symput('tsize','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------process DATATYPE= option------;
MPRINT(PLOTIT):   if datatype ne ' ' then do;
MPRINT(PLOTIT):   if contour then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' contour';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' solid';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' contour';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' contour';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if square then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' U';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' square';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' marker';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' square';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' square';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if function then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' function';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' function';
MPRINT(PLOTIT):   name = symget('labelvar');
MPRINT(PLOTIT):   if name = ' ' then call symput('labelvar','_blank_');
MPRINT(PLOTIT):   if symvar = ' ' then put 'WARNING: Null symbol variable ' 'specified with ' 'DATATYPE=function.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref or vector or ideal then types = trim(types) || ' SCORE';
MPRINT(PLOTIT):   if mdpref or vector or ideal or symbol then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if corresp or row or mca or column then do;
MPRINT(PLOTIT):   types = trim(types) || ' VAR OBS SUPVAR SUPOBS';
MPRINT(PLOTIT):   if row then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " '' * * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if column then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol vector symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " * '' * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' * * * *';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symsize = trim(symsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   symfont = trim(symfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   labsize = trim(labsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   labfont = trim(labfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref then do;
MPRINT(PLOTIT):   types = trim(types) || ' CORR';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref2 then labsize = trim(labsize) || ' ' || compress(put(input(tsize, ?? 32.) * 0.75, best8.));
MPRINT(PLOTIT):   else labsize = trim(labsize) || ' 0';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   size = compress(put(input(tsize,?? 32.) * 1.5, best8.));
MPRINT(PLOTIT):   if vector then do;
MPRINT(PLOTIT):   types = trim(types) || ' MCOEFFI';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ideal then do;
MPRINT(PLOTIT):   types = trim(types) || ' MPOINT';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' +';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' circle';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mds then do;
MPRINT(PLOTIT):   types = trim(types) || ' CONFIG';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (mds or corresp or mca or row or column or mdpref or mdpref2 or vector or ideal) and symget('label') = ' ' then call symput('label','typical');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ in case these were only specified in the symtype------;
MPRINT(PLOTIT):   if index(symtype, 'contour' ) then call symput('contour' , '1');
MPRINT(PLOTIT):   if index(symtype, 'square' ) then call symput('square' , '1');
MPRINT(PLOTIT):   *------set colors, other defaults------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   if colors = ' ' then colors = color;
MPRINT(PLOTIT):   if framecol = ' ' then framecol = color;
MPRINT(PLOTIT):   if titlecol = ' ' then titlecol = color;
MPRINT(PLOTIT):   if labelcol = ' ' then labelcol = color;
MPRINT(PLOTIT):   if tickcol = ' ' then tickcol = color;
MPRINT(PLOTIT):   if curvecol = ' ' then curvecol = color;
MPRINT(PLOTIT):   if symtype = ' ' then symtype = 'symbol';
MPRINT(PLOTIT):   if symsize = ' ' then symsize = tsize;
MPRINT(PLOTIT):   if symfont = ' ' then symfont = font;
MPRINT(PLOTIT):   if labsize = ' ' then labsize = tsize;
MPRINT(PLOTIT):   if labfont = ' ' then labfont = font;
MPRINT(PLOTIT):   if exttypes = ' ' then exttypes = "''";
MPRINT(PLOTIT):   if rgbtypes = ' ' then rgbtypes = "''";
MPRINT(PLOTIT):   labcol = trim(labcol) || ' ' || colors;
MPRINT(PLOTIT):   symcol = trim(symcol) || ' ' || colors;
MPRINT(PLOTIT):   *------default symbols when unspecified------;
MPRINT(PLOTIT):   if index(symtype, 'symbol') and symvar eq '_symbol_' and symbols = ' ' then do;
MPRINT(PLOTIT):   word = scan(symtype, 1, ' ');
MPRINT(PLOTIT):   do i = 1 to 500 while(word ne ' ');
MPRINT(PLOTIT):   if index(word, 'symbol') then symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   else symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   word = scan(symtype, i + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symbols = ' ' then symbols = "''";
MPRINT(PLOTIT):   *------count the number of types------;
MPRINT(PLOTIT):   if types = ' ' then types = "''";
MPRINT(PLOTIT):   do until(word eq ' ');
MPRINT(PLOTIT):   ntypes + 1;
MPRINT(PLOTIT):   word = scan(types, ntypes + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   holdntyp = ntypes;
MPRINT(PLOTIT):   *------output number of observation types------;
MPRINT(PLOTIT):   call symput('ntypes',compress(put(ntypes,3.)));
MPRINT(PLOTIT):   *------output lists, make sure they are quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   if i > listm then ntypes = 1;
MPRINT(PLOTIT):   if i > listo then ntypes = 200;
MPRINT(PLOTIT):   link qlist;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   ntypes = holdntyp;
MPRINT(PLOTIT):   *------output sizes for squares------;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   word = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(word, 'square') then call symput('sizsquar', compress(scan(symsize, i, ' '), " '"||'"'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for constant symvar with vectors------;
MPRINT(PLOTIT):   symcon = (symvar = ' ' or (compress(symvar,"'"||'"') ne symvar));
MPRINT(PLOTIT):   if symcon then do;
MPRINT(PLOTIT):   i = length(symvar);
MPRINT(PLOTIT):   if i > 3 then do;
MPRINT(PLOTIT):   word = upcase(substr(symvar, i - 1));
MPRINT(PLOTIT):   if word in ('"N', "'N") then symcon = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('symcon',put(symcon,1.));
MPRINT(PLOTIT):   if symcon and index(symtype,'vector') then do;
MPRINT(PLOTIT):   put 'ERROR: Constant SYMVAR= is not allowed with vectors.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse RGBROUND= option------;
MPRINT(PLOTIT):   list = symget('rgbround');
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   do i = 1 to 4;
MPRINT(PLOTIT):   name = scan(list, i, ' ');
MPRINT(PLOTIT):   num = input(name, ?? 32.);
MPRINT(PLOTIT):   if nmiss(num) then num = .;
MPRINT(PLOTIT):   if i > 1 and num <= 0 then num = 1;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || compress(put(num,best8.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('rgbround',trim(left(list2)));
MPRINT(PLOTIT):   *------anything specified for the BRIGHT= option?------;
MPRINT(PLOTIT):   if symget('bright') = ' ' then do;
MPRINT(PLOTIT):   britypes = ' ';
MPRINT(PLOTIT):   call symput('britypes', compress(britypes));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------anything specified for the PAINT= option?------;
MPRINT(PLOTIT):   list = left(symget('paint'));
MPRINT(PLOTIT):   if symget('paintvar') = ' ' then do;
MPRINT(PLOTIT):   rgbtypes = ' ';
MPRINT(PLOTIT):   call symput('rgbtypes', compress(rgbtypes));
MPRINT(PLOTIT):   if contour then put 'WARNING: PAINT= was not specified ' 'with a contour plot.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse PAINT= option------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------count list elements------;
MPRINT(PLOTIT):   do n = 1 to 500 until(name2 = ' ');
MPRINT(PLOTIT):   name2 = scan(list,n,' ');
MPRINT(PLOTIT):   if n(input(name2,?? 32.)) then name2 = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   n = n - 1;
MPRINT(PLOTIT):   *------set default, when only a variable name is specified------;
MPRINT(PLOTIT):   if n < 1 then do;
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   list = 'blue magenta red';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if n < 2 then do;
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   name2 = scan(list,1,' ');
MPRINT(PLOTIT):   list = compress(name2) || ' ' || compress(name2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('paintcol', trim(list));
MPRINT(PLOTIT):   *------store, check number of list elements------;
MPRINT(PLOTIT):   call symput('paintnum',compress(put(n,3.)));
MPRINT(PLOTIT):   *------table of recognized colors and their hex rgb------;
MPRINT(PLOTIT):   allcols = 'BLACK--BLUE---BROWN--GRAY---GREEN--OLIVE--ORANGE-' || 'PINK---PURPLE-RED----VIOLET-WHITE--YELLOW-MAGENTA' || 'CYAN---';
MPRINT(PLOTIT):   hexcols = '000000 0000ff a05000 808080 00ff00 2a8307 ff8000 ' || 'ff0080 703070 ff0000 b090d0 ffffff ffff00 ff00ff ' || '00ffff ';
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   *------construct list of (decimal) RGB values------;
MPRINT(PLOTIT):   do j = 1 to 3;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   color = upcase(scan(list, i, ' '));
MPRINT(PLOTIT):   k = index(allcols,trim(color));
MPRINT(PLOTIT):   *------grab hex code for name, or parse CXrrggbb------;
MPRINT(PLOTIT):   if k then name1 = substr(hexcols,k + (j - 1) * 2,2);
MPRINT(PLOTIT):   else name1 = substr(color ,(j - 1) * 2 + 3,2);
MPRINT(PLOTIT):   *------check for validity------;
MPRINT(PLOTIT):   num = input(name1,?? hex2.);
MPRINT(PLOTIT):   if nmiss(num) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= color of ' color 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 4;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = compress(put(num,3.));
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 3;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------build list------;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || trim(name1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store line segment end points in list if specified------;
MPRINT(PLOTIT):   list2 = left(list2);
MPRINT(PLOTIT):   name1 = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   name1 = scan(list,n + i,' ');
MPRINT(PLOTIT):   if nmiss(input(name1,?? 32.)) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value of ' name1 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || name1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = scan(list,2 * n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store processed PAINT= list------;
MPRINT(PLOTIT):   call symput('paint',trim(list2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if input(symget('legend'), ?? 32.) then do;
MPRINT(PLOTIT):   awidth = 9;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = scan(types, i, ' ');
MPRINT(PLOTIT):   awidth = max(awidth, length(anele) + 1);
MPRINT(PLOTIT):   awidth = max(awidth, length(scan(symbols, i, ' ')) + 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   cols = min(15 + awidth * ntypes, 256);
MPRINT(PLOTIT):   cols = 15 + floor((cols - 15) / awidth) * awidth;
MPRINT(PLOTIT):   m = floor((256 - cols) / 2);
MPRINT(PLOTIT):   cols = cols - 1;
MPRINT(PLOTIT):   put / +m 'Types Legend  |' @@;
MPRINT(PLOTIT):   list = types;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   substr(list, 15, 1) = '+';
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   put +m 'Symbol Types  |' @@;
MPRINT(PLOTIT):   list = symtype;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbols       |' @@;
MPRINT(PLOTIT):   list = symbols;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Colors |' @@;
MPRINT(PLOTIT):   list = symcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Label  Colors |' @@;
MPRINT(PLOTIT):   list = labcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Symbol Sizes  |' @@;
MPRINT(PLOTIT):   list = symsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Sizes  |' @@;
MPRINT(PLOTIT):   list = labsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Fonts  |' @@;
MPRINT(PLOTIT):   list = symfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Fonts  |' @@;
MPRINT(PLOTIT):   list = labfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legend: *------print legend------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legendc: *------print legend for colors------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele2 = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(rgbtypes, trim(anele2)) or index(britypes, trim(anele2)) then anele = ' ';
MPRINT(PLOTIT):   else anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   printele: *------print one table element------;
MPRINT(PLOTIT):   j = j + 1;
MPRINT(PLOTIT):   if (15 + awidth * j) > 256 then do;
MPRINT(PLOTIT):   put / +(m+14) '|' @@;
MPRINT(PLOTIT):   j = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put @(m + 17 + (j - 1) * awidth) anele $ @@;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   qlist: *------quote the elements of a list------;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   list = vars[i];
MPRINT(PLOTIT):   charv = not index(upcase(name),'SIZE');
MPRINT(PLOTIT):   word = scan(list,1,' ');
MPRINT(PLOTIT):   do n = 1 to ntypes while(word ne ' ');
MPRINT(PLOTIT):   if charv then do;
MPRINT(PLOTIT):   word = compress("'" || compress(word,"'"||'"') || "'");
MPRINT(PLOTIT):   if not index(substr(word,2),"'") then do;
MPRINT(PLOTIT):   put 'ERROR: The list element ' name +(-1) '=' word 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (length(list2) + length(word)) >= 500 then do;
MPRINT(PLOTIT):   put 'ERROR: The list ' name +(-1) '=' list2 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || word;
MPRINT(PLOTIT):   word = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if word = ' ' and i <= listm then word = scan(list2,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput(name,trim(left(list2)));
MPRINT(PLOTIT):   vars[i] = list2;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
 
                                                                                                                    Types Legend  | CONFIG
                                                                                                                    --------------+---------
                                                                                                                    Symbol Types  | circle
                                                                                                                    Symbols       | *
                                                                                                                    Symbol Colors | cx000000
                                                                                                                    Label  Colors | cx000000
                                                                                                                    Symbol Sizes  | 1
                                                                                                                    Label  Sizes  | 1
                                                                                                                    Symbol Fonts  | none
                                                                                                                    Label  Fonts  | none
                                                                                                                    ------------------------
MPRINT(PLOTIT):   *------inertias for correspondence analysis variable labels------;
MPRINT(PLOTIT):   *------check, set remaining variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   length __name setl labelvar tvname symvar paintvar upname $ 70;
MPRINT(PLOTIT):   retain setl labelvar tvname symvar paintvar ' ' paintfou typefoun 0 ok 1;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   *------get current names------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   tvname = dequote(symget('typevar'));
MPRINT(PLOTIT):   labelvar = dequote(symget('labelvar'));
MPRINT(PLOTIT):   paintvar = dequote(symget('paintvar'));
MPRINT(PLOTIT):   if 0 then symvar = _symbol_;
MPRINT(PLOTIT):   else symvar = dequote(symget('symvar'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------is the symbol variable numeric or character?------;
MPRINT(PLOTIT):   if not 0 and upname = upcase(symvar) and type = 1 then call symput('symnumer','1');
MPRINT(PLOTIT):   *------find _type_ variable------;
MPRINT(PLOTIT):   if upname = upcase(tvname) then typefoun = 1;
MPRINT(PLOTIT):   *------find PAINT= variable------;
MPRINT(PLOTIT):   if upname = upcase(paintvar) and type = 1 then paintfou = 1;
MPRINT(PLOTIT):   *------find default label variable name------;
MPRINT(PLOTIT):   else if type = 2 and (setl = ' ' or upname ne '_TYPE_') then setl = name;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   if labelvar = ' ' and setl ne ' ' then labelvar = setl;
MPRINT(PLOTIT):   if labelvar = ' ' then labelvar = '_blank_';
MPRINT(PLOTIT):   __name = labelvar;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   call symput('labelvar', trim(__name));
MPRINT(PLOTIT):   *------assorted error checking------;
MPRINT(PLOTIT):   if not typefoun and tvname ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: TYPEVAR=' tvname 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not typefoun and input(symget('typespec'), ?? 32.) then do;
MPRINT(PLOTIT):   put 'ERROR: A type variable must be available ' 'when TYPES= ' 'is specified.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (paintvar = ' ' or paintfou) then do;
MPRINT(PLOTIT):   put 'ERROR: A numeric PAINT=' paintvar 'variable was not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to __len;
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find minima, maxima------;
MPRINT(PLOTIT):   proc means data=preproc noprint;
MPRINT(PLOTIT):   output out=tempdat1 max(Dim2 Dim1 )=vmax hmax min(Dim2 Dim1 )=vmin hmin;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set goptions------;
MPRINT(PLOTIT):   goptions nodisplay device=PNG cback=white device=GIF;
MPRINT(PLOTIT):   *------check some parameters for valid values, set up others------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length c $ 1 vplotvar hplotvar labelvar $ 70 opt $ 8 str place vecheadr vecheadw tinc device $ 12 outward search vechead ls $ 32 label plotreq plotopts upopts pl list labely labelx label $ 500 ind1 ind2 $ 35;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   call symput('somedata','0');
MPRINT(PLOTIT):   set tempdat1(drop=_type_);
MPRINT(PLOTIT):   call symput('somedata','1');
MPRINT(PLOTIT):   call symput('vinter', '.');
MPRINT(PLOTIT):   call symput('hinter', '.');
MPRINT(PLOTIT):   call symput('hslope', '.');
MPRINT(PLOTIT):   call symput('vslope', '.');
MPRINT(PLOTIT):   *------check missings------;
MPRINT(PLOTIT):   if n(vmin,hmin,vmax,hmax) < 4 then do;
MPRINT(PLOTIT):   put 'ERROR: At least one variable is all missing.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for nonpositive data with log scales------;
MPRINT(PLOTIT):   if (vmin <= 0 and 0) or (hmin <= 0 and 0) then do;
MPRINT(PLOTIT):   put "ERROR: Nonpositive data with INTERPOL=yes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store extend values------;
MPRINT(PLOTIT):   list = symget('extend');
MPRINT(PLOTIT):   call symput('close',compress(put(index(list,'close'),best3.)));
MPRINT(PLOTIT):   if nmiss(input(scan(list,1,' '),?? 32.)) then call symput('extendl',' ');
MPRINT(PLOTIT):   else call symput('extendl',scan(list,1,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,2,' '),?? 32.)) then call symput('extendr',' ');
MPRINT(PLOTIT):   else call symput('extendr',scan(list,2,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,3,' '),?? 32.)) then call symput('extendt',' ');
MPRINT(PLOTIT):   else call symput('extendt',scan(list,3,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,4,' '),?? 32.)) then call symput('extendb',' ');
MPRINT(PLOTIT):   else call symput('extendb',scan(list,4,' '));
MPRINT(PLOTIT):   *------make sure PAINT= minimum, maximum are stored------;
MPRINT(PLOTIT):   call symput('rgbround', trim(symget('rgbround')) || ' .');
MPRINT(PLOTIT):   *------compute (possibly adjusted) range------;
MPRINT(PLOTIT):   isavec = index(symget('symtype'),'vector');
MPRINT(PLOTIT):   if isavec then do;
MPRINT(PLOTIT):   vmin = min(0,vmin);
MPRINT(PLOTIT):   hmin = min(0,hmin);
MPRINT(PLOTIT):   vmax = max(0,vmax);
MPRINT(PLOTIT):   hmax = max(0,hmax);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   vmax = max(vmax,hmax);
MPRINT(PLOTIT):   hmax = vmax;
MPRINT(PLOTIT):   vmin = min(vmin,hmin);
MPRINT(PLOTIT):   hmin = vmin;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 and not 0 then range = vmax - vmin;
MPRINT(PLOTIT):   else if 0 and not 0 then range = hmax - hmin;
MPRINT(PLOTIT):   else range = max(vmax - vmin, hmax - hmin);
MPRINT(PLOTIT):   range = max(1e4 * 1e-8,range);
MPRINT(PLOTIT):   *------default increment, minima, maxima------;
MPRINT(PLOTIT):   inc = input(symget('inc'),?? 32.);
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   inc = 10 ** ceil(log10(range) - 1.0);
MPRINT(PLOTIT):   if range / inc >= 7.5 then inc = inc * 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   tinc = compress(put(inc,best12.));
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   put 'ERROR: Input data set is empty, constant, or corrupt.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('inc' ,trim(tinc));
MPRINT(PLOTIT):   call symput('hmax',compress(put(hmax,best15.)));
MPRINT(PLOTIT):   call symput('hmin',compress(put(hmin,best15.)));
MPRINT(PLOTIT):   call symput('vmax',compress(put(vmax,best15.)));
MPRINT(PLOTIT):   call symput('vmin',compress(put(vmin,best15.)));
MPRINT(PLOTIT):   *------construct plot request------;
MPRINT(PLOTIT):   vplotvar = symget('vplotvar');
MPRINT(PLOTIT):   hplotvar = symget('hplotvar');
MPRINT(PLOTIT):   plotopts = symget('plotopts');
MPRINT(PLOTIT):   labelvar = symget('labelvar');
MPRINT(PLOTIT):   upopts = upcase(plotopts);
MPRINT(PLOTIT):   plotreq = trim(vplotvar) || ' * ' || trim(hplotvar) || ' $ ' || trim(labelvar) || ' = _symbol_';
MPRINT(PLOTIT):   *------check for HREF= VREF= options------;
MPRINT(PLOTIT):   if index(upopts,'HREF') or index(upopts,'VREF') then put 'WARNING: HREF= and VREF= PLOT options are ignored.  ' 'Specify ' 'them as ' 'macro options ' 'instead.';
MPRINT(PLOTIT):   *------see if we need to generate a placement list------;
MPRINT(PLOTIT):   pl = ' ';
MPRINT(PLOTIT):   i = index(upopts,'PLACE');
MPRINT(PLOTIT):   if i then do;
MPRINT(PLOTIT):   pl = substr(plotopts,i);
MPRINT(PLOTIT):   if i > 1 then plotopts = substr(plotopts,1,i - 1);
MPRINT(PLOTIT):   else plotopts = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle horizontal ticks if not already specified------;
MPRINT(PLOTIT):   c = 'h';
MPRINT(PLOTIT):   maxim = hmax;
MPRINT(PLOTIT):   minim = hmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------handle vertical ticks if not already specified------;
MPRINT(PLOTIT):   c = 'v';
MPRINT(PLOTIT):   maxim = vmax;
MPRINT(PLOTIT):   minim = vmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------outward option------;
MPRINT(PLOTIT):   outward = symget('outward');
MPRINT(PLOTIT):   if outward ne 'none' then do;
MPRINT(PLOTIT):   if outward = ' ' and isavec then outward = symget('symdummy');
MPRINT(PLOTIT):   if outward ne ' ' then plotopts = trim(plotopts) || ' outward="' || compress(outward,"'"||'" ') || '"';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------box option------;
MPRINT(PLOTIT):   plotopts = trim(left(plotopts)) || ' box';
MPRINT(PLOTIT):   *------reference lines------;
MPRINT(PLOTIT):   list = symget('href');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' href=' || list;
MPRINT(PLOTIT):   list = symget('vref');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' vref=' || list;
MPRINT(PLOTIT):   *------set up vector heads------;
MPRINT(PLOTIT):   vechead = symget('vechead');
MPRINT(PLOTIT):   vecheadr = scan(vechead,1,' ');
MPRINT(PLOTIT):   vecheadw = scan(vechead,2,' ');
MPRINT(PLOTIT):   if vecheadw = ' ' then vecheadr = ' ';
MPRINT(PLOTIT):   *------determine graphics area------;
MPRINT(PLOTIT):   rc1 = ginit();
MPRINT(PLOTIT):   call gask('maxdisp',units,xmax,ymax,xpix,ypix,rc2);
MPRINT(PLOTIT):   call gask('device',device,rc3);
MPRINT(PLOTIT):   rc4 = gterm();
MPRINT(PLOTIT):   if rc1 or rc2 or rc3 or rc4 then do;
MPRINT(PLOTIT):   put 'ERROR: GASK call for XMAX= and YMAX= failed.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = xmax * 100;
MPRINT(PLOTIT):   ymax = ymax * 100;
MPRINT(PLOTIT):   if symget('unit') = 'in' then do;
MPRINT(PLOTIT):   xmax = xmax / 2.54;
MPRINT(PLOTIT):   ymax = ymax / 2.54;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = floor(xmax * 100) / 100;
MPRINT(PLOTIT):   ymax = floor(ymax * 100) / 100;
MPRINT(PLOTIT):   *------max horizontal graph size------;
MPRINT(PLOTIT):   if symget('xmax') = ' ' then call symput('xmax',compress(put(xmax,9.2)));
MPRINT(PLOTIT):   *-------max vertical graph size------;
MPRINT(PLOTIT):   if symget('ymax') = ' ' then call symput('ymax',compress(put(ymax,9.2)));
MPRINT(PLOTIT):   *------construct typical label------;
MPRINT(PLOTIT):   label = symget('label');
MPRINT(PLOTIT):   if label = 'typical' then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar,length(vplotvar),1);
MPRINT(PLOTIT):   ind2 = substr(hplotvar,length(hplotvar),1);
MPRINT(PLOTIT):   if not ('1' <= ind1 <= '9' and '1' <= ind2 <= '9') then label = ' ';
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   do i = length(vplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(vplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   do i = length(hplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(hplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind2 = substr(hplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------for correspondence analysis, ------;
MPRINT(PLOTIT):   *------put inertia percentages in labels------;
MPRINT(PLOTIT):   if labelx = ' ' then do;
MPRINT(PLOTIT):   labely = "Dimension " || compress(ind1);
MPRINT(PLOTIT):   labelx = "Dimension " || compress(ind2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   label = 'label ' || symget('vplotvar') || " = '" || trim(labely) || "' " || symget('hplotvar') || " = '" || trim(labelx) || "'";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------simple, imperfect, label statement check------;
MPRINT(PLOTIT):   label = left(label);
MPRINT(PLOTIT):   if label ne ' ' and compress(label,"'"||'="') = label then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid LABEL statement, LABEL=' label +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   str = upcase(scan(label,1));
MPRINT(PLOTIT):   if str ne 'LABEL' and str ne ' ' then label = 'label ' || label;
MPRINT(PLOTIT):   call symput('label' ,trim(label));
MPRINT(PLOTIT):   *------make sure we have britypes with BRIGHT= specified------;
MPRINT(PLOTIT):   if symget('bright') ne ' ' and symget('britypes') = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Null BRITYPES= is not ' 'permitted ' 'with ' "BRIGHT=.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up search parameters------;
MPRINT(PLOTIT):   ls = symget('ls');
MPRINT(PLOTIT):   if index(ls,'search') then do;
MPRINT(PLOTIT):   ls = scan(ls,1,' ');
MPRINT(PLOTIT):   if ls = 'compute' then search = 'compute';
MPRINT(PLOTIT):   else search = 'ls';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ls = ' ' or ls = 'compute' then ls = '.';
MPRINT(PLOTIT):   if pl = ' ' then place = symget('place');
MPRINT(PLOTIT):   else place = '.';
MPRINT(PLOTIT):   if index(place,'search') then do;
MPRINT(PLOTIT):   search = trim(search) || ' place';
MPRINT(PLOTIT):   place = scan(place,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if place = ' ' then place = '.';
MPRINT(PLOTIT):   *------see if we should store device------;
MPRINT(PLOTIT):   list = upcase(symget('gopprint'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopplot'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts2'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   *------output generated macro variables------;
MPRINT(PLOTIT):   call symput('search' ,trim(search));
MPRINT(PLOTIT):   call symput('ls' ,trim(ls));
MPRINT(PLOTIT):   call symput('place' ,trim(place));
MPRINT(PLOTIT):   call symput('plotopts',trim(plotopts));
MPRINT(PLOTIT):   call symput('plotreq' ,trim(plotreq));
MPRINT(PLOTIT):   call symput('pl' ,trim(pl));
MPRINT(PLOTIT):   call symput('vecheadr',trim(vecheadr));
MPRINT(PLOTIT):   call symput('vecheadw',trim(vecheadw));
MPRINT(PLOTIT):   call symput('device' ,trim(device));
MPRINT(PLOTIT):   *------check some parameters for valid values------;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadr;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadw;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='INC';
MPRINT(PLOTIT):   str=tinc;
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BIPLOT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='SYMLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 22;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='OFFSET';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TICKLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='ANTIIDEA';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -2;
MPRINT(PLOTIT):   max= 2;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CIRSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-4;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CURSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 20;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VTOH';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 3;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAKEFIT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='XMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='YMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='PS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 15;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXITER';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXOKPEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1e9;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BRIGHT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 5;
MPRINT(PLOTIT):   max= 250;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDL';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDR';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDB';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LSINC';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LS';
MPRINT(PLOTIT):   str=ls;
MPRINT(PLOTIT):   min= 64;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   if ls ne '.' then link checkit;
MPRINT(PLOTIT):   opt='PLACE';
MPRINT(PLOTIT):   str=place;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 13;
MPRINT(PLOTIT):   if place ne '.' then link checkit;
MPRINT(PLOTIT):   list = compress(symget('tickaxes'));
MPRINT(PLOTIT):   call symput('tickaxes',trim(list));
MPRINT(PLOTIT):   if compress(list,'LRTBlrtbFh') ne ' ' then do;
MPRINT(PLOTIT):   put "ERROR: TICKAXES=LBFh is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('frame',put(indexc(list,'RTrtF') > 0,1.));
MPRINT(PLOTIT):   if not (symget('unit') in ('in' 'cm')) then do;
MPRINT(PLOTIT):   put "ERROR: UNIT=in is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if scan(symget('lsizes'),5,' ') = ' ' then do;
MPRINT(PLOTIT):   put "ERROR: LSIZES=1 1 1 1 1 must specify five sizes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   checkit: *------check parameter range------;
MPRINT(PLOTIT):   if str ne ' ' then do;
MPRINT(PLOTIT):   param = input(str,?? 32.);
MPRINT(PLOTIT):   if not (min <= param <= max) then do;
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   put 'ERROR: ' opt +(-1) '=' str 'is not valid.  ' 'The valid range is ' min '<= ' opt '<= ' max +(-1) '.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   maketick: *------handle ticks if not already specified------;
MPRINT(PLOTIT):   minor = input(symget(c ||'minor'),?? 32.);
MPRINT(PLOTIT):   if index(upopts,upcase(c) || 'AXIS') = 0 then do;
MPRINT(PLOTIT):   if maxim > 0 then logmax = ceil(log10(maxim));
MPRINT(PLOTIT):   else logmax = .;
MPRINT(PLOTIT):   if minim > 0 then logmin = floor(log10(minim));
MPRINT(PLOTIT):   else logmin = .;
MPRINT(PLOTIT):   *------major ticks for log scale------;
MPRINT(PLOTIT):   if logscal and n(logmin) then do;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || ' ' || c || 'axis=';
MPRINT(PLOTIT):   do i = logmin to logmax;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || '1e' || compress(put(i,4.)) || ',';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   plotopts = substr(plotopts,1,length(plotopts) - 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ordinary major ticks------;
MPRINT(PLOTIT):   else plotopts = trim(plotopts) || ' ' || c || 'axis=by ' || tinc;
MPRINT(PLOTIT):   *------minor ticks------;
MPRINT(PLOTIT):   if minor >= 1 then do;
MPRINT(PLOTIT):   if n(logmax) then do;
MPRINT(PLOTIT):   if logscal then do;
MPRINT(PLOTIT):   maxim = logmax;
MPRINT(PLOTIT):   minim = logmin;
MPRINT(PLOTIT):   i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else i = inc;
MPRINT(PLOTIT):   maxim = ceil(2 + maxim / i) * i;
MPRINT(PLOTIT):   minim = floor(minim / i - 2) * i;
MPRINT(PLOTIT):   call symput(c || 'minor', compress(put(minim,best12.)) || ' to ' || compress(put(maxim,best12.)) || ' by ' || compress(put(i / (minor + 1),best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------number of minor ticks only allowed with inc is known------;
MPRINT(PLOTIT):   else if n(minor) then do;
MPRINT(PLOTIT):   put 'WARNING: Minor ticks are suppressed when HAXIS= ' 'or VAXIS= ' 'is specified ' 'on PLOTOPTS=.';
MPRINT(PLOTIT):   call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *========================preprocessing of data========================;
MPRINT(PLOTIT):   *------preprocess the input data set------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length _symbol_ $ 1 __symbol $ 1 __lfont __lcolor __sfont __scolor __stype __color $ 12 __otype $ 16 __temp $ 60 __excols $ 64;
MPRINT(PLOTIT):   retain __nblank __bblank 0 __oldx __oldy . __color __excols ' ';
MPRINT(PLOTIT):   drop __nblank __bblank __dummy __mrkwrn __nconto __oldx __oldy __excols;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------set the variable labels------;
MPRINT(PLOTIT):   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
MPRINT(PLOTIT):   call label(Dim2, __temp);
MPRINT(PLOTIT):   call symput('labely',trim(__temp));
MPRINT(PLOTIT):   call label(Dim1, __temp);
MPRINT(PLOTIT):   call symput('labelx',trim(__temp));
MPRINT(PLOTIT):   drop __temp;
MPRINT(PLOTIT):   *------output x coordinates for the curve------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *------excluded colors------;
MPRINT(PLOTIT):   __excols = lowcase(symget('excolors'));
MPRINT(PLOTIT):   drop __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   retain __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   array __rou[5] __dummy __roured __rougre __roublu __roupai (-240 1 1 1 .);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up observation type variable------;
MPRINT(PLOTIT):   _type_ = repeat(' ',7);
MPRINT(PLOTIT):   *------preprocess raw data------;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   *------store label/symbol colors, sizes, fonts, types------;
MPRINT(PLOTIT):   array a__ty[1] $ 15 _temporary_ ('CONFIG');
MPRINT(PLOTIT):   __li = 1;
MPRINT(PLOTIT):   drop __li __i;
MPRINT(PLOTIT):   do __i = 1 to 1;
MPRINT(PLOTIT):   _type_ = compress(_type_);
MPRINT(PLOTIT):   __otype = _type_;
MPRINT(PLOTIT):   if _type_ = a__ty[__i] then do;
MPRINT(PLOTIT):   __li = __i;
MPRINT(PLOTIT):   __i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   array a__ls[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__ss[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__lf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__lc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__sf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__sc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__st[1] $ 12 _temporary_ ('circle');
MPRINT(PLOTIT):   array a__sy[1] $ 1 _temporary_ ('*');
MPRINT(PLOTIT):   __lsize = a__ls[__li];
MPRINT(PLOTIT):   __ssize = a__ss[__li];
MPRINT(PLOTIT):   __lfont = a__lf[__li];
MPRINT(PLOTIT):   __lcolor = a__lc[__li];
MPRINT(PLOTIT):   __sfont = a__sf[__li];
MPRINT(PLOTIT):   __scolor = a__sc[__li];
MPRINT(PLOTIT):   __stype = a__st[__li];
MPRINT(PLOTIT):   __symbol = a__sy[__li];
MPRINT(PLOTIT):   if upcase(__sfont) = 'MARKER' and upcase(__stype) = 'CONTOUR' then do;
MPRINT(PLOTIT):   __mrkwrn + 1;
MPRINT(PLOTIT):   __sfont = 'solid';
MPRINT(PLOTIT):   if __mrkwrn = 1 then put 'WARNING: The marker font is obsolete ' 'for contour ' 'plots.  The ' 'SOLID font ' 'will be ' 'used instead.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------assign specialized symbols------;
MPRINT(PLOTIT):   if symget('symvar') = '_symbol_' then do;
MPRINT(PLOTIT):   _symbol_ = __symbol;
MPRINT(PLOTIT):   if __stype in ('vector' 'circle') and _symbol_ = ' ' then _symbol_ = "#";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   _symbol_ = _symbol_;
MPRINT(PLOTIT):   __symbol = _symbol_;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------blank out labels?------;
MPRINT(PLOTIT):   if __lsize = 0 or symget('labelvar') = '_blank_' then _idvar_ = ' ';
MPRINT(PLOTIT):   *------stretch vectors------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *-------count contour observations, determine directions------;
MPRINT(PLOTIT):   if __stype = 'contour' then do;
MPRINT(PLOTIT):   __nconto + 1;
MPRINT(PLOTIT):   if __nconto = 1 then do;
MPRINT(PLOTIT):   __oldx = Dim1;
MPRINT(PLOTIT):   __oldy = Dim2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if __nconto = 2 then do;
MPRINT(PLOTIT):   call symput('hcondir',compress(put(Dim1-__oldx,best8.)));
MPRINT(PLOTIT):   call symput('vcondir',compress(put(Dim2-__oldy,best8.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('ncontour',compress(put(__nconto,best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if __color eq ' ' or index(__excols, trim(lowcase(__color))) = 0;
MPRINT(PLOTIT):   *------adjustments to preprocessed data------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   __xvar = Dim1;
MPRINT(PLOTIT):   __yvar = Dim2;
MPRINT(PLOTIT):   *------are labels all blank?------;
MPRINT(PLOTIT):   if not __nblank then do;
MPRINT(PLOTIT):   if _idvar_ ne ' ' then do;
MPRINT(PLOTIT):   __nblank = 1;
MPRINT(PLOTIT):   call symput('allblank','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------are there obs with both label and symbol blank?------;
MPRINT(PLOTIT):   if not __bblank then do;
MPRINT(PLOTIT):   if _idvar_ = ' ' and _symbol_ = ' ' then do;
MPRINT(PLOTIT):   __bblank = 1;
MPRINT(PLOTIT):   call symput('botblank','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   *------create regression data set for curve fitting------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------separate out obs that will not go through PROC PLOT------;
MPRINT(PLOTIT):   data preproc extraobs;
MPRINT(PLOTIT):   retain __listit 0;
MPRINT(PLOTIT):   length __stype $ 12;
MPRINT(PLOTIT):   *------make sure PROC PLOT scales axes based on min, max------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   __stype = 'dummy';
MPRINT(PLOTIT):   output extraobs;
MPRINT(PLOTIT):   do Dim1 = -0.664602795041, 1.9408723459243;
MPRINT(PLOTIT):   do Dim2 = -0.877403131247, 1.1460156011742;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __stype = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   if "gplot" = "plot" then output preproc;
MPRINT(PLOTIT):   else if _idvar_ = ' ' and __stype in ('vector') then output extraobs;
MPRINT(PLOTIT):   else if _idvar_ ne ' ' or not (0 or (0 and (_symbol_ = ' ' and _idvar_ = ' '))) then do;
MPRINT(PLOTIT):   if __listit = 0 then do;
MPRINT(PLOTIT):   call symput('looklist','1');
MPRINT(PLOTIT):   __listit = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else output extraobs;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find regression function------;
MPRINT(PLOTIT):   *------see if there is anything more than corners in preproc------;
MPRINT(PLOTIT):   *------initpen=0 when nothing to plot, otherwise missing ------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   if _n_ = 0 then set preproc nobs=__nobs;
MPRINT(PLOTIT):   call symput('initpen', scan('0 .', (__nobs > 4) + 1, ' '));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set up iteration parameters------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=========================create printer plot=========================;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length pl $ 200 search $ 24;
MPRINT(PLOTIT):   iternum = 0 + 1;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = .;
MPRINT(PLOTIT):   search = symget('search');
MPRINT(PLOTIT):   ispl = index(search,'place');
MPRINT(PLOTIT):   isls = index(search,'ls');
MPRINT(PLOTIT):   isco = index(search,'compute');
MPRINT(PLOTIT):   *------adjust placement list, line size------;
MPRINT(PLOTIT):   if iternum > 1 then do;
MPRINT(PLOTIT):   if ispl then place = place + 1;
MPRINT(PLOTIT):   if isls then ls = ls + 15;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if isco then ls = round(36 + 29 * iternum - 20 * log(iternum),5);
MPRINT(PLOTIT):   isls = (isls or isco);
MPRINT(PLOTIT):   *------last iteration if we cannot increment------;
MPRINT(PLOTIT):   *------the parameters any more. ------;
MPRINT(PLOTIT):   if (isls and ispl and ls >= 200 and place >= 13) or (isls and not ispl and ls >= 200) or (ispl and not isls and place >= 13) or (not ispl and not isls and not isco) then maxiter = iternum;
MPRINT(PLOTIT):   else maxiter = 15;
MPRINT(PLOTIT):   if ls > 200 then ls = 200;
MPRINT(PLOTIT):   if ls < 64 then ls = 64;
MPRINT(PLOTIT):   actualps = input(symget('ps'),?? 32.);
MPRINT(PLOTIT):   if n(actualps) = 0 then do;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then do;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if nmiss(hsize) then hsize = 8.33;
MPRINT(PLOTIT):   if nmiss(vsize) then vsize = 6.24;
MPRINT(PLOTIT):   actualps = round(ls * (vsize / (hsize * 2)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else actualps = round(10 + ls / vtoh,5);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if actualps > 200 then actualps = 200;
MPRINT(PLOTIT):   *------construct placement list------;
MPRINT(PLOTIT):   if n(place) then do;
MPRINT(PLOTIT):   if place > 13 then place = 13;
MPRINT(PLOTIT):   if place = 0 then pl = '(s=center)';
MPRINT(PLOTIT):   else pl = '(h=2 -2 : s=right left)';
MPRINT(PLOTIT):   if place = 1 then pl = trim(pl) || ' (v=1 * h=0 -1 to -2 by alt)';
MPRINT(PLOTIT):   else if place = 2 then pl = trim(pl) || ' (v=1 -1 * h=0 -1 to -5 by alt)';
MPRINT(PLOTIT):   else if place > 2 then pl = trim(pl) || ' (v=1 to 2 by alt * h=0 -1 to -10 by alt)';
MPRINT(PLOTIT):   if place > 3 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' (s=center right left * v=0 1 to ' || compress(put(place - 2,5.)) || ' by alt * h=0 -1 to ' || compress(put(-3 * (place - 2),5.)) || ' by alt * l= 1 to ' || compress(put(2 + (place - 3.5) / 3,5.)) || ')';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   pl = 'placement=(' || trim(pl) || ')';
MPRINT(PLOTIT):   if place > 4 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' penalty(7)=' || compress(put(1.5 * place,5.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('maxiter' ,compress(put(maxiter,5.)));
MPRINT(PLOTIT):   call symput('iternum' ,compress(put(iternum,5.)));
MPRINT(PLOTIT):   call symput('place' ,compress(put(place,5.)));
MPRINT(PLOTIT):   call symput('ls' ,compress(put(ls,5.)));
MPRINT(PLOTIT):   call symput('actualps',compress(put(actualps,5.)));
MPRINT(PLOTIT):   if pl ne ' ' then call symput('pl',trim(pl));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------initialize data sets because they might not be created------;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   value = .;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat4;
MPRINT(PLOTIT):   retain label symbol startposition ' ' vaxis haxis penalty lines vshift hshift length n vposition hposition 0;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options nonumber ls=65 ps=45;
Sistema SAS
 
MPRINT(PLOTIT):   ods exclude all;
MPRINT(PLOTIT):   proc plot nolegend formchar='|----|+|---'
data=preproc vtoh=2;
MPRINT(PLOTIT):   ods output LocateFacts(nowarn)=tempdat3
Locate(nowarn)=tempdat4 Plot=tempdat5;
MPRINT(PLOTIT):   plot Dim2 * Dim1 $ _idvar_ = _symbol_ /
haxis=by 1 vaxis=by 1 box placement=((h=2 -2 : s=right left)
(v=1 -1 * h=0 -1 to -5 by alt)) list=-1;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   label Dim2 = '#' Dim1 = '#';
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   ods exclude none;
MPRINT(PLOTIT):   ods output close;
MPRINT(PLOTIT):   options NONUMBER ls=256 ps=10000;
MPRINT(PLOTIT):   *------look at the total penalty------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   done = '0';
MPRINT(PLOTIT):   set tempdat3(obs=1 rename=(value=penalty));
MPRINT(PLOTIT):   if n(penalty) & penalty <= 0 then done = '1';
MPRINT(PLOTIT):   iternum = 1;
MPRINT(PLOTIT):   *------print iteration history line------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = 65;
MPRINT(PLOTIT):   actualps = 45;
MPRINT(PLOTIT):   m = floor((256 - 55) / 2);
MPRINT(PLOTIT):   if iternum = 1 then do;
MPRINT(PLOTIT):   put / +m +5 'Iterative Scatter Plot of Labeled Points Macro' /;
MPRINT(PLOTIT):   put +m 'Iteration' +4 'Place' +4 'Line Size' +4 'Page Size' +4 'Penalty';
MPRINT(PLOTIT):   put +m '-------------------------------------------------------';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   m = m - 4;
MPRINT(PLOTIT):   put +m iternum 9. place 11. ls 11. actualps 13. penalty 13.;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iternum >= 15 then done = '1';
MPRINT(PLOTIT):   call symput('done',compress(done));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
 
                                                                                                         Iterative Scatter Plot of Labeled Points Macro
 
                                                                                                    Iteration    Place    Line Size    Page Size    Penalty
                                                                                                    -------------------------------------------------------
                                                                                                        1          2         65           45            1
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length pl $ 200 search $ 24;
MPRINT(PLOTIT):   iternum = 1 + 1;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = 65;
MPRINT(PLOTIT):   search = symget('search');
MPRINT(PLOTIT):   ispl = index(search,'place');
MPRINT(PLOTIT):   isls = index(search,'ls');
MPRINT(PLOTIT):   isco = index(search,'compute');
MPRINT(PLOTIT):   *------adjust placement list, line size------;
MPRINT(PLOTIT):   if iternum > 1 then do;
MPRINT(PLOTIT):   if ispl then place = place + 1;
MPRINT(PLOTIT):   if isls then ls = ls + 15;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if isco then ls = round(36 + 29 * iternum - 20 * log(iternum),5);
MPRINT(PLOTIT):   isls = (isls or isco);
MPRINT(PLOTIT):   *------last iteration if we cannot increment------;
MPRINT(PLOTIT):   *------the parameters any more. ------;
MPRINT(PLOTIT):   if (isls and ispl and ls >= 200 and place >= 13) or (isls and not ispl and ls >= 200) or (ispl and not isls and place >= 13) or (not ispl and not isls and not isco) then maxiter = iternum;
MPRINT(PLOTIT):   else maxiter = 15;
MPRINT(PLOTIT):   if ls > 200 then ls = 200;
MPRINT(PLOTIT):   if ls < 64 then ls = 64;
MPRINT(PLOTIT):   actualps = input(symget('ps'),?? 32.);
MPRINT(PLOTIT):   if n(actualps) = 0 then do;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then do;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if nmiss(hsize) then hsize = 8.33;
MPRINT(PLOTIT):   if nmiss(vsize) then vsize = 6.24;
MPRINT(PLOTIT):   actualps = round(ls * (vsize / (hsize * 2)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else actualps = round(10 + ls / vtoh,5);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if actualps > 200 then actualps = 200;
MPRINT(PLOTIT):   *------construct placement list------;
MPRINT(PLOTIT):   if n(place) then do;
MPRINT(PLOTIT):   if place > 13 then place = 13;
MPRINT(PLOTIT):   if place = 0 then pl = '(s=center)';
MPRINT(PLOTIT):   else pl = '(h=2 -2 : s=right left)';
MPRINT(PLOTIT):   if place = 1 then pl = trim(pl) || ' (v=1 * h=0 -1 to -2 by alt)';
MPRINT(PLOTIT):   else if place = 2 then pl = trim(pl) || ' (v=1 -1 * h=0 -1 to -5 by alt)';
MPRINT(PLOTIT):   else if place > 2 then pl = trim(pl) || ' (v=1 to 2 by alt * h=0 -1 to -10 by alt)';
MPRINT(PLOTIT):   if place > 3 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' (s=center right left * v=0 1 to ' || compress(put(place - 2,5.)) || ' by alt * h=0 -1 to ' || compress(put(-3 * (place - 2),5.)) || ' by alt * l= 1 to ' || compress(put(2 + (place - 3.5) / 3,5.)) || ')';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   pl = 'placement=(' || trim(pl) || ')';
MPRINT(PLOTIT):   if place > 4 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' penalty(7)=' || compress(put(1.5 * place,5.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('maxiter' ,compress(put(maxiter,5.)));
MPRINT(PLOTIT):   call symput('iternum' ,compress(put(iternum,5.)));
MPRINT(PLOTIT):   call symput('place' ,compress(put(place,5.)));
MPRINT(PLOTIT):   call symput('ls' ,compress(put(ls,5.)));
MPRINT(PLOTIT):   call symput('actualps',compress(put(actualps,5.)));
MPRINT(PLOTIT):   if pl ne ' ' then call symput('pl',trim(pl));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------initialize data sets because they might not be created------;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   value = .;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat4;
MPRINT(PLOTIT):   retain label symbol startposition ' ' vaxis haxis penalty lines vshift hshift length n vposition hposition 0;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options nonumber ls=80 ps=50;
Sistema SAS
 
MPRINT(PLOTIT):   ods exclude all;
MPRINT(PLOTIT):   proc plot nolegend formchar='|----|+|---' data=preproc vtoh=2;
MPRINT(PLOTIT):   ods output LocateFacts(nowarn)=tempdat3
Locate(nowarn)=tempdat4 Plot=tempdat5;
MPRINT(PLOTIT):   plot Dim2 * Dim1 $ _idvar_ = _symbol_ / haxis=by 1 vaxis=by 1
box placement=((h=2 -2 : s=right left) (v=1 to 2 by alt * h=0 -1 to -10 by
alt)) list=-1;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   label Dim2 = '#' Dim1 = '#';
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   ods exclude none;
MPRINT(PLOTIT):   ods output close;
MPRINT(PLOTIT):   options NONUMBER ls=256 ps=10000;
MPRINT(PLOTIT):   *------look at the total penalty------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   done = '0';
MPRINT(PLOTIT):   set tempdat3(obs=1 rename=(value=penalty));
MPRINT(PLOTIT):   if n(penalty) & penalty <= 0 then done = '1';
MPRINT(PLOTIT):   iternum = 2;
MPRINT(PLOTIT):   *------print iteration history line------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   place = 3;
MPRINT(PLOTIT):   ls = 80;
MPRINT(PLOTIT):   actualps = 50;
MPRINT(PLOTIT):   m = floor((256 - 55) / 2);
MPRINT(PLOTIT):   if iternum = 1 then do;
MPRINT(PLOTIT):   put / +m +5 'Iterative Scatter Plot of Labeled Points Macro' /;
MPRINT(PLOTIT):   put +m 'Iteration' +4 'Place' +4 'Line Size' +4 'Page Size' +4 'Penalty';
MPRINT(PLOTIT):   put +m '-------------------------------------------------------';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   m = m - 4;
MPRINT(PLOTIT):   put +m iternum 9. place 11. ls 11. actualps 13. penalty 13.;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iternum >= 15 then done = '1';
MPRINT(PLOTIT):   call symput('done',compress(done));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
                                                                                                        2          3         80           50            0
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *======================post-process plot, step 1======================;
MPRINT(PLOTIT):   *------put titles, footnotes in plot------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sql;
MPRINT(PLOTIT):   create view tempdat6 as select * from dictionary.titles;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   set tempdat6 end=eof;
MPRINT(PLOTIT):   if type = 'T' then ntitles + 1;
MPRINT(PLOTIT):   if eof then call symput('ntitles', trim(put(ntitles, 2. -L)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat5(keep=batch);
MPRINT(PLOTIT):   length batch $ 256;
MPRINT(PLOTIT):   if 0 then set tempdat5;
MPRINT(PLOTIT):   set tempdat6(where=(type='T') rename=(text=batch)) tempdat5 tempdat6(where=(type='F') rename=(text=batch));
MPRINT(PLOTIT):   if type = 'F' or type = 'T' then do;
MPRINT(PLOTIT):   i = round((80 - length(batch)) / 2);
MPRINT(PLOTIT):   if i > 1 then do;
MPRINT(PLOTIT):   substr(batch, i) = batch;
MPRINT(PLOTIT):   substr(batch, 1, i - 1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (batch = ' ' and lag(batch) = ' ') then output;
MPRINT(PLOTIT):   if type = 'T' and number = 1 then do;
MPRINT(PLOTIT):   batch = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------start storing locations of lines------;
MPRINT(PLOTIT):   data anno(keep=tx ty comment);
MPRINT(PLOTIT):   length c $ 1 line title $ 256 comment $ 80;
MPRINT(PLOTIT):   retain coln top bottom afterbot nlines xlabline 0 topn botn topextra botextra past 0 vtick1 vtick2 htick1 htick2 . counttop 1 right left col1 labcolum 80 title ' ';
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if xlabline and _n_ > xlabline and not past then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > xlabline + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------initialize------;
MPRINT(PLOTIT):   length = length(line);
MPRINT(PLOTIT):   if line = ' ' then length = 0;
MPRINT(PLOTIT):   comment = 'frame, tick';
MPRINT(PLOTIT):   *------store first title line------;
MPRINT(PLOTIT):   if title = ' ' then title = line;
MPRINT(PLOTIT):   *------find frame location------;
MPRINT(PLOTIT):   if left(line) =: '-' and index(line,'-+-') and substr(line,length,1) = '-' then do;
MPRINT(PLOTIT):   bottom = _n_;
MPRINT(PLOTIT):   if top = 0 then do;
MPRINT(PLOTIT):   top = _n_;
MPRINT(PLOTIT):   left = index(line,'-');
MPRINT(PLOTIT):   right = length;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------flag lines after the bottom line of the plot------;
MPRINT(PLOTIT):   c = substr(line,left,1);
MPRINT(PLOTIT):   if _n_ > top and afterbot = 0 and c = '-' and substr(line,right,1) = '-' then afterbot = 1;
MPRINT(PLOTIT):   else if afterbot then afterbot = afterbot + 1;
MPRINT(PLOTIT):   *------can we drop extra top of the plot lines?------;
MPRINT(PLOTIT):   if top and _n_ > top and not afterbot then do;
MPRINT(PLOTIT):   botn = botn + 1;
MPRINT(PLOTIT):   if c = '+' then do;
MPRINT(PLOTIT):   counttop = 0;
MPRINT(PLOTIT):   botextra = 0;
MPRINT(PLOTIT):   botn = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if counttop then topn = topn + 1;
MPRINT(PLOTIT):   if compress(line,'| ') = ' ' then do;
MPRINT(PLOTIT):   if abs(_n_ - top - 1 - topextra) < 1e-8 then topextra = topextra + 1;
MPRINT(PLOTIT):   botextra = botextra + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output horizontal axis tick mark coordinates------;
MPRINT(PLOTIT):   if afterbot = 1 then do;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   do i = left to right;
MPRINT(PLOTIT):   if substr(line,i,1) = '+' then do;
MPRINT(PLOTIT):   tx = i;
MPRINT(PLOTIT):   if nmiss(htick1) then htick1 = tx;
MPRINT(PLOTIT):   else if nmiss(htick2) then htick2 = tx;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------find last line in plot region------;
MPRINT(PLOTIT):   if afterbot > 2 and not past then do;
MPRINT(PLOTIT):   past = (index(line,"*** Wrapped Listing of Point Locations ***") or index(line,title));
MPRINT(PLOTIT):   if length and not past then do;
MPRINT(PLOTIT):   nlines = _n_;
MPRINT(PLOTIT):   *------find x-axis label line------;
MPRINT(PLOTIT):   if compress(line) = '#' then do;
MPRINT(PLOTIT):   xlabline = _n_;
MPRINT(PLOTIT):   *------check for vertically printing ticks------;
MPRINT(PLOTIT):   if not (afterbot = 3 or afterbot = 4) then do;
MPRINT(PLOTIT):   put 'WARNING: Ticks may be printing vertically.  ' 'The plot may be wrong.';
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   call symput('intrls' ,'1');
MPRINT(PLOTIT):   call symput('intrtick','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------first, last nonblank column, label column------;
MPRINT(PLOTIT):   if nlines = 0 and length then do;
MPRINT(PLOTIT):   coln = max(coln,length);
MPRINT(PLOTIT):   i = length + 1 - length(left(line));
MPRINT(PLOTIT):   col1 = min(col1,i);
MPRINT(PLOTIT):   if top then labcolum = min(labcolum,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output vertical axis tick mark coordinates------;
MPRINT(PLOTIT):   if top and substr(line,left,1) = '+' then do;
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = _n_;
MPRINT(PLOTIT):   if nmiss(vtick1) then vtick1 = ty;
MPRINT(PLOTIT):   else if nmiss(vtick2) then vtick2 = ty;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------on last observation, output results to macro variables------;
MPRINT(PLOTIT):   if past or eof then do;
MPRINT(PLOTIT):   *------check VTOH=------;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then vtoh = 2;
MPRINT(PLOTIT):   else if n(htick1,htick2,vtick1,vtick2) = 4 then do;
MPRINT(PLOTIT):   vtoh = vtick2 - vtick1;
MPRINT(PLOTIT):   if vtoh > 1e-8 then vtoh = (htick2 - htick1) / vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put vtoh= vtick2= vtick1= htick2= htick1=;
MPRINT(PLOTIT):   call symput('vtoh',compress(put(vtoh,best15.)));
MPRINT(PLOTIT):   *------size of plot parameters------;
MPRINT(PLOTIT):   ls = coln - col1 + 1;
MPRINT(PLOTIT):   left = left - col1 + 1;
MPRINT(PLOTIT):   right = right - col1 + 1;
MPRINT(PLOTIT):   labcolum = labcolum - col1 + 1;
MPRINT(PLOTIT):   hpos = ls + 0.5 * (1.0 + abs(1.5));
MPRINT(PLOTIT):   vpos = nlines + 1;
MPRINT(PLOTIT):   uhpos = input(symget('hpos'),?? 32.);
MPRINT(PLOTIT):   if n(uhpos) then do;
MPRINT(PLOTIT):   if uhpos < hpos then do;
MPRINT(PLOTIT):   put "ERROR: HPOS= is too small.  " 'The default ' 'minimum for ' 'this plot is ' hpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else hpos = uhpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   uvpos = input(symget('vpos'),?? 32.);
MPRINT(PLOTIT):   if n(uvpos) then do;
MPRINT(PLOTIT):   if uvpos < vpos then do;
MPRINT(PLOTIT):   put "ERROR: VPOS= is too small.  " 'The electronics' 'minimum for ' 'this plot is ' vpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else vpos = uvpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   hpos = ceil(hpos);
MPRINT(PLOTIT):   vpos = ceil(vpos);
MPRINT(PLOTIT):   *------scale plot to use MAKEFIT= proportion of area------;
MPRINT(PLOTIT):   makefit1 = input(symget('makefit'),?? 32.);
MPRINT(PLOTIT):   makefit = makefit1;
MPRINT(PLOTIT):   *------makefit value can be changed inside this loop------;
MPRINT(PLOTIT):   do until(itfits);
MPRINT(PLOTIT):   itfits = 1;
MPRINT(PLOTIT):   *------determine hsize and vsize------;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if n(vsize) and nmiss(hsize) then hsize = hpos * vsize / (vpos * vtoh);
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if n(hsize) = 0 then hsize = 8.33;
MPRINT(PLOTIT):   if n(vsize) = 0 then vsize = (vpos / hpos) * hsize * vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *-------scale sizes so plot fits in specified area------;
MPRINT(PLOTIT):   if n(makefit) then do;
MPRINT(PLOTIT):   scale = max(hsize / (abs(makefit) * (8.33)), vsize / (abs(makefit) * (6.24)));
MPRINT(PLOTIT):   if scale > 1.0 then do;
MPRINT(PLOTIT):   hsize = hsize / scale;
MPRINT(PLOTIT):   vsize = vsize / scale;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------add extra positions to center plot, extend axes------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'),?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'),?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'),?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'),?? 32.);
MPRINT(PLOTIT):   setlr = (nmiss(extendl,extendr) = 2 and not 0);
MPRINT(PLOTIT):   settb = (nmiss(extendt,extendb) = 2 and not 0);
MPRINT(PLOTIT):   *------centering, compute horizontal, vertical offsets------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   hposoff = max(0.5 * ((8.33) - hsize) / (hsize / hpos), 0);
MPRINT(PLOTIT):   vposoff = max(0.5 * ((6.24) - vsize) / (vsize / vpos), 0);
MPRINT(PLOTIT):   hsize = 8.33;
MPRINT(PLOTIT):   vsize = 6.24;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   vposoff = 0;
MPRINT(PLOTIT):   hposoff = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------can we extend the left and right axes a little?------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   extendl = max(min(hposoff - 2.5, 2), 0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------even the top and bottom extra positions------;
MPRINT(PLOTIT):   if settb and topn > botn then do;
MPRINT(PLOTIT):   i = topn - botn;
MPRINT(PLOTIT):   if i <= topextra then extendt = -i;
MPRINT(PLOTIT):   else extendb = i;
MPRINT(PLOTIT):   i = -0.5 * sum(extendb,extendt);
MPRINT(PLOTIT):   if i > 0 then do;
MPRINT(PLOTIT):   extendb = sum(extendb,i);
MPRINT(PLOTIT):   extendt = sum(extendt,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set the extend variables if not set yet------;
MPRINT(PLOTIT):   if nmiss(extendt) then extendt = 0;
MPRINT(PLOTIT):   if nmiss(extendl) then extendl = 0;
MPRINT(PLOTIT):   if nmiss(extendr) then extendr = 0;
MPRINT(PLOTIT):   if nmiss(extendb) then extendb = 0;
MPRINT(PLOTIT):   *------make the plot square------;
MPRINT(PLOTIT):   if 0 and not 0 then do;
MPRINT(PLOTIT):   *------first try to adjust the left and right------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   setlr = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / 2;
MPRINT(PLOTIT):   extendl = extendl - setlr;
MPRINT(PLOTIT):   extendl = max(min(extendl,hposoff - 2.5),0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------next try to adjust the top and bottom------;
MPRINT(PLOTIT):   if settb then do;
MPRINT(PLOTIT):   settb = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / (-2 * vtoh);
MPRINT(PLOTIT):   extendt = extendt - settb;
MPRINT(PLOTIT):   extendb = extendb - settb;
MPRINT(PLOTIT):   if -extendt > topextra then extendt = -topextra;
MPRINT(PLOTIT):   if -extendb > botextra then extendb = -botextra;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check to see if we succeeded, should be zero------;
MPRINT(PLOTIT):   setlr = (right - left + extendr + extendl) - vtoh * (bottom - top + extendt + extendb);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if the plot fits, otherwise try again------;
MPRINT(PLOTIT):   if n(makefit) and makefit < 0 and not 0 and ((0 and abs(setlr) > (1e-8 * hpos)) or (1 and (((extendl + extendr) > (2 * hposoff - 2.5)) or ((extendt + extendb) > (2 * vposoff - 0.25))))) and makefit <= 0.75 * makefit1 then do;
MPRINT(PLOTIT):   makefit = makefit * 0.99;
MPRINT(PLOTIT):   itfits = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------warn if we changed MAKEFIT= to make the plot square------;
MPRINT(PLOTIT):   if n(makefit) and abs(makefit - makefit1) > 1e-8 then put 'WARNING: MAKEFIT=' makefit 'was used ' 'to make ' 'the plot ' 'fit.';
MPRINT(PLOTIT):   * put extendt= extendb= extendl= extendr= vtoh= hposoff= vposoff=;
MPRINT(PLOTIT):   *------override electronics positions------;
MPRINT(PLOTIT):   if n(uhpos) then hposoff = 0;
MPRINT(PLOTIT):   else hpos = ceil(hpos + 2.0 * hposoff);
MPRINT(PLOTIT):   if n(uvpos) then vposoff = 0;
MPRINT(PLOTIT):   else vpos = ceil(vpos + 2.0 * vposoff);
MPRINT(PLOTIT):   *------output plot size parameters------;
MPRINT(PLOTIT):   call symput('col1', compress(put(col1,5.0)));
MPRINT(PLOTIT):   call symput('actualls', compress(put(ls,5.0)));
MPRINT(PLOTIT):   call symput('nlines', compress(put(nlines,5.0)));
MPRINT(PLOTIT):   call symput('top', compress(put(top,5.0)));
MPRINT(PLOTIT):   call symput('bottom', compress(put(bottom,5.0)));
MPRINT(PLOTIT):   call symput('left', compress(put(left,5.0)));
MPRINT(PLOTIT):   call symput('right', compress(put(right,5.0)));
MPRINT(PLOTIT):   call symput('labcolum', compress(put(labcolum,5.0)));
MPRINT(PLOTIT):   call symput('xlabline', compress(put(xlabline,5.0)));
MPRINT(PLOTIT):   call symput('hposoff', compress(put(hposoff,7.1)));
MPRINT(PLOTIT):   call symput('vposoff', compress(put(vposoff,7.1)));
MPRINT(PLOTIT):   call symput('hpos', compress(put(hpos,9.0)));
MPRINT(PLOTIT):   call symput('vpos', compress(put(vpos,9.0)));
MPRINT(PLOTIT):   call symput('hsize', compress(put(hsize,9.2)));
MPRINT(PLOTIT):   call symput('vsize', compress(put(vsize,9.2)));
MPRINT(PLOTIT):   call symput('extendl', compress(put(extendl,9.2)));
MPRINT(PLOTIT):   call symput('extendr', compress(put(extendr,9.2)));
MPRINT(PLOTIT):   call symput('extendt', compress(put(extendt,9.2)));
MPRINT(PLOTIT):   call symput('extendb', compress(put(extendb,9.2)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=======================post-process plot, step 2======================;
MPRINT(PLOTIT):   data tempdat1(keep=function x y text angle position comment color size style n __xvar __yvar __otype) tempdat2(keep=tx ty comment _radius_ color size style n __xvar __yvar);
MPRINT(PLOTIT):   length text line label $ 256 function color style $ 8 position symbol $ 1 comment $ 80;
MPRINT(PLOTIT):   retain style ' ';
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   color = ' ';
MPRINT(PLOTIT):   size = .;
MPRINT(PLOTIT):   *------read the plot------;
MPRINT(PLOTIT):   if _n_ <= 43 then do;
MPRINT(PLOTIT):   comment = 'text';
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if _n_ > 41 then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > 41 + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   line = substr(line, 5, 72);
MPRINT(PLOTIT):   *------is this an axis line?------;
MPRINT(PLOTIT):   istop = (_n_ = 3);
MPRINT(PLOTIT):   isbot = (_n_ = 38);
MPRINT(PLOTIT):   *------set the y-axis label------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 38 and substr(line,1,1) = '#' then substr(line,1,1) = ' ';
MPRINT(PLOTIT):   if _n_ = 43 then do;
MPRINT(PLOTIT):   y = ((2 * 43) - 3 - 38) / 2;
MPRINT(PLOTIT):   x = 1;
MPRINT(PLOTIT):   text = symget('labely');
MPRINT(PLOTIT):   if 24.8 > 1 then x = x - 0.5;
MPRINT(PLOTIT):   if length(text) > 1 then angle = 90;
MPRINT(PLOTIT):   comment = 'text, y label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   angle = 0;
MPRINT(PLOTIT):   *------remove stuff in the plot------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 38 then substr(line,6,72 - 6 + 1) = ' ';
MPRINT(PLOTIT):   *------output ticks, titles, and so on------;
MPRINT(PLOTIT):   y = 43 - _n_;
MPRINT(PLOTIT):   do iwhile = 1 to 80 while(line ne ' ');
MPRINT(PLOTIT):   i = length(line) - length(left(line)) + 1;
MPRINT(PLOTIT):   text = substr(line,i,1);
MPRINT(PLOTIT):   *------isolate and process one label------;
MPRINT(PLOTIT):   if text ne ' ' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   x = i;
MPRINT(PLOTIT):   *------special handling of title lines, xaxis label------;
MPRINT(PLOTIT):   if _n_ < 3 or _n_ >= 41 then do;
MPRINT(PLOTIT):   text = left(line);
MPRINT(PLOTIT):   i = 72 + 1;
MPRINT(PLOTIT):   line = ' ';
MPRINT(PLOTIT):   x = (6 + 72) / 2.0;
MPRINT(PLOTIT):   *------special handling of title lines------;
MPRINT(PLOTIT):   if _n_ < 3 then do;
MPRINT(PLOTIT):   comment = 'text, title';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------footnotes------;
MPRINT(PLOTIT):   else if _n_ > 41 then do;
MPRINT(PLOTIT):   comment = 'text, footnote';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle x-axis label------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   text = symget('labelx');
MPRINT(PLOTIT):   comment = 'text, x label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle label outside the plot, not title------;
MPRINT(PLOTIT):   else if i < 6 or _n_ > 38 then do;
MPRINT(PLOTIT):   do j = i + 1 to 72 until(done);
MPRINT(PLOTIT):   done = substr(line,j,1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   text = substr(line,i,j - i + 1);
MPRINT(PLOTIT):   substr(line,i,j - i + 1) = ' ';
MPRINT(PLOTIT):   *------handle ticks------;
MPRINT(PLOTIT):   position = '<';
MPRINT(PLOTIT):   x = i + length(text) - 1;
MPRINT(PLOTIT):   if j < 6 then comment = 'text, y tick';
MPRINT(PLOTIT):   else if _n_ < 41 then do;
MPRINT(PLOTIT):   comment = 'text, x tick';
MPRINT(PLOTIT):   *------tweak the placement a tad with new options------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else comment = 'text, other';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put i= text= position=;
MPRINT(PLOTIT):   *------output label------;
MPRINT(PLOTIT):   if text ne ' ' then output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iwhile >= 80 and symget('abort') ne '1' then do;
MPRINT(PLOTIT):   put 'ERROR: The frame location algorithm is confused.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------bring in the extra observations------;
MPRINT(PLOTIT):   eofextra = 0;
MPRINT(PLOTIT):   p = '+';
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   vshift = .;
MPRINT(PLOTIT):   hshift = .;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   lines = 0;
MPRINT(PLOTIT):   do while(not eofextra);
MPRINT(PLOTIT):   set extraobs(keep=__: _radius_) end=eofextra;
MPRINT(PLOTIT):   comment = 'extra,';
MPRINT(PLOTIT):   if n(__xvar,__yvar) = 2 then link process;
MPRINT(PLOTIT):   n = n + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------determine point count------;
MPRINT(PLOTIT):   set tempdat3(firstobs=2 rename=(value=npoints));
MPRINT(PLOTIT):   if nmiss(npoints) then do;
MPRINT(PLOTIT):   npoints = 0;
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   sumh = 0;
MPRINT(PLOTIT):   sumv = 0;
MPRINT(PLOTIT):   sumx = 0;
MPRINT(PLOTIT):   sumy = 0;
MPRINT(PLOTIT):   sumx2 = 0;
MPRINT(PLOTIT):   sumy2 = 0;
MPRINT(PLOTIT):   sumxh = 0;
MPRINT(PLOTIT):   sumyv = 0;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   midh = 72 / 2;
MPRINT(PLOTIT):   midv = 50 / 2;
MPRINT(PLOTIT):   midx = (1.9408723459243 + -0.664602795041) / 2;
MPRINT(PLOTIT):   midy = (1.1460156011742 + -0.877403131247) / 2;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   do pointn = 1 to npoints;
MPRINT(PLOTIT):   link getlabel;
MPRINT(PLOTIT):   ty = vpositio;
MPRINT(PLOTIT):   tx = hpositio;
MPRINT(PLOTIT):   comment = 'list,';
MPRINT(PLOTIT):   if _error_ = 1 then put _all_;
MPRINT(PLOTIT):   if startpos = 'Center' then p = '+';
MPRINT(PLOTIT):   else if startpos = 'Left' then p = '<';
MPRINT(PLOTIT):   else p = '>';
MPRINT(PLOTIT):   text = symbol;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   set preproc(keep=__: _radius_) point=i;
MPRINT(PLOTIT):   link process;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------least-squares slope and intercept------;
MPRINT(PLOTIT):   b = .;
MPRINT(PLOTIT):   a = .;
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = sumx - nobs * midx;
MPRINT(PLOTIT):   b = nobs * sumx2 - d * d;
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumxh - d * (sumh - nobs * midh)) / b;
MPRINT(PLOTIT):   a = sumh / nobs - b * sumx / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = (sumy - nobs * midy);
MPRINT(PLOTIT):   b = (nobs * sumy2 - d * d);
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumyv - d * (sumv - nobs * midv)) / b;
MPRINT(PLOTIT):   a = sumv / nobs - b * sumy / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   process: *------handle a point in the plot------;
MPRINT(PLOTIT):   type = __stype;
MPRINT(PLOTIT):   if n(tx) then do;
MPRINT(PLOTIT):   tx = tx + 6 + 1;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(ty) then do;
MPRINT(PLOTIT):   ty = ty + 1 + 43 - 38;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   colorset = 0;
MPRINT(PLOTIT):   *------random colors------;
MPRINT(PLOTIT):   *------store full label------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   line = label;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   line = compress('('||type||',') || ' ' || compress(put(n,5.)||')');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set colors, sizes, and so on for symbols------;
MPRINT(PLOTIT):   if not colorset then color = __scolor;
MPRINT(PLOTIT):   size = __ssize;
MPRINT(PLOTIT):   style = __sfont;
MPRINT(PLOTIT):   if text = 'NONE' then text = ' ';
MPRINT(PLOTIT):   if __symbol ne '00'x then text = __symbol;
MPRINT(PLOTIT):   if type = 'contour' then function = 'BAR';
MPRINT(PLOTIT):   else if type = 'square' then function = 'SYMBOL';
MPRINT(PLOTIT):   else function = 'LABEL';
MPRINT(PLOTIT):   *------output list info to lines data set------;
MPRINT(PLOTIT):   if type =: 'vector' or type =: 'circle' then do;
MPRINT(PLOTIT):   comment = trim(comment) || ' ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output list info to text data set------;
MPRINT(PLOTIT):   if (text ne ' ' and type ne 'dummy') or type = 'contour' or type = 'function' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------intermediate results for slope, intercept------;
MPRINT(PLOTIT):   if n(tx,ty,__xvar,__yvar) = 4 then do;
MPRINT(PLOTIT):   sumh = sumh + tx;
MPRINT(PLOTIT):   sumv = sumv + ty;
MPRINT(PLOTIT):   sumx = sumx + __xvar;
MPRINT(PLOTIT):   sumy = sumy + __yvar;
MPRINT(PLOTIT):   d = __xvar - midx;
MPRINT(PLOTIT):   sumx2 = sumx2 + d * d;
MPRINT(PLOTIT):   sumxh = sumxh + (tx - midh) * d;
MPRINT(PLOTIT):   d = __yvar - midy;
MPRINT(PLOTIT):   sumy2 = sumy2 + d * d;
MPRINT(PLOTIT):   sumyv = sumyv + (ty - midv) * d;
MPRINT(PLOTIT):   nobs = nobs + 1;
MPRINT(PLOTIT):   * put sumh= tx= sumv= ty= sumx= __xvar= sumy= __yvar= midx= sumx2= sumxh= midy= sumy2= sumyv= nobs=;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle the label fragments------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   if not colorset then color = __lcolor;
MPRINT(PLOTIT):   size = __lsize;
MPRINT(PLOTIT):   style = __lfont;
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   position = p;
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, label, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   shift = floor(1e-8 + (lines - 1) / 2);
MPRINT(PLOTIT):   do i = 1 to lines;
MPRINT(PLOTIT):   if lines > 1 then link getlabel;
MPRINT(PLOTIT):   text = label;
MPRINT(PLOTIT):   if text ne ' ' and type ne 'dummy' then do;
MPRINT(PLOTIT):   x = tx + hshift;
MPRINT(PLOTIT):   y = 1 + ty + vshift + shift - i;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getlabel: set tempdat4(keep=lines symbol n label vshift hshift vposition hposition startposition rename=(startposition=startpos vposition=vpositio hposition=hpositio));
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete extraobs;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------tick mark based slope and intercept------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   merge anno(where=(index(substr(comment,1,12),'tick')) keep=ty tx comment) tempdat1(where=(index(comment,'tick')) keep=text comment);
MPRINT(PLOTIT):   if n(ty) then ty = 43 - ty;
MPRINT(PLOTIT):   data = input(text,?? 32.);
MPRINT(PLOTIT):   if (0 and n(tx)) or (0 and n(ty)) then do;
MPRINT(PLOTIT):   if data > 0 then data = log10(data);
MPRINT(PLOTIT):   else data = .;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   oldty = lag(ty);
MPRINT(PLOTIT):   oldtx = lag(tx);
MPRINT(PLOTIT):   olddata = lag(data);
MPRINT(PLOTIT):   if n(data,olddata) = 2 then do;
MPRINT(PLOTIT):   den = data - olddata;
MPRINT(PLOTIT):   if abs(den) > 1e-8 then do;
MPRINT(PLOTIT):   if n(oldty,ty) = 2 then do;
MPRINT(PLOTIT):   b = (ty - oldty) / den;
MPRINT(PLOTIT):   a = ty - b * data;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(oldtx,tx) = 2 then do;
MPRINT(PLOTIT):   b = (tx - oldtx) / den;
MPRINT(PLOTIT):   a = tx - b * data - 5 + 1;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------switch top and bottom to annotate coordinates------;
MPRINT(PLOTIT):   *------make goptions statement------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=================create annotate data set with lines=================;
MPRINT(PLOTIT):   data anno(keep=function x y comment color size style n);
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length text $ 256 comment $ 100 function color style $ 8;
MPRINT(PLOTIT):   retain curven -1 tickaxes "LBFh" vtoh 2 vinter 17 hinter 29 hslope 20 vslope 10 hmax 1.9408723459243 vmax 1.1460156011742 vmin -0.877403131247 hmin -0.664602795041 singular 1e-8 left 6 right 72 top 40 bottom 5;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------check slope, intercept------;
MPRINT(PLOTIT):   if n(hinter,vinter,hslope,vslope) ne 4 then do;
MPRINT(PLOTIT):   put 'ERROR: Plot algorithm failed.  ' 'Coordinates could ' 'not be ' 'computed.  ' 'Vertically printing ' 'ticks is a ' 'possible cause.  ' 'Another ' 'explanation ' 'is no locate list ' 'was available.  ' 'Look ' 'at the ' 'printer plot
' 'to check.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------how far should plot be extended?------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'), ?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'), ?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'), ?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'), ?? 32.);
MPRINT(PLOTIT):   *------rectangle sizes for contour plots------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then vcontour = abs(vslope) * (vmax - vmin) / nobs;
MPRINT(PLOTIT):   else vcontour = .;
MPRINT(PLOTIT):   call symput('vcontour',compress(put(vcontour,best15.)));
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then hcontour = abs(hslope) * (hmax - hmin) / nobs;
MPRINT(PLOTIT):   else hcontour = .;
MPRINT(PLOTIT):   call symput('hcontour',compress(put(hcontour,best15.)));
MPRINT(PLOTIT):   *------optionally close up all white space------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   if n(hcontour) then do;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin - 0.5 * hcontour);
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax + 0.5 * hcontour) - right;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(vcontour) then do;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax + 0.5 * vcontour) - top;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin - 0.5 * vcontour);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------optionally close up white space with square contours------;
MPRINT(PLOTIT):   if 0 and 0 and not 0 then do;
MPRINT(PLOTIT):   contour = 1 * 0.5;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin) + vtoh * contour;
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax) - right + vtoh * contour;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax) - top + contour;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin) + contour;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   call symput('extendl',compress(put(extendl,best15.)));
MPRINT(PLOTIT):   call symput('extendr',compress(put(extendr,best15.)));
MPRINT(PLOTIT):   call symput('extendt',compress(put(extendt,best15.)));
MPRINT(PLOTIT):   call symput('extendb',compress(put(extendb,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------final locations of the axes------;
MPRINT(PLOTIT):   left = left - extendl;
MPRINT(PLOTIT):   right = right + extendr;
MPRINT(PLOTIT):   top = top + extendt;
MPRINT(PLOTIT):   bottom = bottom - extendb;
MPRINT(PLOTIT):   *------frame background color------;
MPRINT(PLOTIT):   color = 'cxffffff';
MPRINT(PLOTIT):   size = 1;
MPRINT(PLOTIT):   style = 'msolid';
MPRINT(PLOTIT):   function = 'POLY';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, background, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'POLYCONT';
MPRINT(PLOTIT):   comment = 'frame, background, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   *------draw frame------;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, box, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'frame, box, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   comment = 'frame, box, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------diagonal reference line------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   comment = 'frame, diag, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, diag, right top';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------vertical axis reference lines------;
MPRINT(PLOTIT):   *------horizontal axis reference lines------;
MPRINT(PLOTIT):   *------vertical axis minor tick marks------;
MPRINT(PLOTIT):   *------horizontal axis minor tick marks------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat2(in=td2);
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td2 and not (comment =: 'frame');
MPRINT(PLOTIT):   if i or (nmiss(tx) and n(__xvar)) then tx = hinter + hslope * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(ty) and n(__yvar)) then ty = vinter + vslope * __yvar;
MPRINT(PLOTIT):   *------figure out curve coordinates------;
MPRINT(PLOTIT):   if comment = 'frame, tick' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[2];
MPRINT(PLOTIT):   halftick = 0.5 * abs(1.5);
MPRINT(PLOTIT):   ticklen = (1 + (1.5 > 0)) * halftick;
MPRINT(PLOTIT):   if index(tickaxes,'h') then ticklen = ticklen / 2;
MPRINT(PLOTIT):   *------adjust for blank cols------;
MPRINT(PLOTIT):   if n(tx) then tx = tx - 5 + 1;
MPRINT(PLOTIT):   *------draw y-axis tick marks------;
MPRINT(PLOTIT):   if nmiss(tx) then do;
MPRINT(PLOTIT):   y = 43 - ty;
MPRINT(PLOTIT):   if bottom <= y <= top then do;
MPRINT(PLOTIT):   if index(tickaxes,'L') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, left';
MPRINT(PLOTIT):   x = left - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'R') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, right';
MPRINT(PLOTIT):   x = right + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw x-axis tick marks------;
MPRINT(PLOTIT):   else if nmiss(ty) then do;
MPRINT(PLOTIT):   halftick = halftick / vtoh;
MPRINT(PLOTIT):   ticklen = ticklen / vtoh;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   if left <= x <= right then do;
MPRINT(PLOTIT):   if index(tickaxes,'T') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, top';
MPRINT(PLOTIT):   y = top + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'B') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, bottom';
MPRINT(PLOTIT):   y = bottom - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw vectors------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'vector') then do;
MPRINT(PLOTIT):   size = lsizes[3];
MPRINT(PLOTIT):   x = hinter;
MPRINT(PLOTIT):   y = vinter;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = index(comment,'vector');
MPRINT(PLOTIT):   comment = substr(comment,1,r + 7) || 'head,' || substr(comment,r + 7);
MPRINT(PLOTIT):   *------compute slope of vector------;
MPRINT(PLOTIT):   vecslope = tx - hinter;
MPRINT(PLOTIT):   if abs(vecslope) > singular then vecslope = (ty - vinter) / (vecslope / vtoh);
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------find point on vector vecheadr distance from end------;
MPRINT(PLOTIT):   r = -0.1;
MPRINT(PLOTIT):   fromx = tx;
MPRINT(PLOTIT):   fromy = ty;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   fromx = tox;
MPRINT(PLOTIT):   fromy = toy;
MPRINT(PLOTIT):   *------slope of line perpendicular to vector------;
MPRINT(PLOTIT):   if nmiss(vecslope) then vecslope = 0;
MPRINT(PLOTIT):   else if abs(vecslope) > singular then vecslope = -1.0 / vecslope;
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------draw vector head------;
MPRINT(PLOTIT):   r = -0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = 0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw circles------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'circle') then do;
MPRINT(PLOTIT):   size = lsizes[4];
MPRINT(PLOTIT):   comsplit = 15 + (comment =: 'extra');
MPRINT(PLOTIT):   holdcom = comment;
MPRINT(PLOTIT):   pi = 3.1415926536;
MPRINT(PLOTIT):   do rad = _radius_;
MPRINT(PLOTIT):   radius = max(rad, 0) * hslope;
MPRINT(PLOTIT):   comment = substr(holdcom,1,comsplit - 1) || compress(put(rad,best5.) || ',') || ' ' || compress('(' || put(__xvar,best5.) || ',' || put(__yvar,best5.) || '),') || ' ' || substr(holdcom,comsplit);
MPRINT(PLOTIT):   i = (8.33) / (124);
MPRINT(PLOTIT):   if "in" = 'cm' then i = i / 2.54;
MPRINT(PLOTIT):   inc = 2.0 * pi / ceil(20 + (2.0 * pi * radius * i / .1) ** 0.8);
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   seg0 = (inc * singular) ** 2;
MPRINT(PLOTIT):   do i = -pi + inc to pi by inc;
MPRINT(PLOTIT):   x1 = tx + cos(i - inc) * radius;
MPRINT(PLOTIT):   y1 = ty + sin(i - inc) * radius / vtoh;
MPRINT(PLOTIT):   x2 = tx + cos(i) * radius;
MPRINT(PLOTIT):   y2 = ty + sin(i) * radius / vtoh;
MPRINT(PLOTIT):   link clipline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   linept: *------find a point (tox,toy) r distance from ------;
MPRINT(PLOTIT):   *------(fromx,fromy) on a line with slope vecslope------;
MPRINT(PLOTIT):   *------negative r means toward origin ------;
MPRINT(PLOTIT):   r = r * (124) / (8.33);
MPRINT(PLOTIT):   if "in" = 'cm' then r = r * 2.54;
MPRINT(PLOTIT):   vecdir = -sign(r);
MPRINT(PLOTIT):   if n(vecslope) then do;
MPRINT(PLOTIT):   vecm2 = sqrt(r * r / (1.0 + vecslope * vecslope));
MPRINT(PLOTIT):   if fromx > hinter then vecm2 = -vecm2;
MPRINT(PLOTIT):   tox = vecdir * vecm2 + fromx;
MPRINT(PLOTIT):   toy = vecdir * vecslope * vecm2 / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   tox = fromx;
MPRINT(PLOTIT):   if fromy > vinter then vecdir = -vecdir;
MPRINT(PLOTIT):   toy = vecdir * abs(r) / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   clipline: *------clip a line that crosses an edge------;
MPRINT(PLOTIT):   *------find where line crosses edges------;
MPRINT(PLOTIT):   b = (x2 - x1);
MPRINT(PLOTIT):   bi = (y2 - y1);
MPRINT(PLOTIT):   xtop = .;
MPRINT(PLOTIT):   xbottom = .;
MPRINT(PLOTIT):   yleft = .;
MPRINT(PLOTIT):   yright = .;
MPRINT(PLOTIT):   if abs(b) > singular then do;
MPRINT(PLOTIT):   b = (y2 - y1) / b;
MPRINT(PLOTIT):   a = y1 - b * x1;
MPRINT(PLOTIT):   yleft = b * left + a;
MPRINT(PLOTIT):   yright = b * right + a;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if abs(bi) > singular then do;
MPRINT(PLOTIT):   bi = (x2 - x1) / bi;
MPRINT(PLOTIT):   xtop = (top - y1) * bi + x1;
MPRINT(PLOTIT):   xbottom = (bottom - y1) * bi + x1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust coordinates when line crosses edges------;
MPRINT(PLOTIT):   if x1 < left then do;
MPRINT(PLOTIT):   x1 = left;
MPRINT(PLOTIT):   y1 = yleft;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x1 > right then do;
MPRINT(PLOTIT):   x1 = right;
MPRINT(PLOTIT):   y1 = yright;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 < bottom then do;
MPRINT(PLOTIT):   y1 = bottom;
MPRINT(PLOTIT):   x1 = xbottom;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 > top then do;
MPRINT(PLOTIT):   y1 = top;
MPRINT(PLOTIT):   x1 = xtop;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 < left then do;
MPRINT(PLOTIT):   x2 = left;
MPRINT(PLOTIT):   y2 = yleft;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 > right then do;
MPRINT(PLOTIT):   x2 = right;
MPRINT(PLOTIT):   y2 = yright;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 < bottom then do;
MPRINT(PLOTIT):   y2 = bottom;
MPRINT(PLOTIT):   x2 = xbottom;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 > top then do;
MPRINT(PLOTIT):   y2 = top;
MPRINT(PLOTIT):   x2 = xtop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if segment should be output------;
MPRINT(PLOTIT):   if n(x1,x2,y1,y2) = 4 and ((x2 - x1) ** 2 + (y2 - y1) ** 2) > seg0 then do;
MPRINT(PLOTIT):   *------draw line------;
MPRINT(PLOTIT):   if not justdraw then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   justdraw = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else justdraw = 0;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat2 regdat;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *======================combine annotate data sets======================;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   keep color style function comment x y size text position angle n obstype;
MPRINT(PLOTIT):   length color style function $ 8 comment $ 100 x y size 8 text $ 72 position $ 1 angle n 8 obstype $ 12 excolors $ 64;
MPRINT(PLOTIT):   retain left right top bottom contok conoldx conoldy excolors;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   left = 6 - 2.00;
MPRINT(PLOTIT):   right = 72 + 2.00;
MPRINT(PLOTIT):   top = 40 + -0.50;
MPRINT(PLOTIT):   bottom = 5 - 0.50;
MPRINT(PLOTIT):   contok = (n(0,0) = 2);
MPRINT(PLOTIT):   excolors = lowcase(symget('excolors'));
MPRINT(PLOTIT):   *------store goptions with annotate data set------;
MPRINT(PLOTIT):   if not 0 then do;
MPRINT(PLOTIT):   comment = symget('gopts');
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   function = 'COMMENT';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw border------;
MPRINT(PLOTIT):   if "cx000000" ne ' ' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = 47 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   comment = 'border, box, left top start';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x - 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'border, box, left bottom';
MPRINT(PLOTIT):   y = 0;
MPRINT(PLOTIT):   if 0 and 0.50 < 0 then y = y - 0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right bottom';
MPRINT(PLOTIT):   x = 124 - 0.001;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x + 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right top';
MPRINT(PLOTIT):   y = 47 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, left top';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x - 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat1(in=td1 rename=(text=text2));
MPRINT(PLOTIT):   text = text2;
MPRINT(PLOTIT):   if comment = 'text, y label' then x = x - 2.00;
MPRINT(PLOTIT):   if comment = 'text, title' then y = y + -0.50;
MPRINT(PLOTIT):   if comment = 'text, x label' then y = y - 0.50;
MPRINT(PLOTIT):   if comment = 'text, y tick' then x = x - 2.00;
MPRINT(PLOTIT):   if comment = 'text, x tick' then y = y - 0.50;
MPRINT(PLOTIT):   obstype = __otype;
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   *------discard clipped ticks if necessary------;
MPRINT(PLOTIT):   if comment = 'text, y tick' then do;
MPRINT(PLOTIT):   if not (bottom <= y <= top) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if comment = 'text, x tick' then do;
MPRINT(PLOTIT):   d = right + floor(1e-8 + len / 2);
MPRINT(PLOTIT):   if not (left <= x <= d) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td1 and (comment =: 'list' or comment =: 'extra') and not (index(substr(comment,1,18),', text, label'));
MPRINT(PLOTIT):   if i or (nmiss(x) and n(__xvar)) then x = 29 + 20 * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(y) and n(__yvar)) then y = 17 + 10 * __yvar;
MPRINT(PLOTIT):   *------all angles are zero, except the y-axis label------;
MPRINT(PLOTIT):   if nmiss(angle) then angle = 0;
MPRINT(PLOTIT):   *------set position if not yet set------;
MPRINT(PLOTIT):   if position = ' ' then position = '+';
MPRINT(PLOTIT):   *------flag contour observations------;
MPRINT(PLOTIT):   contour = (function = 'BAR' and style = 'solid');
MPRINT(PLOTIT):   *------clip if necessary------;
MPRINT(PLOTIT):   if comment =: 'extra, text' or comment =: 'list, text' and text ne ' ' and not contour then do;
MPRINT(PLOTIT):   if y >= top or y <= bottom then return;
MPRINT(PLOTIT):   if position = '<' then d = x - len + 1 - left;
MPRINT(PLOTIT):   else if position = '>' then d = x - left;
MPRINT(PLOTIT):   else d = x - len / 2 - left;
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if position = '<' then d = right - x;
MPRINT(PLOTIT):   else if position = '>' then d = right - (x + len - 1);
MPRINT(PLOTIT):   else d = right - (x + len / 2);
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust justifications------;
MPRINT(PLOTIT):   if position = '<' then x = x + 0.5;
MPRINT(PLOTIT):   else if position = '>' then x = x - 0.5;
MPRINT(PLOTIT):   *------set line, text sizes------;
MPRINT(PLOTIT):   if nmiss(size) then do;
MPRINT(PLOTIT):   if function = 'LABEL' then size = 1;
MPRINT(PLOTIT):   else size = lsizes[1];
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set font------;
MPRINT(PLOTIT):   if style = ' ' and not (comment =: 'list, text' or comment =: 'extra, text') then style = 'none';
MPRINT(PLOTIT):   *------if color is still not set, set it------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   *------offset (jitter) coincident symbols but not ptr symbols------;
MPRINT(PLOTIT):   length lastpos $ 1;
MPRINT(PLOTIT):   retain oldx oldy 0 offsetn 1 lastpos '+';
MPRINT(PLOTIT):   if comment =: 'list, text, symbol' or comment =: 'extra, text, symbol' then do;
MPRINT(PLOTIT):   if abs(oldx - x) < 1e-8 and abs(oldy - y) < 1e-8 then do;
MPRINT(PLOTIT):   *------usually go center, right, left, but skip right------;
MPRINT(PLOTIT):   *------on second symbol if last label was right ------;
MPRINT(PLOTIT):   offsetn + 1 + (offsetn = 1 and lastpos = '>');
MPRINT(PLOTIT):   x = x + (mod(offsetn,3) - 1) * (0.25);
MPRINT(PLOTIT):   d = mod(floor((offsetn - 1) / 3) + 1, 3) - 1;
MPRINT(PLOTIT):   y = y + d * (0.25) / (2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   offsetn = 1;
MPRINT(PLOTIT):   oldx = x;
MPRINT(PLOTIT):   oldy = y;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   lastpos = position;
MPRINT(PLOTIT):   *------override colors for monochrome device------;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if index(excolors, trim(lowcase(color))) = 0;
MPRINT(PLOTIT):   *------add offsets to center plot ------;
MPRINT(PLOTIT):   *------adjust y so bottom line has coordinate 0.5------;
MPRINT(PLOTIT):   x = x + 24.8;
MPRINT(PLOTIT):   y = y + 1.2 + 0.5;
MPRINT(PLOTIT):   *------set ID variable for sort for functions------;
MPRINT(PLOTIT):   *------create rectangles for contour plots------;
MPRINT(PLOTIT):   if contour and contok then do;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   epsh = size * 0;
MPRINT(PLOTIT):   epsv = size * 0;
MPRINT(PLOTIT):   x1 = x - epsh / 2;
MPRINT(PLOTIT):   x2 = x1 + epsh;
MPRINT(PLOTIT):   epsh = epsh * 0.1;
MPRINT(PLOTIT):   y1 = y - epsv / 2;
MPRINT(PLOTIT):   y2 = y1 + epsv;
MPRINT(PLOTIT):   epsv = epsv * 0.1;
MPRINT(PLOTIT):   if abs(x1 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x1 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   if (abs(0) < epsh and 0 > 0) or (abs(0) < epsv and 0 > 0) then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   function = 'BAR';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   conoldx = x;
MPRINT(PLOTIT):   conoldy = y;
MPRINT(PLOTIT):   *------final adjustments------;
MPRINT(PLOTIT):   if text = '*' and function = 'LABEL' then do;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   text = 'star';
MPRINT(PLOTIT):   function = 'SYMBOL';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   call symput('nobs',compress(put(nobs,5.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat1 tempdat3 tempdat4 tempdat5 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------post-processing for functions------;
MPRINT(PLOTIT):   *------post-processing for expand------;
MPRINT(PLOTIT):   *------make sure that the frame is never covered------;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   set anno anno(where=(comment =: 'frame, box'));
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *===========set up for and produce the graphical scatter plot==========;
MPRINT(PLOTIT):   goptions nodisplay hpos=124 vpos=47 hsize=8.33in vsize=6.24in cback=white device=GIF;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   *------print final plot request------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length string $ 500;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   put / 'The following code will create the ' @@;
MPRINT(PLOTIT):   if not 1 then put '(empty) ' @@;
MPRINT(PLOTIT):   put 'printer plot ' 'on which ' 'the ' 'graphical ' 'plot is ' 'based:' /;
MPRINT(PLOTIT):   string = "options nonumber ls=80 ps=50;";
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = symget('procopts');
MPRINT(PLOTIT):   indent2 = 10;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'plot ' || trim(symget('plotreq')) || ' /';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('plotopts')) || ' list=1';
MPRINT(PLOTIT):   indent1 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('pl')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('label')) || ';';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 9;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('adjust2')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'label ' || symget('vplotvar') || " = '#' " || symget('hplotvar') || " = '#';";
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put +3 'run; quit;' /;
MPRINT(PLOTIT):   put 'The plot was created with the following goptions:' /;
MPRINT(PLOTIT):   string = 'goptions ' || symget('gopts') || ';';
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put / "The OUT=anno Annotate data set has 135 observations.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('method') = 'print' then put "The graphics stream file name is C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD10396_MIIKYMEDIA_\Prc2\plotit.ps.";
MPRINT(PLOTIT):   if 1 and upcase(getoption("STIMER")) eq "STIMER" and getoption('stimer') eq 'STIMER' then do;
MPRINT(PLOTIT):   time = datetime();
MPRINT(PLOTIT):   cum = put(time - 1923437910.51,6.1);
MPRINT(PLOTIT):   put 'The PLOTIT macro used ' cum "seconds to create OUT=anno.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   wrap: *------print a line, wrapped and indented------;
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   string = left(string);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   if len < 2 or string = ' ' or string = ';' then return;
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   do while(i < (len - 1) and not nlit);
MPRINT(PLOTIT):   string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   i = index(string,' ;');
MPRINT(PLOTIT):   if i then string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = 1;
MPRINT(PLOTIT):   end = 0;
MPRINT(PLOTIT):   indent = indent1 + 1;
MPRINT(PLOTIT):   do while(len > end);
MPRINT(PLOTIT):   string = left(substr(string,end + 1));
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   maxlen = 256 - indent;
MPRINT(PLOTIT):   if len > maxlen and not nlit then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   do while(end > 0 and not (substr(string,end,1) in (' ' ',')));
MPRINT(PLOTIT):   end = end - 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if len > maxlen then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   if nlit then end = nlit + 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else end = len;
MPRINT(PLOTIT):   str = substr(string,1,end);
MPRINT(PLOTIT):   put @indent str;
MPRINT(PLOTIT):   indent = indent2 + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
 
The following code will create the printer plot on which the graphical plot is based:
 
options nonumber ls=80 ps=50;
proc plot nolegend formchar='|----|+|---' data=preproc vtoh=2;
   plot Dim2 * Dim1 $ _idvar_ = _symbol_ /
        haxis=by 1 vaxis=by 1 box list=1
        placement=((h=2 -2 : s=right left) (v=1 to 2 by alt * h=0 -1 to -10 by alt));
   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
   label Dim2 = '#' Dim1 = '#';
   run; quit;
 
The plot was created with the following goptions:
 
goptions nodisplay hpos=124 vpos=47 hsize=8.33in vsize=6.24in cback=white device=GIF;
 
The OUT=anno Annotate data set has 135 observations.
The PLOTIT macro used 0.6 seconds to create OUT=anno.
MPRINT(PLOTIT):   *------produce the plot------;
MPRINT(PLOTIT):   proc ganno annotate=anno gout=WORK.Clus name="DISTANCE";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options LABEL;
Sistema SAS
 
MPRINT(PLOTIT):   *------restore options, quit------;
MPRINT(PLOTIT):   options NOTES missing=".";
MPRINT(EM_DIAGRAM):  ;
66387      goptions display;
MPRINT(EM_DIAGRAM):   goptions display;
66388      title;
MPRINT(EM_DIAGRAM):   title;
66389      filename gsasfile
66389    ! "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\GRAPH
66389    ! \Distance.gif";
MPRINT(EM_DIAGRAM):    filename gsasfile
"C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\GRAPH\Distance.g
if";
66390      goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace cback= white;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace
cback= white;
66391      proc greplay igout=WORK.Clus nofs;
MPRINT(EM_DIAGRAM):   proc greplay igout=WORK.Clus nofs;
NOTE: Building list of graphs from the catalog.
 
NOTE: Enter greplay commands or statements.
66392      replay DISTANCE;
MPRINT(EM_DIAGRAM):   replay DISTANCE;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this
      session.
NOTE: 20734 bytes written to
      C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Clus\GRAPH\Dista
      nce.gif.
66393      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE GREPLAY ha utilizado (Tiempo de proceso total):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
66394      goptions reset=all;
MPRINT(EM_DIAGRAM):   goptions reset=all;
66395      filename gsasfile;
MPRINT(EM_DIAGRAM):   filename gsasfile;
NOTE: Fileref GSASFILE has been deassigned.
66396      proc datasets lib=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS1 nolist;
66397      modify Clus_DISTANCE;
MPRINT(EM_DIAGRAM):   modify Clus_DISTANCE;
66398      rename _idvar_=_SEGMENT_;
MPRINT(EM_DIAGRAM):   rename _idvar_=_SEGMENT_;
NOTE: Renaming variable _idvar_ to _SEGMENT_.
MPRINT(EM_DIAGRAM):   run;
66399      run;
 
NOTE: MODIFY was successful for EMWS1.CLUS_DISTANCE.DATA.
66400      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
Sistema SAS
 
 
 
66401      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66402      * Clus: creando conjunto de datos para el informe Input de la media;
MPRINT(EM_DIAGRAM):   * Clus: creando conjunto de datos para el informe Input de la media;
66403      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66404      data temp(drop=_type_ over_all);
MPRINT(EM_DIAGRAM):   data temp(drop=_type_ over_all);
66405      set EMWS1.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTSTAT;
66406      where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
MPRINT(EM_DIAGRAM):   where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
66407      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set EMWS1.CLUS_OUTSTAT.
      WHERE _type_ in ('CLUS_MEAN', 'DMDB_MEAN');
NOTE: The data set WORK.TEMP has 24 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66408      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
66409      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
66410      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 24 observations and 21 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66411      proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
MPRINT(EM_DIAGRAM):   proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
66412      var PC_1--PC_9;
MPRINT(EM_DIAGRAM):   var PC_1--PC_9;
66413      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 24 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.STDTEMP has 24 observations and 21 variables.
NOTE: The data set WORK.STAT has 10 observations and 21 variables.
NOTE: PROCEDURE STDIZE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66414      proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN COL4=MAX));
MPRINT(EM_DIAGRAM):   proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN
COL4=MAX));
66415      where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
Sistema SAS
 
MPRINT(EM_DIAGRAM):   where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
66416      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.STAT.
      WHERE _type_ in ('LOCATION', 'P0', 'P100', 'SCALE');
NOTE: The data set WORK.TSTAT has 20 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66417      data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
MPRINT(EM_DIAGRAM):   data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
66418      set tstat;
MPRINT(EM_DIAGRAM):   set tstat;
66419      if std ^in (0, .) then do;
MPRINT(EM_DIAGRAM):   if std ^in (0, .) then do;
66420      stdmin = abs((min-mean)/std);
MPRINT(EM_DIAGRAM):   stdmin = abs((min-mean)/std);
66421      stdmax = abs((max-mean)/std);
MPRINT(EM_DIAGRAM):   stdmax = abs((max-mean)/std);
66422      end;
MPRINT(EM_DIAGRAM):   end;
66423      if mean ^in(0, .) then cv = std/mean;
MPRINT(EM_DIAGRAM):   if mean ^in(0, .) then cv = std/mean;
66424      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 20 observations and 4 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66425      proc sort data=tstat;
MPRINT(EM_DIAGRAM):   proc sort data=tstat;
66426      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66427      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 20 observations and 4 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66428      proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL COL1=MEAN));
MPRINT(EM_DIAGRAM):   proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL
COL1=MEAN));
66429      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
66430      run;
MPRINT(EM_DIAGRAM):   run;
 
Sistema SAS
 
NOTE: There were 24 observations read from the data set WORK.STDTEMP.
NOTE: The data set WORK.TSTDTEMP has 480 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66431      proc sort data=tstdtemp;
MPRINT(EM_DIAGRAM):   proc sort data=tstdtemp;
66432      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66433      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 480 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set WORK.TSTDTEMP has 480 observations and 4 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66434      data tstdtemp;
MPRINT(EM_DIAGRAM):   data tstdtemp;
66435      merge tstdtemp tstat;
MPRINT(EM_DIAGRAM):   merge tstdtemp tstat;
66436      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66437      STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
MPRINT(EM_DIAGRAM):   STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
66438      drop stdmin stdmax mean;
MPRINT(EM_DIAGRAM):   drop stdmin stdmax mean;
66439      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 480 observations read from the data set WORK.TSTDTEMP.
NOTE: There were 20 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTDTEMP has 480 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
66440      proc transpose data=EMWS1.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME
66440    ! VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=(
_NAME_=NAME VARIABLE=INPUT));
66441      var PC_1--PC_9;
MPRINT(EM_DIAGRAM):   var PC_1--PC_9;
66442      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
66443      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
66444      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.CLUS_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 20 observations and 2 variables.
Sistema SAS
 
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
66445      proc sort data=tempVar;
MPRINT(EM_DIAGRAM):   proc sort data=tempVar;
66446      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66447      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 20 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66448      data EMWS1.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
66449      Length _SEGMENT_CHAR_ $7;
MPRINT(EM_DIAGRAM):   Length _SEGMENT_CHAR_ $7;
66450      label _SEGMENT_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentName_vlabel,  NOQUOTE))"
66450    ! _SEGMENT_CHAR_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentId_vlabel,    NOQUOTE))"
66450    ! NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,     NOQUOTE))" INPUT =
66451         "%sysfunc(sasmsg(sashelp.dmine, rpt_input_vlabel,        NOQUOTE))" LABEL =
66451    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_label_vlabel,        NOQUOTE))" CV =
66451    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_cv_vlabel,           NOQUOTE))" STDMEAN =
66452         "%sysfunc(sasmsg(sashelp.dmine, rpt_normmean_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Nombre del segmento" _SEGMENT_CHAR_ = "Id de segmento"
NAME = "Variable" INPUT = "Input" LABEL = "Etiqueta" CV = "Coeficiente de variación" STDMEAN =
"Media normalizada";
66453      merge tempvar tstdtemp;
MPRINT(EM_DIAGRAM):   merge tempvar tstdtemp;
66454      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
66455      if LABEL='' then LABEL=NAME;
MPRINT(EM_DIAGRAM):   if LABEL='' then LABEL=NAME;
66456      _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
MPRINT(EM_DIAGRAM):   _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
66457      if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
66458      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.TEMPVAR.
NOTE: There were 480 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set EMWS1.CLUS_INPUTMEAN has 480 observations and 7 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
66459      proc sort data=EMWS1.Clus_INPUTMEAN;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Clus_INPUTMEAN;
66460      by descending cv;
MPRINT(EM_DIAGRAM):   by descending cv;
Sistema SAS
 
66461      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 480 observations read from the data set EMWS1.CLUS_INPUTMEAN.
NOTE: The data set EMWS1.CLUS_INPUTMEAN has 480 observations and 7 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66462      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66463      * Clus: determinando las variables importantes;
MPRINT(EM_DIAGRAM):   * Clus: determinando las variables importantes;
66464      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
66465      %let _nobs = 0;
66466      data keepvars(rename=(NAME=INPUT));
MPRINT(EM_DIAGRAM):    data keepvars(rename=(NAME=INPUT));
66467      set EMWS1.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
66468      if eof then call symput('_nobs', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   if eof then call symput('_nobs', strip(put(_N_, best.)));
66469      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0.5;
NOTE: The data set WORK.KEEPVARS has 2 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66470      proc transpose data=EMWS1.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME
66470    ! VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=(
_NAME_=NAME VARIABLE=INPUT));
66471      var PC_1--PC_9;
MPRINT(EM_DIAGRAM):   var PC_1--PC_9;
66472      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
66473      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
66474      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.CLUS_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 20 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66475      proc sort data=keepvars;
MPRINT(EM_DIAGRAM):   proc sort data=keepvars;
Sistema SAS
 
66476      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
66477      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.KEEPVARS has 2 observations and 5 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66478      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
66479      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
66480      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 20 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66481      data vars;
MPRINT(EM_DIAGRAM):   data vars;
66482      merge tempvar keepvars(in=b);
MPRINT(EM_DIAGRAM):   merge tempvar keepvars(in=b);
66483      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
66484      if b then output;
MPRINT(EM_DIAGRAM):   if b then output;
66485      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: Multiple lengths were specified for the BY variable INPUT by input data sets. This might
         cause unexpected results.
NOTE: There were 20 observations read from the data set WORK.TEMPVAR.
NOTE: There were 2 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.VARS has 2 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66486      proc sort data=vars;
MPRINT(EM_DIAGRAM):   proc sort data=vars;
66487      by descending importance;
MPRINT(EM_DIAGRAM):   by descending importance;
66488      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.VARS.
NOTE: The data set WORK.VARS has 2 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
Sistema SAS
 
      cpu time            0.00 seconds
 
 
66489      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
66490      set vars;
MPRINT(EM_DIAGRAM):   set vars;
66491      if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
66492      else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
MPRINT(EM_DIAGRAM):   else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
66493      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.VARS.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * mergeVarMeansandClusLabel;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66494      *------------------------------------------------------------*;
66495      * mergeVarMeansandClusLabel;
66496      *------------------------------------------------------------*;
66497      data temp(keep=_SEGMENT_ &CLUS_PROFVARS);
MPRINT(EM_DIAGRAM):   data temp(keep=_SEGMENT_ PC_9 PC_10);
66498      length _SEGMENT_ &CLUS_PROFVARS 8;
MPRINT(EM_DIAGRAM):   length _SEGMENT_ PC_9 PC_10 8;
66499      set EMWS1.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTSTAT;
66500      where _type_ ='CLUS_MEAN';
MPRINT(EM_DIAGRAM):   where _type_ ='CLUS_MEAN';
66501      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.CLUS_OUTSTAT.
      WHERE _type_='CLUS_MEAN';
NOTE: The data set WORK.TEMP has 23 observations and 3 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
66502      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
66503      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
66504      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 23 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
Sistema SAS
 
 
66505      data EMWS1.Clus_LABEL;
MPRINT(EM_DIAGRAM):   data EMWS1.Clus_LABEL;
66506      merge EMWS1.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
MPRINT(EM_DIAGRAM):   merge EMWS1.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
66507      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
66508      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS1.CLUS_LABEL.
NOTE: There were 23 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS1.CLUS_LABEL has 23 observations and 4 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
