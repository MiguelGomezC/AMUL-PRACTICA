*------------------------------------------------------------*
Usuario:                Admin
Fecha:                13/12/20
Hora:                14H22
Sitio:                70161230
Plataforma:            X64_10HOME
Versión de mantenimiento: 9.04.01M6P111518
Versión de EM:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H22" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                13/12/20
Hora:                14H22
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1WDZR5K "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1WDZR5K new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H22" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70161230";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H22" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Stat2_VariableSet noprint;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Stat2META;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Stat2META label noobs;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    data WORK.M3BDUKDY;
MPRINT(EM_DIAGRAM):   set WORK.M3BDUKDY;
MPRINT(EM_DIAGRAM):   where((role in('TARGET' 'FREQ' 'INPUT') and use in('D','Y')) or (role = 'REJECTED' and use = 'Y'));
MPRINT(EM_DIAGRAM):   if ROLE = 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: determinando las variables de análisis;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Create DMDB macros;
MPRINT(EM_DIAGRAM):   options nosource;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Stat2: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Stat2: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   options NOSOURCE;
MPRINT(EM_DIAGRAM):   * End DMDB macros generation;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Ids2_DATA dmdbcat=WORK.Stat2_DMDB varout=WORK.Stat2DMDBVar maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   ACCESS ADAM ADDRESS ADVANC AMERICAN ANDI ANSWER APPLIC APPRECI ARAB AREA ARGIC ARMENIA ARMENIAN ATTACK AUDIO BANK BASE BATTERI BILL BOOK BRAIN BRIAN BUILD BUTTON CALIFORNIA CALL CAN CARD CASE CENTER CHANG CHIP CIRCUIT CLIENT CODE COLOR
COMMUN COMP COMPANI COMPIL COMPUT CONNECT CONTROL COPI CORRECT CREAT CURRENT DAI DATA DAVID DEPART DEPT DESIGN DETECTOR DEVIC DISEAS DISPLAI DISTRIBUT DOCTOR DOESN DON DRAW DRIVE DRUG EDU EFFECT ELECTR ELECTRON EMAIL ENGIN ERROR EVENT EXPERI FACT FAX FEEL
FILE FIND FOLLOWUP FONT FOOD FRI FRIEND FUNCTION GEB GENER GEORGIA GIVE GOOD GORDON GOVERN GRAPHIC GREAT GREEK GROUND GROUP HAPPEN HEAR HIGH HOME IDEA IMAG INCLUD INFO INFORM INPUT INSTITUT INTEREST INTERNET ISRA ISRAEL JEW JEWISH JOHN KEYBOARD KEYWORD
KILL KIND LEVEL LIST LIVE LONG MACHIN MAIL MANAG MARK MED MEDIC MEDICIN MEMORI MICHAEL MIKE MON MOTIF MOTOROLA NATION NETWORK NEW NEWS NEWSREAD NOIS NUMBER OPER OPINION ORIGIN OUTPUT PAIN PALESTINIAN PART PATIENT PERSON PHONE PITT PITTSBURGH PLACE POINT
POLICI POSIT POST POWER PROBLEM PRODUCT PROGRAM PROJECT PUBLIC QUESTION RADAR RADIO READ REASON RECEIV REMEMB REPLI REPORT REQUIR RESEARCH RESPONS ROBERT RUN SAT SCHOOL SCI SCIENC SCREEN SELL SEND SERDAR SERVER SERVIC SHOW SIDE SIGNAL SOFTWAR SOUND SOURC
STANDARD START STATE STEVE STUDI SUBSCRIB SUGGEST SUN SUPPORT SWITCH SYSTEM TALK TECHNOLOG TERMIN TEST THAT THU TIME TREATMENT TRUE TUE TURKISH TYPE UNIV UNIVERS UNIX USENET USER UTEXA UUCP VERSION VIRGINIA VOLTAG WATER WED WIDGET WINDOW WIRE WONDER WORK
WORLD XLIB XTERM YEAR YOU
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
MPRINT(EM_DIAGRAM):    data WORK.Stat2DMDBVar;
MPRINT(EM_DIAGRAM):   set WORK.Stat2DMDBVar(keep=Name Mean Std);
MPRINT(EM_DIAGRAM):   CV = Std/Mean;
MPRINT(EM_DIAGRAM):   Keep NAME CV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Stat2_WORTH data=WORK.Stat2DMDBVar force;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Stat2_WORTH;
MPRINT(EM_DIAGRAM):   by descending CV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat2_WORTH;
MPRINT(EM_DIAGRAM):   format STATVAR 6.0;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat2_WORTH;
MPRINT(EM_DIAGRAM):   if _N_<= 1000 then STATVAR=1;
MPRINT(EM_DIAGRAM):   else STATVAR=0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: niveles de número;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create view WORK.Stat2_distinct as select distinct id_documento from EMWS1.Ids2_DATA;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpcount from WORK.Stat2_distinct;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Stat2_count NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME ROLE DATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Stat2_count(obs=500) label noobs;
MPRINT(EM_DIAGRAM):   label NAME = "Variable" COUNT = "Número de ocurrencias" ROLE = "Rol";
MPRINT(EM_DIAGRAM):   var NAME ROLE COUNT;
MPRINT(EM_DIAGRAM):   title9 "Sumarización de los niveles de la variable";
MPRINT(EM_DIAGRAM):   title10 "(máximo imprimido 500 observaciones)";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Stat2_WORTH nodupkey out=WORK.Stat2_SELVAR(keep=Name StatVar);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   where statvar=1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3SY6E6X;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Stat2_analysisMeta;
MPRINT(EM_DIAGRAM):   merge WORK.M3SY6E6X WORK.Stat2_SELVAR(in=_a);
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if _a then STATVAR = 1;
MPRINT(EM_DIAGRAM):   else if ROLE in('INPUT', 'REJECTED') and REPORT ne 'Y' then delete;
MPRINT(EM_DIAGRAM):   if REPORT eq 'Y' then STATVAR = 1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M3BZ5WPJ;
MPRINT(EM_DIAGRAM):   set WORK.M3BZ5WPJ;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or Report='Y' or (role in('TARGET' 'FREQ' 'PREDICT' 'RESIDUAL' 'INPUT') and use = 'D'));
MPRINT(EM_DIAGRAM):   if ROLE = 'SEGMENT' then delete;
MPRINT(EM_DIAGRAM):   else if ROLE ^in('FREQ','TARGET') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M3R94II3;
MPRINT(EM_DIAGRAM):   set WORK.M3R94II3;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or Report='Y' or (role in('SEGMENT', 'TARGET' 'FREQ' 'PREDICT' 'RESIDUAL' 'INPUT') and use = 'D'));
MPRINT(EM_DIAGRAM):   if ROLE ne 'FREQ' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: calculando estadísticos para las variables de intervalo;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb data=EMWS1.Ids2_DATA nonorm maxlevel=513 varout=work._DMDBVAR(RENAME=(NAME=VARIABLE)) ;
MPRINT(EM_DIAGRAM):   var ACCESS ADAM ADDRESS ADVANC AMERICAN ANDI ANSWER APPLIC APPRECI ARAB AREA ARGIC ARMENIA ARMENIAN ATTACK AUDIO BANK BASE BATTERI BILL BOOK BRAIN BRIAN BUILD BUTTON CALIFORNIA CALL CAN CARD CASE CENTER CHANG CHIP CIRCUIT CLIENT CODE
COLOR COMMUN COMP COMPANI COMPIL COMPUT CONNECT CONTROL COPI CORRECT CREAT CURRENT DAI DATA DAVID DEPART DEPT DESIGN DETECTOR DEVIC DISEAS DISPLAI DISTRIBUT DOCTOR DOESN DON DRAW DRIVE DRUG EDU EFFECT ELECTR ELECTRON EMAIL ENGIN ERROR EVENT EXPERI FACT
FAX FEEL FILE FIND FOLLOWUP FONT FOOD FRI FRIEND FUNCTION GEB GENER GEORGIA GIVE GOOD GORDON GOVERN GRAPHIC GREAT GREEK GROUND GROUP HAPPEN HEAR HIGH HOME IDEA IMAG INCLUD INFO INFORM INPUT INSTITUT INTEREST INTERNET ISRA ISRAEL JEW JEWISH JOHN KEYBOARD
KEYWORD KILL KIND LEVEL LIST LIVE LONG MACHIN MAIL MANAG MARK MED MEDIC MEDICIN MEMORI MICHAEL MIKE MON MOTIF MOTOROLA NATION NETWORK NEW NEWS NEWSREAD NOIS NUMBER OPER OPINION ORIGIN OUTPUT PAIN PALESTINIAN PART PATIENT PERSON PHONE PITT PITTSBURGH PLACE
POINT POLICI POSIT POST POWER PROBLEM PRODUCT PROGRAM PROJECT PUBLIC QUESTION RADAR RADIO READ REASON RECEIV REMEMB REPLI REPORT REQUIR RESEARCH RESPONS ROBERT RUN SAT SCHOOL SCI SCIENC SCREEN SELL SEND SERDAR SERVER SERVIC SHOW SIDE SIGNAL SOFTWAR SOUND
SOURC STANDARD START STATE STEVE STUDI SUBSCRIB SUGGEST SUN SUPPORT SWITCH SYSTEM TALK TECHNOLOG TERMIN TEST THAT THU TIME TREATMENT TRUE TUE TURKISH TYPE UNIV UNIVERS UNIX USENET USER UTEXA UUCP VERSION VIRGINIA VOLTAG WATER WED WIDGET WINDOW WIRE WONDER
WORK WORLD XLIB XTERM YEAR YOU ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS1.Ids2_DATA out=_null_ outstat=work._STDIZE add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=(0 5 50 95 100);
MPRINT(EM_DIAGRAM):   var ACCESS ADAM ADDRESS ADVANC AMERICAN ANDI ANSWER APPLIC APPRECI ARAB AREA ARGIC ARMENIA ARMENIAN ATTACK AUDIO BANK BASE BATTERI BILL BOOK BRAIN BRIAN BUILD BUTTON CALIFORNIA CALL CAN CARD CASE CENTER CHANG CHIP CIRCUIT CLIENT CODE
COLOR COMMUN COMP COMPANI COMPIL COMPUT CONNECT CONTROL COPI CORRECT CREAT CURRENT DAI DATA DAVID DEPART DEPT DESIGN DETECTOR DEVIC DISEAS DISPLAI DISTRIBUT DOCTOR DOESN DON DRAW DRIVE DRUG EDU EFFECT ELECTR ELECTRON EMAIL ENGIN ERROR EVENT EXPERI FACT
FAX FEEL FILE FIND FOLLOWUP FONT FOOD FRI FRIEND FUNCTION GEB GENER GEORGIA GIVE GOOD GORDON GOVERN GRAPHIC GREAT GREEK GROUND GROUP HAPPEN HEAR HIGH HOME IDEA IMAG INCLUD INFO INFORM INPUT INSTITUT INTEREST INTERNET ISRA ISRAEL JEW JEWISH JOHN KEYBOARD
KEYWORD KILL KIND LEVEL LIST LIVE LONG MACHIN MAIL MANAG MARK MED MEDIC MEDICIN MEMORI MICHAEL MIKE MON MOTIF MOTOROLA NATION NETWORK NEW NEWS NEWSREAD NOIS NUMBER OPER OPINION ORIGIN OUTPUT PAIN PALESTINIAN PART PATIENT PERSON PHONE PITT PITTSBURGH PLACE
POINT POLICI POSIT POST POWER PROBLEM PRODUCT PROGRAM PROJECT PUBLIC QUESTION RADAR RADIO READ REASON RECEIV REMEMB REPLI REPORT REQUIR RESEARCH RESPONS ROBERT RUN SAT SCHOOL SCI SCIENC SCREEN SELL SEND SERDAR SERVER SERVIC SHOW SIDE SIGNAL SOFTWAR SOUND
SOURC STANDARD START STATE STEVE STUDI SUBSCRIB SUGGEST SUN SUPPORT SWITCH SYSTEM TALK TECHNOLOG TERMIN TEST THAT THU TIME TREATMENT TRUE TUE TURKISH TYPE UNIV UNIVERS UNIX USENET USER UTEXA UUCP VERSION VIRGINIA VOLTAG WATER WED WIDGET WINDOW WIRE WONDER
WORK WORLD XLIB XTERM YEAR YOU ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=work._STDIZE out=work._TRANSSTDIZE(drop=_LABEL_ rename=(_NAME_=VARIABLE));
MPRINT(EM_DIAGRAM):   id _type_;
MPRINT(EM_DIAGRAM):   where _TYPE_='P50';
MPRINT(EM_DIAGRAM):   run;
WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
MPRINT(EM_DIAGRAM):   proc sort data=work._TRANSSTDIZE;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=work._DMDBVAR;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Stat2INTERVAL;
MPRINT(EM_DIAGRAM):   merge work._TRANSSTDIZE work._DMDBVAR;
MPRINT(EM_DIAGRAM):   format N NMISS 8. MIN MAX P50 MEAN STD SKEWNESS KURTOSIS BEST8.3;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):    data WORK.Stat2INTERVAL;
MPRINT(EM_DIAGRAM):   length DATAROLE $20;
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   set WORK.Stat2INTERVAL;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Stat2_INTERVAL data=WORK.Stat2INTERVAL force;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Stat2_VariableSet out=tempVariable(keep=name label role rename=(name=variable));
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   by Variable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   merge EMWS1.Stat2_INTERVAL(in=_a) tempVariable;
MPRINT(EM_DIAGRAM):   by variable;
MPRINT(EM_DIAGRAM):   if label = '' then label=Variable;
MPRINT(EM_DIAGRAM):   if _a then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label Variable = "Variable";
MPRINT(EM_DIAGRAM):   label MEAN = "Media";
MPRINT(EM_DIAGRAM):   label N = "No ausente";
MPRINT(EM_DIAGRAM):   label STD = "Desviación estándar";
MPRINT(EM_DIAGRAM):   label NMISS = "Ausente";
MPRINT(EM_DIAGRAM):   label p50 = "Mediana";
MPRINT(EM_DIAGRAM):   label MIN = "Mínimo";
MPRINT(EM_DIAGRAM):   label MAX = "Máximo";
MPRINT(EM_DIAGRAM):   label SKEWNESS = "Asimetría";
MPRINT(EM_DIAGRAM):   label KURTOSIS = "Curtosis";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Stat2INTERVALSUMMARY;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   length ROLE $32;
MPRINT(EM_DIAGRAM):   if Variable = "ACCESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADAM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADDRESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADVANC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AMERICAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANDI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANSWER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APPLIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APPRECI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARAB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AREA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARGIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARMENIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARMENIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ATTACK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AUDIO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BANK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BASE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BATTERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BILL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BOOK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUILD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUTTON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CALIFORNIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CALL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CASE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CENTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHANG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHIP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CIRCUIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLIENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CODE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMMUN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPANI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONNECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONTROL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COPI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CORRECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CREAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CURRENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DATA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAVID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEPART" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEPT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DESIGN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DETECTOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEVIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISEAS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISPLAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISTRIBUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOCTOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOESN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRAW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRIVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRUG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EDU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EFFECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ELECTR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ELECTRON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EMAIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ENGIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ERROR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EVENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FACT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FAX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FEEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FILE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FIND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FOLLOWUP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FONT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FOOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FRIEND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FUNCTION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GEB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GENER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GEORGIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GIVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GOOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GORDON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GOVERN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GRAPHIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GREAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GREEK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GROUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GROUP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HAPPEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HIGH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IDEA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IMAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INCLUD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INFO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INFORM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INPUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INSTITUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTEREST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTERNET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ISRA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ISRAEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JEWISH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JOHN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KEYBOARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KEYWORD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KILL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KIND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEVEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LONG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MACHIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MAIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MANAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MARK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MED" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEDIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEDICIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEMORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MICHAEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MIKE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOTIF" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOTOROLA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NATION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NETWORK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEWS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEWSREAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NOIS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NUMBER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OPER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OPINION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ORIGIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OUTPUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PALESTINIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PART" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PATIENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PERSON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PHONE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PITT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PITTSBURGH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PLACE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POINT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POLICI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POSIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POWER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROBLEM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRODUCT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROGRAM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROJECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PUBLIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "QUESTION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RADAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RADIO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "READ" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REASON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RECEIV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REMEMB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REPLI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REPORT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REQUIR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESEARCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESPONS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ROBERT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RUN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCHOOL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCIENC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCREEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SELL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERDAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERVER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERVIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIDE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIGNAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOFTWAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOURC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STANDARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "START" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STATE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STEVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STUDI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUBSCRIB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUGGEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUPPORT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SWITCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SYSTEM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TALK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TECHNOLOG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TERMIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TIME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TREATMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRUE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TUE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TURKISH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TYPE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNIV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNIVERS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNIX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "USENET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "USER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UTEXA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UUCP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VERSION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VIRGINIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VOLTAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WATER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WED" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIDGET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WINDOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIRE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WONDER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WORK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WORLD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XLIB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XTERM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YEAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YOU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Stat2INTERVALSUMMARY NOTHREADS;
MPRINT(EM_DIAGRAM):   by DATAROLE ROLE Variable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options nonumber nocenter;
MPRINT(EM_DIAGRAM):   title;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Stat2INTERVALSUMMARY(obs=500) label noobs;
MPRINT(EM_DIAGRAM):   var Variable ROLE MEAN STD N NMISS MIN P50 MAX SKEWNESS KURTOSIS;
MPRINT(EM_DIAGRAM):   by DATAROLE;
MPRINT(EM_DIAGRAM):   title9 "Estadísticos descriptivos de la variable de intervalo";
MPRINT(EM_DIAGRAM):   title10 "(máximo imprimido 500 observaciones)";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3SY6E6X;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   label NMiss = "Ausente" absCV = "Valor absoluto del c.v." CV = "Coeficiente de variación" Sign = "Signo";
MPRINT(EM_DIAGRAM):   if MEAN ne . then do;
MPRINT(EM_DIAGRAM):   CV = STD/MEAN;
MPRINT(EM_DIAGRAM):   absCV = abs(CV);
MPRINT(EM_DIAGRAM):   if absCV < 0 then Sign = '-';
MPRINT(EM_DIAGRAM):   else Sign = '+';
MPRINT(EM_DIAGRAM):   absCV = abs(absCV);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   by DATAROLE descending absCV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   retain OrderedInput;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   by DATAROLE;
MPRINT(EM_DIAGRAM):   label OrderedInput = "Inputs ordenados";
MPRINT(EM_DIAGRAM):   format OrderedInput 5.0;
MPRINT(EM_DIAGRAM):   if first.DATAROLE then OrderedInput = 1;
MPRINT(EM_DIAGRAM):   else OrderedInput + 1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3SY6E6X;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H22" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                13/12/20
Hora:                14H22
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2OWF540 "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2OWF540 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat2_TRAIN / view=EMWS1.Stat2_TRAIN ;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids2_DATA ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Stat2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Stat2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Stat2_TRAIN out=WORK.M3R7BX_O noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3R7BX_O;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3R7BX_O(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3R7BX_O;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3R7BX_O;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M21W_T_9 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21W_T_9;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M21W_T_9;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CJ3V9B(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M21W_T_9;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21W_T_9;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M21W_T_9;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M21W_T_9;
MPRINT(EMADVISECOLUMNS):   set WORK.M21W_T_9;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT=
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids2_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids2_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Stat2";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'ACCESS' 'ADAM' 'ADDRESS' 'ADVANC' 'AMERICAN' 'ANDI' 'ANSWER' 'APPLIC' 'APPRECI' 'ARAB' 'AREA' 'ARGIC' 'ARMENIA' 'ARMENIAN' 'ATTACK' 'AUDIO' 'BANK' 'BASE' 'BATTERI' 'BILL' 'BOOK' 'BRAIN' 'BRIAN' 'BUILD' 'BUTTON'
'CALIFORNIA' 'CALL' 'CAN' 'CARD' 'CASE' 'CENTER' 'CHANG' 'CHIP' 'CIRCUIT' 'CLIENT' 'CODE' 'COLOR' 'COMMUN' 'COMP' 'COMPANI' 'COMPIL' 'COMPUT' 'CONNECT' 'CONTROL' 'COPI' 'CORRECT' 'CREAT' 'CURRENT' 'DAI' 'DATA' 'DAVID' 'DEPART' 'DEPT' 'DESIGN' 'DETECTOR'
'DEVIC' 'DISEAS' 'DISPLAI' 'DISTRIBUT' 'DOCTOR' 'DOESN' 'DON' 'DRAW' 'DRIVE' 'DRUG' 'EDU' 'EFFECT' 'ELECTR' 'ELECTRON' 'EMAIL' 'ENGIN' 'ERROR' 'EVENT' 'EXPERI' 'FACT' 'FAX' 'FEEL' 'FILE' 'FIND' 'FOLLOWUP' 'FONT' 'FOOD' 'FRI' 'FRIEND' 'FUNCTION' 'GEB'
'GENER' 'GEORGIA' 'GIVE' 'GOOD' 'GORDON' 'GOVERN' 'GRAPHIC' 'GREAT' 'GREEK' 'GROUND' 'GROUP' 'HAPPEN' 'HEAR' 'HIGH' 'HOME' 'IDEA' 'IMAG' 'INCLUD' 'INFO' 'INFORM' 'INPUT' 'INSTITUT' 'INTEREST' 'INTERNET' 'ISRA' 'ISRAEL' 'JEW' 'JEWISH' 'JOHN' 'KEYBOARD'
'KEYWORD' 'KILL' 'KIND' 'LEVEL' 'LIST' 'LIVE' 'LONG' 'MACHIN' 'MAIL' 'MANAG' 'MARK' 'MED' 'MEDIC' 'MEDICIN' 'MEMORI' 'MICHAEL' 'MIKE' 'MON' 'MOTIF' 'MOTOROLA' 'NATION' 'NETWORK' 'NEW' 'NEWS' 'NEWSREAD' 'NOIS' 'NUMBER' 'OPER' 'OPINION' 'ORIGIN' 'OUTPUT'
'PAIN' 'PALESTINIAN' 'PART' 'PATIENT' 'PERSON' 'PHONE' 'PITT' 'PITTSBURGH' 'PLACE' 'POINT' 'POLICI' 'POSIT' 'POST' 'POWER' 'PROBLEM' 'PRODUCT' 'PROGRAM' 'PROJECT' 'PUBLIC' 'QUESTION' 'RADAR' 'RADIO' 'READ' 'REASON' 'RECEIV' 'REMEMB' 'REPLI' 'REPORT'
'REQUIR' 'RESEARCH' 'RESPONS' 'ROBERT' 'RUN' 'SAT' 'SCHOOL' 'SCI' 'SCIENC' 'SCREEN' 'SELL' 'SEND' 'SERDAR' 'SERVER' 'SERVIC' 'SHOW' 'SIDE' 'SIGNAL' 'SOFTWAR' 'SOUND' 'SOURC' 'STANDARD' 'START' 'STATE' 'STEVE' 'STUDI' 'SUBSCRIB' 'SUGGEST' 'SUN' 'SUPPORT'
'SWITCH' 'SYSTEM' 'TALK' 'TECHNOLOG' 'TERMIN' 'TEST' 'THAT' 'THU' 'TIME' 'TREATMENT' 'TRUE' 'TUE' 'TURKISH' 'TYPE' 'UNIV' 'UNIVERS' 'UNIX' 'USENET' 'USER' 'UTEXA' 'UUCP' 'VERSION' 'VIRGINIA' 'VOLTAG' 'WATER' 'WED' 'WIDGET' 'WINDOW' 'WIRE' 'WONDER' 'WORK'
'WORLD' 'XLIB' 'XTERM' 'YEAR' 'YOU' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else delete;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H22" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                13/12/20
Hora:                14H22
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2WZ8FM8 "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2WZ8FM8 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
