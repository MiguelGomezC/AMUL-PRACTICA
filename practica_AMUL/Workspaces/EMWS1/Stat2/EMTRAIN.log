MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H22" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                13/12/20
Hora:                14H22
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1WDZR5K "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1WDZR5K new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H22" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70161230";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H22" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Stat2_VariableSet noprint;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Stat2META;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Stat2META label noobs;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    data WORK.M3BDUKDY;
MPRINT(EM_DIAGRAM):   set WORK.M3BDUKDY;
MPRINT(EM_DIAGRAM):   where((role in('TARGET' 'FREQ' 'INPUT') and use in('D','Y')) or (role = 'REJECTED' and use = 'Y'));
MPRINT(EM_DIAGRAM):   if ROLE = 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: determinando las variables de análisis;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Create DMDB macros;
MPRINT(EM_DIAGRAM):   options nosource;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Stat2: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Stat2: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   options NOSOURCE;
MPRINT(EM_DIAGRAM):   * End DMDB macros generation;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Ids2_DATA dmdbcat=WORK.Stat2_DMDB varout=WORK.Stat2DMDBVar maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   ACCESS ADAM ADDRESS ADVANC AMERICAN ANDI ANSWER APPLIC APPRECI ARAB AREA ARGIC ARMENIA ARMENIAN ATTACK AUDIO BANK BASE BATTERI BILL BOOK BRAIN BRIAN BUILD BUTTON CALIFORNIA CALL CAN CARD CASE CENTER CHANG CHIP CIRCUIT CLIENT CODE COLOR 
COMMUN COMP COMPANI COMPIL COMPUT CONNECT CONTROL COPI CORRECT CREAT CURRENT DAI DATA DAVID DEPART DEPT DESIGN DETECTOR DEVIC DISEAS DISPLAI DISTRIBUT DOCTOR DOESN DON DRAW DRIVE DRUG EDU EFFECT ELECTR ELECTRON EMAIL ENGIN ERROR EVENT EXPERI FACT FAX FEEL 
FILE FIND FOLLOWUP FONT FOOD FRI FRIEND FUNCTION GEB GENER GEORGIA GIVE GOOD GORDON GOVERN GRAPHIC GREAT GREEK GROUND GROUP HAPPEN HEAR HIGH HOME IDEA IMAG INCLUD INFO INFORM INPUT INSTITUT INTEREST INTERNET ISRA ISRAEL JEW JEWISH JOHN KEYBOARD KEYWORD 
KILL KIND LEVEL LIST LIVE LONG MACHIN MAIL MANAG MARK MED MEDIC MEDICIN MEMORI MICHAEL MIKE MON MOTIF MOTOROLA NATION NETWORK NEW NEWS NEWSREAD NOIS NUMBER OPER OPINION ORIGIN OUTPUT PAIN PALESTINIAN PART PATIENT PERSON PHONE PITT PITTSBURGH PLACE POINT 
POLICI POSIT POST POWER PROBLEM PRODUCT PROGRAM PROJECT PUBLIC QUESTION RADAR RADIO READ REASON RECEIV REMEMB REPLI REPORT REQUIR RESEARCH RESPONS ROBERT RUN SAT SCHOOL SCI SCIENC SCREEN SELL SEND SERDAR SERVER SERVIC SHOW SIDE SIGNAL SOFTWAR SOUND SOURC 
STANDARD START STATE STEVE STUDI SUBSCRIB SUGGEST SUN SUPPORT SWITCH SYSTEM TALK TECHNOLOG TERMIN TEST THAT THU TIME TREATMENT TRUE TUE TURKISH TYPE UNIV UNIVERS UNIX USENET USER UTEXA UUCP VERSION VIRGINIA VOLTAG WATER WED WIDGET WINDOW WIRE WONDER WORK 
WORLD XLIB XTERM YEAR YOU
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
MPRINT(EM_DIAGRAM):    data WORK.Stat2DMDBVar;
MPRINT(EM_DIAGRAM):   set WORK.Stat2DMDBVar(keep=Name Mean Std);
MPRINT(EM_DIAGRAM):   CV = Std/Mean;
MPRINT(EM_DIAGRAM):   Keep NAME CV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Stat2_WORTH data=WORK.Stat2DMDBVar force;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Stat2_WORTH;
MPRINT(EM_DIAGRAM):   by descending CV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat2_WORTH;
MPRINT(EM_DIAGRAM):   format STATVAR 6.0;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat2_WORTH;
MPRINT(EM_DIAGRAM):   if _N_<= 1000 then STATVAR=1;
MPRINT(EM_DIAGRAM):   else STATVAR=0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: niveles de número;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create view WORK.Stat2_distinct as select distinct id_documento from EMWS1.Ids2_DATA;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpcount from WORK.Stat2_distinct;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Stat2_count NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME ROLE DATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Stat2_count(obs=500) label noobs;
MPRINT(EM_DIAGRAM):   label NAME = "Variable" COUNT = "Número de ocurrencias" ROLE = "Rol";
MPRINT(EM_DIAGRAM):   var NAME ROLE COUNT;
MPRINT(EM_DIAGRAM):   title9 "Sumarización de los niveles de la variable";
MPRINT(EM_DIAGRAM):   title10 "(máximo imprimido 500 observaciones)";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Stat2_WORTH nodupkey out=WORK.Stat2_SELVAR(keep=Name StatVar);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   where statvar=1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3SY6E6X;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Stat2_analysisMeta;
MPRINT(EM_DIAGRAM):   merge WORK.M3SY6E6X WORK.Stat2_SELVAR(in=_a);
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if _a then STATVAR = 1;
MPRINT(EM_DIAGRAM):   else if ROLE in('INPUT', 'REJECTED') and REPORT ne 'Y' then delete;
MPRINT(EM_DIAGRAM):   if REPORT eq 'Y' then STATVAR = 1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M3BZ5WPJ;
MPRINT(EM_DIAGRAM):   set WORK.M3BZ5WPJ;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or Report='Y' or (role in('TARGET' 'FREQ' 'PREDICT' 'RESIDUAL' 'INPUT') and use = 'D'));
MPRINT(EM_DIAGRAM):   if ROLE = 'SEGMENT' then delete;
MPRINT(EM_DIAGRAM):   else if ROLE ^in('FREQ','TARGET') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M3R94II3;
MPRINT(EM_DIAGRAM):   set WORK.M3R94II3;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or Report='Y' or (role in('SEGMENT', 'TARGET' 'FREQ' 'PREDICT' 'RESIDUAL' 'INPUT') and use = 'D'));
MPRINT(EM_DIAGRAM):   if ROLE ne 'FREQ' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat2: calculando estadísticos para las variables de intervalo;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb data=EMWS1.Ids2_DATA nonorm maxlevel=513 varout=work._DMDBVAR(RENAME=(NAME=VARIABLE)) ;
MPRINT(EM_DIAGRAM):   var ACCESS ADAM ADDRESS ADVANC AMERICAN ANDI ANSWER APPLIC APPRECI ARAB AREA ARGIC ARMENIA ARMENIAN ATTACK AUDIO BANK BASE BATTERI BILL BOOK BRAIN BRIAN BUILD BUTTON CALIFORNIA CALL CAN CARD CASE CENTER CHANG CHIP CIRCUIT CLIENT CODE 
COLOR COMMUN COMP COMPANI COMPIL COMPUT CONNECT CONTROL COPI CORRECT CREAT CURRENT DAI DATA DAVID DEPART DEPT DESIGN DETECTOR DEVIC DISEAS DISPLAI DISTRIBUT DOCTOR DOESN DON DRAW DRIVE DRUG EDU EFFECT ELECTR ELECTRON EMAIL ENGIN ERROR EVENT EXPERI FACT 
FAX FEEL FILE FIND FOLLOWUP FONT FOOD FRI FRIEND FUNCTION GEB GENER GEORGIA GIVE GOOD GORDON GOVERN GRAPHIC GREAT GREEK GROUND GROUP HAPPEN HEAR HIGH HOME IDEA IMAG INCLUD INFO INFORM INPUT INSTITUT INTEREST INTERNET ISRA ISRAEL JEW JEWISH JOHN KEYBOARD 
KEYWORD KILL KIND LEVEL LIST LIVE LONG MACHIN MAIL MANAG MARK MED MEDIC MEDICIN MEMORI MICHAEL MIKE MON MOTIF MOTOROLA NATION NETWORK NEW NEWS NEWSREAD NOIS NUMBER OPER OPINION ORIGIN OUTPUT PAIN PALESTINIAN PART PATIENT PERSON PHONE PITT PITTSBURGH PLACE 
POINT POLICI POSIT POST POWER PROBLEM PRODUCT PROGRAM PROJECT PUBLIC QUESTION RADAR RADIO READ REASON RECEIV REMEMB REPLI REPORT REQUIR RESEARCH RESPONS ROBERT RUN SAT SCHOOL SCI SCIENC SCREEN SELL SEND SERDAR SERVER SERVIC SHOW SIDE SIGNAL SOFTWAR SOUND 
SOURC STANDARD START STATE STEVE STUDI SUBSCRIB SUGGEST SUN SUPPORT SWITCH SYSTEM TALK TECHNOLOG TERMIN TEST THAT THU TIME TREATMENT TRUE TUE TURKISH TYPE UNIV UNIVERS UNIX USENET USER UTEXA UUCP VERSION VIRGINIA VOLTAG WATER WED WIDGET WINDOW WIRE WONDER 
WORK WORLD XLIB XTERM YEAR YOU ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS1.Ids2_DATA out=_null_ outstat=work._STDIZE add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=(0 5 50 95 100);
MPRINT(EM_DIAGRAM):   var ACCESS ADAM ADDRESS ADVANC AMERICAN ANDI ANSWER APPLIC APPRECI ARAB AREA ARGIC ARMENIA ARMENIAN ATTACK AUDIO BANK BASE BATTERI BILL BOOK BRAIN BRIAN BUILD BUTTON CALIFORNIA CALL CAN CARD CASE CENTER CHANG CHIP CIRCUIT CLIENT CODE 
COLOR COMMUN COMP COMPANI COMPIL COMPUT CONNECT CONTROL COPI CORRECT CREAT CURRENT DAI DATA DAVID DEPART DEPT DESIGN DETECTOR DEVIC DISEAS DISPLAI DISTRIBUT DOCTOR DOESN DON DRAW DRIVE DRUG EDU EFFECT ELECTR ELECTRON EMAIL ENGIN ERROR EVENT EXPERI FACT 
FAX FEEL FILE FIND FOLLOWUP FONT FOOD FRI FRIEND FUNCTION GEB GENER GEORGIA GIVE GOOD GORDON GOVERN GRAPHIC GREAT GREEK GROUND GROUP HAPPEN HEAR HIGH HOME IDEA IMAG INCLUD INFO INFORM INPUT INSTITUT INTEREST INTERNET ISRA ISRAEL JEW JEWISH JOHN KEYBOARD 
KEYWORD KILL KIND LEVEL LIST LIVE LONG MACHIN MAIL MANAG MARK MED MEDIC MEDICIN MEMORI MICHAEL MIKE MON MOTIF MOTOROLA NATION NETWORK NEW NEWS NEWSREAD NOIS NUMBER OPER OPINION ORIGIN OUTPUT PAIN PALESTINIAN PART PATIENT PERSON PHONE PITT PITTSBURGH PLACE 
POINT POLICI POSIT POST POWER PROBLEM PRODUCT PROGRAM PROJECT PUBLIC QUESTION RADAR RADIO READ REASON RECEIV REMEMB REPLI REPORT REQUIR RESEARCH RESPONS ROBERT RUN SAT SCHOOL SCI SCIENC SCREEN SELL SEND SERDAR SERVER SERVIC SHOW SIDE SIGNAL SOFTWAR SOUND 
SOURC STANDARD START STATE STEVE STUDI SUBSCRIB SUGGEST SUN SUPPORT SWITCH SYSTEM TALK TECHNOLOG TERMIN TEST THAT THU TIME TREATMENT TRUE TUE TURKISH TYPE UNIV UNIVERS UNIX USENET USER UTEXA UUCP VERSION VIRGINIA VOLTAG WATER WED WIDGET WINDOW WIRE WONDER 
WORK WORLD XLIB XTERM YEAR YOU ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=work._STDIZE out=work._TRANSSTDIZE(drop=_LABEL_ rename=(_NAME_=VARIABLE));
MPRINT(EM_DIAGRAM):   id _type_;
MPRINT(EM_DIAGRAM):   where _TYPE_='P50';
MPRINT(EM_DIAGRAM):   run;
WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
MPRINT(EM_DIAGRAM):   proc sort data=work._TRANSSTDIZE;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=work._DMDBVAR;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Stat2INTERVAL;
MPRINT(EM_DIAGRAM):   merge work._TRANSSTDIZE work._DMDBVAR;
MPRINT(EM_DIAGRAM):   format N NMISS 8. MIN MAX P50 MEAN STD SKEWNESS KURTOSIS BEST8.3;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):    data WORK.Stat2INTERVAL;
MPRINT(EM_DIAGRAM):   length DATAROLE $20;
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   set WORK.Stat2INTERVAL;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Stat2_INTERVAL data=WORK.Stat2INTERVAL force;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Stat2_VariableSet out=tempVariable(keep=name label role rename=(name=variable));
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   by Variable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   merge EMWS1.Stat2_INTERVAL(in=_a) tempVariable;
MPRINT(EM_DIAGRAM):   by variable;
MPRINT(EM_DIAGRAM):   if label = '' then label=Variable;
MPRINT(EM_DIAGRAM):   if _a then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label Variable = "Variable";
MPRINT(EM_DIAGRAM):   label MEAN = "Media";
MPRINT(EM_DIAGRAM):   label N = "No ausente";
MPRINT(EM_DIAGRAM):   label STD = "Desviación estándar";
MPRINT(EM_DIAGRAM):   label NMISS = "Ausente";
MPRINT(EM_DIAGRAM):   label p50 = "Mediana";
MPRINT(EM_DIAGRAM):   label MIN = "Mínimo";
MPRINT(EM_DIAGRAM):   label MAX = "Máximo";
MPRINT(EM_DIAGRAM):   label SKEWNESS = "Asimetría";
MPRINT(EM_DIAGRAM):   label KURTOSIS = "Curtosis";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Stat2INTERVALSUMMARY;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   length ROLE $32;
MPRINT(EM_DIAGRAM):   if Variable = "ACCESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADAM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADDRESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADVANC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AMERICAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANDI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANSWER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APPLIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APPRECI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARAB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AREA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARGIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARMENIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARMENIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ATTACK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AUDIO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BANK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BASE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BATTERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BILL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BOOK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUILD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUTTON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CALIFORNIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CALL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CASE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CENTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHANG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHIP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CIRCUIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLIENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CODE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMMUN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPANI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONNECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONTROL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COPI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CORRECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CREAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CURRENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DATA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAVID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEPART" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEPT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DESIGN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DETECTOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEVIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISEAS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISPLAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISTRIBUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOCTOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOESN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRAW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRIVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRUG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EDU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EFFECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ELECTR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ELECTRON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EMAIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ENGIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ERROR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EVENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FACT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FAX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FEEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FILE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FIND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FOLLOWUP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FONT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FOOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FRIEND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FUNCTION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GEB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GENER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GEORGIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GIVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GOOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GORDON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GOVERN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GRAPHIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GREAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GREEK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GROUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GROUP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HAPPEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HIGH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IDEA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IMAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INCLUD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INFO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INFORM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INPUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INSTITUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTEREST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTERNET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ISRA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ISRAEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JEWISH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JOHN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KEYBOARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KEYWORD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KILL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KIND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEVEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LONG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MACHIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MAIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MANAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MARK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MED" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEDIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEDICIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEMORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MICHAEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MIKE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOTIF" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOTOROLA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NATION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NETWORK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEWS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEWSREAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NOIS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NUMBER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OPER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OPINION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ORIGIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OUTPUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PALESTINIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PART" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PATIENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PERSON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PHONE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PITT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PITTSBURGH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PLACE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POINT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POLICI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POSIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POWER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROBLEM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRODUCT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROGRAM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROJECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PUBLIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "QUESTION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RADAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RADIO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "READ" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REASON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RECEIV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REMEMB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REPLI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REPORT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REQUIR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESEARCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESPONS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ROBERT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RUN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCHOOL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCIENC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCREEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SELL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERDAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERVER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERVIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIDE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIGNAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOFTWAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOURC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STANDARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "START" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STATE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STEVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STUDI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUBSCRIB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUGGEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUPPORT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SWITCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SYSTEM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TALK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TECHNOLOG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TERMIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TIME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TREATMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRUE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TUE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TURKISH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TYPE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNIV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNIVERS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNIX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "USENET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "USER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UTEXA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UUCP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VERSION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VIRGINIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VOLTAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WATER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WED" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIDGET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WINDOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIRE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WONDER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WORK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WORLD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XLIB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XTERM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YEAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YOU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Stat2INTERVALSUMMARY NOTHREADS;
MPRINT(EM_DIAGRAM):   by DATAROLE ROLE Variable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options nonumber nocenter;
MPRINT(EM_DIAGRAM):   title;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Stat2INTERVALSUMMARY(obs=500) label noobs;
MPRINT(EM_DIAGRAM):   var Variable ROLE MEAN STD N NMISS MIN P50 MAX SKEWNESS KURTOSIS;
MPRINT(EM_DIAGRAM):   by DATAROLE;
MPRINT(EM_DIAGRAM):   title9 "Estadísticos descriptivos de la variable de intervalo";
MPRINT(EM_DIAGRAM):   title10 "(máximo imprimido 500 observaciones)";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3SY6E6X;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   label NMiss = "Ausente" absCV = "Valor absoluto del c.v." CV = "Coeficiente de variación" Sign = "Signo";
MPRINT(EM_DIAGRAM):   if MEAN ne . then do;
MPRINT(EM_DIAGRAM):   CV = STD/MEAN;
MPRINT(EM_DIAGRAM):   absCV = abs(CV);
MPRINT(EM_DIAGRAM):   if absCV < 0 then Sign = '-';
MPRINT(EM_DIAGRAM):   else Sign = '+';
MPRINT(EM_DIAGRAM):   absCV = abs(absCV);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   by DATAROLE descending absCV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   retain OrderedInput;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat2_INTERVAL;
MPRINT(EM_DIAGRAM):   by DATAROLE;
MPRINT(EM_DIAGRAM):   label OrderedInput = "Inputs ordenados";
MPRINT(EM_DIAGRAM):   format OrderedInput 5.0;
MPRINT(EM_DIAGRAM):   if first.DATAROLE then OrderedInput = 1;
MPRINT(EM_DIAGRAM):   else OrderedInput + 1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3SY6E6X;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
