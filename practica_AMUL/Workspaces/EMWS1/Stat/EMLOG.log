*------------------------------------------------------------*
Usuario:                Admin
Fecha:                19/11/20
Hora:                13H24
Sitio:                70161230
Plataforma:            X64_10HOME
Versión de mantenimiento: 9.04.01M6P111518
Versión de EM:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H24" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                19/11/20
Hora:                13H24
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2DD0UMP "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2DD0UMP new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H24" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70161230";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H24" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Stat_VariableSet noprint;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.StatMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc print data=WORK.StatMETA label noobs;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    data WORK.M0YLJO0E;
MPRINT(EM_DIAGRAM):   set WORK.M0YLJO0E;
MPRINT(EM_DIAGRAM):   where((role in('TARGET' 'FREQ' 'INPUT') and use in('D','Y')) or (role = 'REJECTED' and use = 'Y'));
MPRINT(EM_DIAGRAM):   if ROLE = 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: determinando las variables de análisis;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Create DMDB macros;
MPRINT(EM_DIAGRAM):   options nosource;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Stat: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Stat: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   options NOSOURCE;
MPRINT(EM_DIAGRAM):   * End DMDB macros generation;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Ids_DATA dmdbcat=WORK.Stat_DMDB varout=WORK.StatDMDBVar maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW
ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN ATHENA ATTACH ATTACK
ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND
BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL
CHARACT CHARG CHASTITI CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN COLOR
COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT
CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD
DEAL DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG
DISCLAIM DISCUSS DISEAS DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL
ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FACT FAIL FALS FAMILI
FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND
FULL FUNCTION FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD
HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD HUMAN HUNTSVIL ICON IDEA
IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC INTERGRAPH INTERN INTERNET INTERVIEW INVENT
INVOLV IRAN IRVIN ISLAM ISLAND ISN ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB
LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG LONGER LOOK LOOP LOST
LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON MEMBER MEMORI MENTION MENU MESSAG METAL METHOD
METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR
NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM OMRAN OPEN
OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PERSON PETER PHONE
PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID
PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST
RADAR RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR RESEARCH
RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE SCHEMAT SCHOOL SCHWARTZ SCI SCIENC
SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT
SHOULDN SHOW SICK SIDE SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK
SPOT STAI STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS SURGERI
SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE THEORI THERAPI THERE THEY THINK
THOMA THOUGHT THREAD THROW THU TIM TIME TIMER TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN
UNDERSTAND UNIT UNIV UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK
WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG ZIONISM ZIONIST
ZUMA
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
Note: Large memory request: 606816
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
Note: Large memory request: 606816
MPRINT(EM_DIAGRAM):    data WORK.StatDMDBVar;
MPRINT(EM_DIAGRAM):   set WORK.StatDMDBVar(keep=Name Mean Std);
MPRINT(EM_DIAGRAM):   CV = Std/Mean;
MPRINT(EM_DIAGRAM):   Keep NAME CV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Stat_WORTH data=WORK.StatDMDBVar force;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Stat_WORTH;
MPRINT(EM_DIAGRAM):   by descending CV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat_WORTH;
MPRINT(EM_DIAGRAM):   format STATVAR 6.0;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_WORTH;
MPRINT(EM_DIAGRAM):   if _N_<= 1000 then STATVAR=1;
MPRINT(EM_DIAGRAM):   else STATVAR=0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: niveles de número;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create view WORK.Stat_distinct as select distinct id_documento from EMWS1.Ids_DATA;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpcount from WORK.Stat_distinct;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.Stat_count NOTHREADS;
MPRINT(EM_DIAGRAM):   by NAME ROLE DATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Stat_count(obs=500) label noobs;
MPRINT(EM_DIAGRAM):   label NAME = "Variable" COUNT = "Número de ocurrencias" ROLE = "Rol";
MPRINT(EM_DIAGRAM):   var NAME ROLE COUNT;
MPRINT(EM_DIAGRAM):   title9 "Sumarización de los niveles de la variable";
MPRINT(EM_DIAGRAM):   title10 "(máximo imprimido 500 observaciones)";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Stat_WORTH nodupkey out=WORK.Stat_SELVAR(keep=Name StatVar);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   where statvar=1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3X59RL2;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.Stat_analysisMeta;
MPRINT(EM_DIAGRAM):   merge WORK.M3X59RL2 WORK.Stat_SELVAR(in=_a);
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if _a then STATVAR = 1;
MPRINT(EM_DIAGRAM):   else if ROLE in('INPUT', 'REJECTED') and REPORT ne 'Y' then delete;
MPRINT(EM_DIAGRAM):   if REPORT eq 'Y' then STATVAR = 1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M0S77U53;
MPRINT(EM_DIAGRAM):   set WORK.M0S77U53;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or Report='Y' or (role in('TARGET' 'FREQ' 'PREDICT' 'RESIDUAL' 'INPUT') and use = 'D'));
MPRINT(EM_DIAGRAM):   if ROLE = 'SEGMENT' then delete;
MPRINT(EM_DIAGRAM):   else if ROLE ^in('FREQ','TARGET') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M2S1D6E8;
MPRINT(EM_DIAGRAM):   set WORK.M2S1D6E8;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or Report='Y' or (role in('SEGMENT', 'TARGET' 'FREQ' 'PREDICT' 'RESIDUAL' 'INPUT') and use = 'D'));
MPRINT(EM_DIAGRAM):   if ROLE ne 'FREQ' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: calculando estadísticos para las variables de intervalo;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb data=EMWS1.Ids_DATA nonorm maxlevel=513 varout=work._DMDBVAR(RENAME=(NAME=VARIABLE)) ;
MPRINT(EM_DIAGRAM):   var ABSOLUT ACCELER ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVIC AFFECT AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW ANGEL ANIM
ANNOUNC ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPROACH APRIL ARCAD AREN ARGIC ARGUMENT ARM ARMENIA ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ATARI ATHEN ATHENA ATTACH ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND
BARBECU BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA
CAMBRIDG CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARNEGI CARRI CARTER CATALOG CAUS CELL CENTR CHANC CHANNEL CHARACT CHARG CHASTITI CHEAP CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL
CIVILIAN CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLUB CMU COLD COLLEG COLLIN COLOR COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMPAR COMPAT COMPIL COMPON CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONSID
CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT CONVENT CONVERT COOL COPI CORN CORP CORPOR COST COULDN COUNT COUNTRI COVER COVINGTON CPR CROHN CROSS CURE CURSOR CUSTOM CUTE CYCL DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVIDIAN DAYTON DEAD DEAL
DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPEND DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVIC DIAGNOS DIAGRAM DIALOG DICK DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG DISCLAIM DISCUSS DISEAS DISK DISTANC
DIVIS DOCUMENT DOMAIN DOMIN DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDUC EDWARD ELECTR EMPLOY EMUL ENERGI ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT
EVID EXACT EXECUT EXERCIS EXPANS EXPECT EXPENS EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FAIL FALS FAMILI FAST FATHER FAVOR FEATUR FEDER FEED FIELD FIGHT FIGUR FILL FILTER FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FONT FOOD
FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRIEND FULL FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GORDON GRANT GRAPHIC GREATLI GREEK GREEN GREG GROUND GUESS GUEST GUI
HAMAZA HAMID HANDL HANG HAPPI HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOOK HOSPIT HOST HOUR HOUS HOWARD HUNTSVIL ICON IGNOR
ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPRESS IMPROV INCREAS INDIVIDU INDUSTRI INFECT INJECT INPUT INSTAL INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTERFAC INTERGRAPH INTERVIEW INVENT INVOLV IRAN IRVIN ISLAM ISLAND ITEM JACK JAKE JASON JEFF JEFFERSON
JERUSALEM JESS JIM JIMMI JOEL JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KIDNEI KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEGAL LET LETTER LEVEL
LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONGER LOOK LOOP LOST LOT LOVE LUCK LUNG LYME MAHAN MAIN MAINTAIN MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER
MCGILL MEAN MEASUR MECHAN MEDIA MEDICIN MELLON MEMBER MEMORI MENU MESSAG METAL METHOD METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS
MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATUR NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NEUTRAL NICE NIGHT NNTP NOIS NORMAL NORTH NOTIC NUCLEAR NULL OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFICI
OHIO OLWM OMRAN OPEN OPENLOOK OPENWINDOW OPTION ORG ORGAN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PETER PHOTOGRAPHI PHYSIC PHYSICIAN
PICA PICK PICTUR PILL PIN PIXEL PIXMAP PLAI PLAIN PLAN PLANE PLAYER PLUG POINTER POLIC POPUL POPULAR POPUP PORT POSIT POSSIBL POSTER POSTSCRIPT PRACTIC PREFER PRESENT PRESID PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROCESS PRODUC PROGRAMM
PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PUBLISH PULL PURPOS PUT QUACK QUALITI QUOT RACE RACISM RACIST RADAR RADIO RAINER RANG RATE REACTION READER REALIZ REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI
RELAT RELEAS RELIABL RELIGION REMAIN REMOT REMOV REPEAT REPLAC REQUEST RESERV RESIST RESISTOR RESOURC RESPOND REST RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUSSEL RUSSIAN SALAH SALE SALMON
SAMPL SAT SAVE SCHEMAT SCHWARTZ SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK
SHOT SHOULDN SICK SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMOKE SOCIETI SOLARI SOLDIER SOLUT SORT SOUND SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPEED SPELL SPOCK SPOT STAI STAND STATEMENT STATIC STATU
STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUIT SUNO SUPERSTIT SUPPLI SUPPOS SURGERI SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA TABL TAKE TAPE TARGET TAST TCP TECHNIC
TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THEE THEORI THERAPI THERE THEY THINK THOMA THREAD THROW TIM TIMER TITL TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM
TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUTH TUBE TURK TURKEI TURKISH TURN TYPIC UNDEFIN UNDERSTAND UNIX UNKNOWN UPDAT URBANA USA UTEXA VALU VANDERBYL VARIABL VAX VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR
WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WIRE WOMEN WON WORD WORTH WPI WRITE WRITTEN XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAST YIGAL YORK YOUNG ZIONISM ZIONIST ZUMA
;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS1.Ids_DATA out=_null_ outstat=work._STDIZE add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=(0 5 50 95 100);
MPRINT(EM_DIAGRAM):   var ABSOLUT ACCELER ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVIC AFFECT AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW ANGEL ANIM
ANNOUNC ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPROACH APRIL ARCAD AREN ARGIC ARGUMENT ARM ARMENIA ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ATARI ATHEN ATHENA ATTACH ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND
BARBECU BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA
CAMBRIDG CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARNEGI CARRI CARTER CATALOG CAUS CELL CENTR CHANC CHANNEL CHARACT CHARG CHASTITI CHEAP CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL
CIVILIAN CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLUB CMU COLD COLLEG COLLIN COLOR COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMPAR COMPAT COMPIL COMPON CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONSID
CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT CONVENT CONVERT COOL COPI CORN CORP CORPOR COST COULDN COUNT COUNTRI COVER COVINGTON CPR CROHN CROSS CURE CURSOR CUSTOM CUTE CYCL DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVIDIAN DAYTON DEAD DEAL
DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPEND DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVIC DIAGNOS DIAGRAM DIALOG DICK DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG DISCLAIM DISCUSS DISEAS DISK DISTANC
DIVIS DOCUMENT DOMAIN DOMIN DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDUC EDWARD ELECTR EMPLOY EMUL ENERGI ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT
EVID EXACT EXECUT EXERCIS EXPANS EXPECT EXPENS EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FAIL FALS FAMILI FAST FATHER FAVOR FEATUR FEDER FEED FIELD FIGHT FIGUR FILL FILTER FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FONT FOOD
FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRIEND FULL FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GORDON GRANT GRAPHIC GREATLI GREEK GREEN GREG GROUND GUESS GUEST GUI
HAMAZA HAMID HANDL HANG HAPPI HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOOK HOSPIT HOST HOUR HOUS HOWARD HUNTSVIL ICON IGNOR
ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPRESS IMPROV INCREAS INDIVIDU INDUSTRI INFECT INJECT INPUT INSTAL INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTERFAC INTERGRAPH INTERVIEW INVENT INVOLV IRAN IRVIN ISLAM ISLAND ITEM JACK JAKE JASON JEFF JEFFERSON
JERUSALEM JESS JIM JIMMI JOEL JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KIDNEI KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEGAL LET LETTER LEVEL
LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONGER LOOK LOOP LOST LOT LOVE LUCK LUNG LYME MAHAN MAIN MAINTAIN MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER
MCGILL MEAN MEASUR MECHAN MEDIA MEDICIN MELLON MEMBER MEMORI MENU MESSAG METAL METHOD METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS
MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATUR NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NEUTRAL NICE NIGHT NNTP NOIS NORMAL NORTH NOTIC NUCLEAR NULL OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFICI
OHIO OLWM OMRAN OPEN OPENLOOK OPENWINDOW OPTION ORG ORGAN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PETER PHOTOGRAPHI PHYSIC PHYSICIAN
PICA PICK PICTUR PILL PIN PIXEL PIXMAP PLAI PLAIN PLAN PLANE PLAYER PLUG POINTER POLIC POPUL POPULAR POPUP PORT POSIT POSSIBL POSTER POSTSCRIPT PRACTIC PREFER PRESENT PRESID PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROCESS PRODUC PROGRAMM
PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PUBLISH PULL PURPOS PUT QUACK QUALITI QUOT RACE RACISM RACIST RADAR RADIO RAINER RANG RATE REACTION READER REALIZ REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI
RELAT RELEAS RELIABL RELIGION REMAIN REMOT REMOV REPEAT REPLAC REQUEST RESERV RESIST RESISTOR RESOURC RESPOND REST RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUSSEL RUSSIAN SALAH SALE SALMON
SAMPL SAT SAVE SCHEMAT SCHWARTZ SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK
SHOT SHOULDN SICK SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMOKE SOCIETI SOLARI SOLDIER SOLUT SORT SOUND SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPEED SPELL SPOCK SPOT STAI STAND STATEMENT STATIC STATU
STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUIT SUNO SUPERSTIT SUPPLI SUPPOS SURGERI SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA TABL TAKE TAPE TARGET TAST TCP TECHNIC
TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THEE THEORI THERAPI THERE THEY THINK THOMA THREAD THROW TIM TIMER TITL TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM
TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUTH TUBE TURK TURKEI TURKISH TURN TYPIC UNDEFIN UNDERSTAND UNIX UNKNOWN UPDAT URBANA USA UTEXA VALU VANDERBYL VARIABL VAX VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR
WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WIRE WOMEN WON WORD WORTH WPI WRITE WRITTEN XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAST YIGAL YORK YOUNG ZIONISM ZIONIST ZUMA
;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=work._STDIZE out=work._TRANSSTDIZE(drop=_LABEL_ rename=(_NAME_=VARIABLE));
MPRINT(EM_DIAGRAM):   id _type_;
MPRINT(EM_DIAGRAM):   where _TYPE_='P50';
MPRINT(EM_DIAGRAM):   run;
WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
MPRINT(EM_DIAGRAM):   proc sort data=work._TRANSSTDIZE;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=work._DMDBVAR;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.StatINTERVAL;
MPRINT(EM_DIAGRAM):   merge work._TRANSSTDIZE work._DMDBVAR;
MPRINT(EM_DIAGRAM):   format N NMISS 8. MIN MAX P50 MEAN STD SKEWNESS KURTOSIS BEST8.3;
MPRINT(EM_DIAGRAM):   by VARIABLE;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):    data WORK.StatINTERVAL;
MPRINT(EM_DIAGRAM):   length DATAROLE $20;
MPRINT(EM_DIAGRAM):   retain DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   set WORK.StatINTERVAL;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc append base=EMWS1.Stat_INTERVAL data=WORK.StatINTERVAL force;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Stat_VariableSet out=tempVariable(keep=name label role rename=(name=variable));
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   by Variable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   merge EMWS1.Stat_INTERVAL(in=_a) tempVariable;
MPRINT(EM_DIAGRAM):   by variable;
MPRINT(EM_DIAGRAM):   if label = '' then label=Variable;
MPRINT(EM_DIAGRAM):   if _a then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable VARIABLE by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label Variable = "Variable";
MPRINT(EM_DIAGRAM):   label MEAN = "Media";
MPRINT(EM_DIAGRAM):   label N = "No ausente";
MPRINT(EM_DIAGRAM):   label STD = "Desviación estándar";
MPRINT(EM_DIAGRAM):   label NMISS = "Ausente";
MPRINT(EM_DIAGRAM):   label p50 = "Mediana";
MPRINT(EM_DIAGRAM):   label MIN = "Mínimo";
MPRINT(EM_DIAGRAM):   label MAX = "Máximo";
MPRINT(EM_DIAGRAM):   label SKEWNESS = "Asimetría";
MPRINT(EM_DIAGRAM):   label KURTOSIS = "Curtosis";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.StatINTERVALSUMMARY;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   length ROLE $32;
MPRINT(EM_DIAGRAM):   if Variable = "ABSOLUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ACCELER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ACCESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ACCOUNT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ACCUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ACID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ACTION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ACTIV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADAM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADCOM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADDIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADDRESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADMIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADMINISTR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADRIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ADVIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AFFECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ALAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ALLERG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ALLERGI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ALLOC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ALLOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ALTERN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AMATEUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AMERICAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AMOUNT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AMP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AMPLIFI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANALOG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANDI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANDREW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANGEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANIM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANNOUNC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANTENNA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANTI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ANTIBIOT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APPAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APPEAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APPL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APPROACH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "APRIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARCAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AREN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARGIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARGUMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARMENIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARMI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARTICL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ARTIFICI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ASK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ASSEMBL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ASSIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ASSOCI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ATARI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ATHEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ATHENA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ATTACH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ATTEMPT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ATTRIBUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AUDIO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AUSTIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AUSTRALIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AUTHOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AVOID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "AZERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BACKGROUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BARBECU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BASIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BATTERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BECK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BELL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BENSON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BERKELEI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BEYER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BILL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BIRTHDAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BITMAP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BLACK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BLOOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BLUE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BOARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BODI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BOMB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BORDER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BOSTON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BOUGHT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BOULDER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BOX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BREAK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRING" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BRITISH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BROWN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BTW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUFFER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUILT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BULB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUNCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUSH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUSI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "BUTTON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CABL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CALIFORNIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CAMBRIDG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CANADA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CANCER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CANDIDA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CAPABL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CAPACITOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CAPIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CARNEGI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CARRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CARTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CATALOG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CAUS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CELL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CENTR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHANC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHANNEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHARACT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHARG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHASTITI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHEAP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHEER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHEMIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHICAGO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHILD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHILDREN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHINES" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHOIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHRISTIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CHRISTOPH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CIRCUIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CITI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CITIZEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CIVIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CIVILIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLASS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLEAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLEVELAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLIENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLINIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLINTON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLOCK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CLUB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CMU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLLEG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLLIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLORADO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLORMAP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COLUMBIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMBIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMMAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMMERCI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMMIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMMON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COMPON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONCERN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONCRET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONDIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONFER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONFIGUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONFLICT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONFUS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONSID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONSIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONSTRUCT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONSULT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONTACT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONTENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONTEXT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONVENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CONVERT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COOL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COPI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CORN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CORP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CORPOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COULDN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COUNT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COUNTRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COVER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "COVINGTON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CPR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CROHN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CROSS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CURE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CURSOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CUSTOM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CUTE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "CYCL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAILI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DALE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAMAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DANGER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DANIEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DANNI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DATA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAVIDIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DAYTON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEATH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DECID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DECOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEFAULT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEFIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEFINIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEGRE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEIR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DELET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEPEND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEPTH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DESIGN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DESTROI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DETAIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DETECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DETECTOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DETERMIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DEVIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIAGNOS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIAGRAM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIALOG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DICK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIEGO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIFFER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIGIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIMENS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIRECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIRECTORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISCHARG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISCLAIM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISCUSS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISEAS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DISTANC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DIVIS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOCUMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOMAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOMIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DONAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DORTMUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOUBT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DOUG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRAW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRIVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRIVER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DROP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DRUG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DUMP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "DYER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EASI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EASILI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EAST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ECHO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EDITOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EDUC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EDWARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ELECTR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EMPLOY" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EMUL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ENERGI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ENGLAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ENTIR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ENTRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ENVIRON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EPROM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EQUAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EQUIP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ERIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ERROR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ESCAP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ESSENTI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EUROP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EUROPEAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EVENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EVID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXACT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXECUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXERCIS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPANS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPENS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPERIENC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPLAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPLOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPOS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXPRESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXTENS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXTERMIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "EXTRA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FACE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FAIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FALS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FAMILI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FAST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FATHER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FAVOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FEATUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FEDER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FEED" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FIELD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FIGHT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FIGUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FILL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FILTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FINE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FIRE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FIX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FLAME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FLASH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FLOOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FLUKE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FOCU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FOLK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FONT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FOOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FORGET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FORM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FORMAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FOURD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FRAME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FRANC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FRANK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FREE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FREEDOM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FREEMAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FREQUENC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FREQUENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FRIEND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FULL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "FUTUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GAME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GARFIEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GARI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GATEWAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GAZA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GEB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GENOCID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GEORG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GEORGIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GERMAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GERMANI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GILBERT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GORDON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GRANT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GRAPHIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GREATLI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GREEK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GREEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GREG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GROUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GUESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GUEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "GUI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HAMAZA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HAMID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HANDL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HANG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HAPPI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HARDWAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HARRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HARVARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HATE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HAVEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEADACH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEALTH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEART" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEAVI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEIGHT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HELP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HENRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HENRIK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HERNIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HERNLEM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEWLETT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HEZBOLLAH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HIGHER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HINT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HISTOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HISTORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOLD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOLOCAUST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOOK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOSPIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOUS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HOWARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "HUNTSVIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ICON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IGNOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ILLEG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ILLINOI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IMAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IMAGIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IMAK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IMPLEMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IMPRESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IMPROV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INCREAS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INDIVIDU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INDUSTRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INFECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INJECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INPUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INSTAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INSTRUMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTELLECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTELLIG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTEND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTERFAC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTERGRAPH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INTERVIEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INVENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "INVOLV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IRAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "IRVIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ISLAM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ISLAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ITEM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JACK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JAKE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JASON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JEFF" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JEFFERSON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JERUSALEM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JIM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JIMMI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JOEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JOSEPH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JOYSTICK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "JUSTIFI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KEI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KEITH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KENNETH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KEYBOARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KIDNEI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KIRLIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KLUTE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KNOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KNOWLEDG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "KRILLEAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LAB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LABEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LABORATORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LACK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LANGUAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LARG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LARRI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LASER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LAW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEADER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEARN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEAV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEBANES" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEBANON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEGAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LETTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LEVEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIBRARI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LICENS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIFE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIGHT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIMIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LINK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LINUX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LISTEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LITERATUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LIVNI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOCAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOCAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOGIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOGIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LONGER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOOK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOOP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LOVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LUCK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LUNG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "LYME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MAHAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MAINTAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MAKE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MANAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MANUAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MAP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MARC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MARK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MARKET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MARTIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MASK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MASS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MASSACR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MATERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MATH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MATTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MCGILL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEASUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MECHAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEDIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEDICIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MELLON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEMBER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MEMORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MENU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MESSAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "METAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "METHOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "METHODOLOG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MICHAEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MIDDL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MIGRAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MIKE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MILE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MILITARI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MILLION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MIND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MINUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MISC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MISS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MISTAK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MODE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MODEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MODIFI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MODUL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MONEI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MONITOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MONTH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MORAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOTIF" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOTOROLA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOUNTAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOUS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MOVEMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MSG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MULTI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MULTIPL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MURDER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MUSCL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "MUSLIM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NAFTALI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NAME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NASA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NATUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NAZI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NECESSARILI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEED" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEEDL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEGOTI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NETANYAHU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NETCOM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NETNEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NEUTRAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NICE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NIGHT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NNTP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NOIS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NORMAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NORTH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NOTIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NUCLEAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "NULL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OBJECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OBSERV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OBTAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OCCUP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OCCUPI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OCCUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ODOMET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OFFER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OFFICI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OHIO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OLWM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OMRAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OPEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OPENLOOK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OPENWINDOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OPTION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ORG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ORGAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OSCIL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OUTLET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OUTPUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "OWNER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PACKAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PACKARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PACKET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PAGE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PAID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PALESTIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PALESTINIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PAPER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PARENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PARTI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PASS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PATCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PATIENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PATRICK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PAUL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PEAC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PERFORM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PERIOD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PERSIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PETER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PHOTOGRAPHI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PHYSIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PHYSICIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PICA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PICK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PICTUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PILL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PIXEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PIXMAP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PLAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PLAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PLAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PLANE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PLAYER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PLUG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POINTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POLIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POPUL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POPULAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POPUP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PORT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POSIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POSSIBL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POSTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "POSTSCRIPT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRACTIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PREFER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRESENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRESID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRETTI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PREVENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PREVIOU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRICE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRINT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRINTER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRIVAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROCESS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PRODUC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROGRAMM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROJECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROLIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROPAGANDA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROPER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROPOS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROTECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROTOCOL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PROVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PUBLISH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PULL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PURPOS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "PUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "QUACK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "QUALITI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "QUOT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RACE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RACISM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RACIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RADAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RADIO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RAINER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RANG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RATE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REACTION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "READER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REALIZ" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RECAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RECEIV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RECOGN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RECOMMEND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REDUC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REDUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REGION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REGIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REILLI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RELAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RELAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RELEAS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RELIABL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RELIGION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REMAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REMOT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REMOV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REPEAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REPLAC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REQUEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESERV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESISTOR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESOURC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RESPOND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RETURN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "REVIEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RICH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RICHARD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RICHARDSON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RIGHT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RIND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RING" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RISK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RIVER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ROAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ROBERT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ROCHEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ROOM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ROOT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RUI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RULE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RUSSEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "RUSSIAN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SALAH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SALE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SALMON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SAMPL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SAVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCHEMAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCHWARTZ" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCIENTIF" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCIENTIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCOPE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCOTT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SCREEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SDSU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEARCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEATTL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SECTION" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SECUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEEK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEIZUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SELECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SELL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEMIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SENS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SENSIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEPAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEQUENC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERDAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SERIAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SEXUAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHACK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHAME" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHARE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHELL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHNEKENDORF" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHOOT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHORT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHOSTACK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHOT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SHOULDN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SICK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIGN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIGNAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIGNIFIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIMILAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIMM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIMPL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIMPLI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SITE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SITUAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SIZE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SKEPTIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SKIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SLEEP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SLOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SMOKE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOCIETI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOLARI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOLDIER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOLUT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SORT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOUND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOUTH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SOVIET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPACE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPARC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPEAK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPEC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPECIAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPEED" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPELL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPOCK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SPOT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STATEMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STATIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STATU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STEIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STEPHEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STEVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STEVEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STONE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STOP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STORE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STRING" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STRIP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STUDENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STUPID" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "STYLE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUBSCRIB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUBSCRIV" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUFFER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUNO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUPERSTIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUPPLI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUPPOS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SURGERI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SURPRIS" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SURREND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SUSPECT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SWITCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SYMBOL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SYMPTOM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SYNDROM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "SYRIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TABL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TAKE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TAPE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TARGET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TAST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TCP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TECHNIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TEKTRONIX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TEL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TELEPHON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TELL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TEMPERATUR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TERM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TERMIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TERRITORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TERROR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TERRORIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TEXA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TEXT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THEE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THEORI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THERAPI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THERE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THEY" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THINK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THOMA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THREAD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "THROW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TIM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TIMER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TITL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TOLD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TOM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TONIGHT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TOOL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TOOLKIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TOPIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TORONTO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TOTAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TOWER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRACE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRAFFIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRAIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRANSFORM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRANSLAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRANSMIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TREAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TREATMENT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TROOP" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TROUBL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TRUTH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TUBE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TURK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TURKEI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TURKISH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TURN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "TYPIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNDEFIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNDERSTAND" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNIX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UNKNOWN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UPDAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "URBANA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "USA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "UTEXA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VALU" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VANDERBYL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VARIABL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VAX" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VIDEO" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VIEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VILLAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VIRGINIA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VIRTUAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VISUAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VOIC" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VOLT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "VOLTAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WAI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WAIT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WALL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WANT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WAR" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WARN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WASHINGTON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WASN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WAST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WATCH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WATER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WAVE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WAYN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WEIGHT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WEST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WESTERN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WHAT" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WHITE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIDE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIDGET" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIDTH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIFE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WIRE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WOMEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WON" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WORD" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WORTH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WPI" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WRITE" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "WRITTEN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XLIB" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XPUTIMAG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XSERVER" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XTERM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XTERMIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XVIEW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "XWINDOW" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YASSIN" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YEAH" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YEAST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YIGAL" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YORK" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "YOUNG" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ZIONISM" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ZIONIST" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else if Variable = "ZUMA" then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.StatINTERVALSUMMARY NOTHREADS;
MPRINT(EM_DIAGRAM):   by DATAROLE ROLE Variable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options nonumber nocenter;
MPRINT(EM_DIAGRAM):   title;
MPRINT(EM_DIAGRAM):   proc print data=WORK.StatINTERVALSUMMARY(obs=500) label noobs;
MPRINT(EM_DIAGRAM):   var Variable ROLE MEAN STD N NMISS MIN P50 MAX SKEWNESS KURTOSIS;
MPRINT(EM_DIAGRAM):   by DATAROLE;
MPRINT(EM_DIAGRAM):   title9 "Estadísticos descriptivos de la variable de intervalo";
MPRINT(EM_DIAGRAM):   title10 "(máximo imprimido 500 observaciones)";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title9;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER NONUMBER;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3X59RL2;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   label NMiss = "Ausente" absCV = "Valor absoluto del c.v." CV = "Coeficiente de variación" Sign = "Signo";
MPRINT(EM_DIAGRAM):   if MEAN ne . then do;
MPRINT(EM_DIAGRAM):   CV = STD/MEAN;
MPRINT(EM_DIAGRAM):   absCV = abs(CV);
MPRINT(EM_DIAGRAM):   if absCV < 0 then Sign = '-';
MPRINT(EM_DIAGRAM):   else Sign = '+';
MPRINT(EM_DIAGRAM):   absCV = abs(absCV);
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   by DATAROLE descending absCV;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   retain OrderedInput;
MPRINT(EM_DIAGRAM):   set EMWS1.Stat_INTERVAL;
MPRINT(EM_DIAGRAM):   by DATAROLE;
MPRINT(EM_DIAGRAM):   label OrderedInput = "Inputs ordenados";
MPRINT(EM_DIAGRAM):   format OrderedInput 5.0;
MPRINT(EM_DIAGRAM):   if first.DATAROLE then OrderedInput = 1;
MPRINT(EM_DIAGRAM):   else OrderedInput + 1;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M3X59RL2;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H24" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                19/11/20
Hora:                13H24
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0H7QGPF "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0H7QGPF new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat_TRAIN / view=EMWS1.Stat_TRAIN ;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_DATA ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Stat_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Stat_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Stat_TRAIN out=WORK.M0785Z8R noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0785Z8R;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0785Z8R(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0785Z8R;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0785Z8R;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2Z0LBYA NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3JBA1LV(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT=
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Stat";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'ABSOLUT' 'ACCELER' 'ACCESS' 'ACCOUNT' 'ACCUR' 'ACID' 'ACTION' 'ACTIV' 'ADAM' 'ADCOM' 'ADDIT' 'ADDRESS' 'ADMIN' 'ADMINISTR' 'ADRIAN' 'ADVIC' 'AFFECT' 'AID' 'ALAN' 'ALLERG' 'ALLERGI' 'ALLOC' 'ALLOW' 'ALTERN'
'AMATEUR' 'AMERICAN' 'AMOUNT' 'AMP' 'AMPLIFI' 'ANA' 'ANALOG' 'ANDI' 'ANDREW' 'ANGEL' 'ANIM' 'ANNOUNC' 'ANTENNA' 'ANTI' 'ANTIBIOT' 'APP' 'APPAR' 'APPEAR' 'APPL' 'APPROACH' 'APRIL' 'ARCAD' 'AREN' 'ARGIC' 'ARGUMENT' 'ARM' 'ARMENIA' 'ARMI' 'ARTICL' 'ARTIFICI'
'ASK' 'ASSEMBL' 'ASSIST' 'ASSOCI' 'ATARI' 'ATHEN' 'ATHENA' 'ATTACH' 'ATTEMPT' 'ATTRIBUT' 'AUDIO' 'AUSTIN' 'AUSTRALIA' 'AUTHOR' 'AVOID' 'AZERI' 'BACKGROUND' 'BAND' 'BARBECU' 'BASIC' 'BATTERI' 'BECK' 'BELL' 'BENSON' 'BERKELEI' 'BEYER' 'BILL' 'BIRTHDAI'
'BIT' 'BITMAP' 'BLACK' 'BLOOD' 'BLUE' 'BOARD' 'BODI' 'BOMB' 'BORDER' 'BOSTON' 'BOUGHT' 'BOULDER' 'BOX' 'BRAD' 'BRAIN' 'BRAND' 'BREAK' 'BRIAN' 'BRING' 'BRITISH' 'BROWN' 'BTW' 'BUFFER' 'BUILT' 'BULB' 'BUNCH' 'BUSH' 'BUSI' 'BUTTON' 'CABL' 'CALIFORNIA'
'CAMBRIDG' 'CANADA' 'CANCER' 'CANDIDA' 'CAPABL' 'CAPACITOR' 'CAPIT' 'CAR' 'CARD' 'CARNEGI' 'CARRI' 'CARTER' 'CATALOG' 'CAUS' 'CELL' 'CENTR' 'CHANC' 'CHANNEL' 'CHARACT' 'CHARG' 'CHASTITI' 'CHEAP' 'CHEER' 'CHEMIC' 'CHICAGO' 'CHILD' 'CHILDREN' 'CHINES'
'CHOIC' 'CHRI' 'CHRISTIAN' 'CHRISTOPH' 'CIRCUIT' 'CITI' 'CITIZEN' 'CIVIL' 'CIVILIAN' 'CLASS' 'CLEAR' 'CLEVELAND' 'CLIENT' 'CLINIC' 'CLINTON' 'CLOCK' 'CLUB' 'CMU' 'COLD' 'COLLEG' 'COLLIN' 'COLOR' 'COLORADO' 'COLORMAP' 'COLUMBIA' 'COMBIN' 'COMMAND'
'COMMENT' 'COMMERCI' 'COMMIT' 'COMMON' 'COMPAR' 'COMPAT' 'COMPIL' 'COMPON' 'CONCERN' 'CONCRET' 'CONDIT' 'CONFER' 'CONFIGUR' 'CONFLICT' 'CONFUS' 'CONSID' 'CONSIST' 'CONSTRUCT' 'CONSULT' 'CONTACT' 'CONTENT' 'CONTEXT' 'CONVENT' 'CONVERT' 'COOL' 'COPI' 'CORN'
'CORP' 'CORPOR' 'COST' 'COULDN' 'COUNT' 'COUNTRI' 'COVER' 'COVINGTON' 'CPR' 'CROHN' 'CROSS' 'CURE' 'CURSOR' 'CUSTOM' 'CUTE' 'CYCL' 'DAILI' 'DALE' 'DAMAG' 'DANGER' 'DANIEL' 'DANNI' 'DATA' 'DAVE' 'DAVIDIAN' 'DAYTON' 'DEAD' 'DEAL' 'DEAR' 'DEATH' 'DECID'
'DECOD' 'DEFAULT' 'DEFIN' 'DEFINIT' 'DEGRE' 'DEIR' 'DELET' 'DEPEND' 'DEPTH' 'DESIGN' 'DESTROI' 'DETAIL' 'DETECT' 'DETECTOR' 'DETERMIN' 'DEVIC' 'DIAGNOS' 'DIAGRAM' 'DIALOG' 'DICK' 'DIEGO' 'DIET' 'DIFFER' 'DIGIT' 'DIMENS' 'DIOD' 'DIRECT' 'DIRECTORI'
'DISCHARG' 'DISCLAIM' 'DISCUSS' 'DISEAS' 'DISK' 'DISTANC' 'DIVIS' 'DOCUMENT' 'DOMAIN' 'DOMIN' 'DONAT' 'DORTMUND' 'DOUBT' 'DOUG' 'DRAW' 'DRIVE' 'DRIVER' 'DROP' 'DRUG' 'DUMP' 'DYER' 'EASI' 'EASILI' 'EAST' 'EAT' 'ECHO' 'EDITOR' 'EDUC' 'EDWARD' 'ELECTR'
'EMPLOY' 'EMUL' 'ENERGI' 'ENGLAND' 'ENTIR' 'ENTRI' 'ENVIRON' 'EPROM' 'EQUAL' 'EQUIP' 'ERIC' 'ERROR' 'ESCAP' 'ESSENTI' 'EUROP' 'EUROPEAN' 'EVENT' 'EVID' 'EXACT' 'EXECUT' 'EXERCIS' 'EXPANS' 'EXPECT' 'EXPENS' 'EXPERIENC' 'EXPLAIN' 'EXPLOD' 'EXPOS' 'EXPRESS'
'EXTENS' 'EXTERMIN' 'EXTRA' 'FACE' 'FAIL' 'FALS' 'FAMILI' 'FAST' 'FATHER' 'FAVOR' 'FEATUR' 'FEDER' 'FEED' 'FIELD' 'FIGHT' 'FIGUR' 'FILL' 'FILTER' 'FINE' 'FIRE' 'FIX' 'FLAME' 'FLASH' 'FLOOR' 'FLUKE' 'FOCU' 'FOLK' 'FONT' 'FOOD' 'FORGET' 'FORM' 'FORMAT'
'FOURD' 'FRAME' 'FRANC' 'FRANK' 'FREE' 'FREEDOM' 'FREEMAN' 'FREQUENC' 'FREQUENT' 'FRIEND' 'FULL' 'FUTUR' 'GAIN' 'GAME' 'GARFIEL' 'GARI' 'GATEWAI' 'GAZA' 'GEB' 'GENOCID' 'GEORG' 'GEORGIA' 'GERMAN' 'GERMANI' 'GILBERT' 'GORDON' 'GRANT' 'GRAPHIC' 'GREATLI'
'GREEK' 'GREEN' 'GREG' 'GROUND' 'GUESS' 'GUEST' 'GUI' 'HAMAZA' 'HAMID' 'HANDL' 'HANG' 'HAPPI' 'HARDWAR' 'HARRI' 'HARVARD' 'HATE' 'HAVEN' 'HEAD' 'HEADACH' 'HEALTH' 'HEART' 'HEAT' 'HEAVI' 'HEIGHT' 'HELP' 'HENRI' 'HENRIK' 'HERNIA' 'HERNLEM' 'HEWLETT'
'HEZBOLLAH' 'HIGHER' 'HINT' 'HISTOR' 'HISTORI' 'HOLD' 'HOLOCAUST' 'HOOK' 'HOSPIT' 'HOST' 'HOUR' 'HOUS' 'HOWARD' 'HUNTSVIL' 'ICON' 'IGNOR' 'ILLEG' 'ILLINOI' 'IMAG' 'IMAGIN' 'IMAK' 'IMPLEMENT' 'IMPRESS' 'IMPROV' 'INCREAS' 'INDIVIDU' 'INDUSTRI' 'INFECT'
'INJECT' 'INPUT' 'INSTAL' 'INSTRUMENT' 'INTEL' 'INTELLECT' 'INTELLIG' 'INTEND' 'INTERFAC' 'INTERGRAPH' 'INTERVIEW' 'INVENT' 'INVOLV' 'IRAN' 'IRVIN' 'ISLAM' 'ISLAND' 'ITEM' 'JACK' 'JAKE' 'JASON' 'JEFF' 'JEFFERSON' 'JERUSALEM' 'JESS' 'JIM' 'JIMMI' 'JOEL'
'JOSEPH' 'JOYSTICK' 'JUSTIFI' 'KEI' 'KEITH' 'KEN' 'KENNETH' 'KEYBOARD' 'KIDNEI' 'KIRLIAN' 'KLUTE' 'KNOW' 'KNOWLEDG' 'KRILLEAN' 'LAB' 'LABEL' 'LABORATORI' 'LACK' 'LAND' 'LANGUAG' 'LARG' 'LARRI' 'LASER' 'LAW' 'LEAD' 'LEADER' 'LEARN' 'LEAV' 'LEBANES'
'LEBANON' 'LEGAL' 'LET' 'LETTER' 'LEVEL' 'LIBRARI' 'LICENS' 'LIFE' 'LIGHT' 'LIMIT' 'LINK' 'LINUX' 'LIST' 'LISTEN' 'LITERATUR' 'LIVNI' 'LOAD' 'LOCAL' 'LOCAT' 'LOGIC' 'LOGIN' 'LONGER' 'LOOK' 'LOOP' 'LOST' 'LOT' 'LOVE' 'LUCK' 'LUNG' 'LYME' 'MAHAN' 'MAIN'
'MAINTAIN' 'MAKE' 'MAN' 'MANAG' 'MANUAL' 'MAP' 'MARC' 'MARK' 'MARKET' 'MARTIN' 'MASK' 'MASS' 'MASSACR' 'MATERI' 'MATH' 'MATTER' 'MCGILL' 'MEAN' 'MEASUR' 'MECHAN' 'MEDIA' 'MEDICIN' 'MELLON' 'MEMBER' 'MEMORI' 'MENU' 'MESSAG' 'METAL' 'METHOD' 'METHODOLOG'
'MICHAEL' 'MIDDL' 'MIGRAIN' 'MIKE' 'MILE' 'MILITARI' 'MILLION' 'MIND' 'MINUT' 'MISC' 'MISS' 'MISTAK' 'MODE' 'MODEL' 'MODIFI' 'MODUL' 'MONEI' 'MONITOR' 'MONTH' 'MORAL' 'MOTIF' 'MOTOROLA' 'MOUNTAIN' 'MOUS' 'MOVEMENT' 'MSG' 'MULTI' 'MULTIPL' 'MURDER' 'MUSCL'
'MUSLIM' 'NAFTALI' 'NAME' 'NASA' 'NATUR' 'NAZI' 'NECESSARILI' 'NEED' 'NEEDL' 'NEGOTI' 'NET' 'NETANYAHU' 'NETCOM' 'NETNEW' 'NEUTRAL' 'NICE' 'NIGHT' 'NNTP' 'NOIS' 'NORMAL' 'NORTH' 'NOTIC' 'NUCLEAR' 'NULL' 'OBJECT' 'OBSERV' 'OBTAIN' 'OCCUP' 'OCCUPI' 'OCCUR'
'ODOMET' 'OFFER' 'OFFICI' 'OHIO' 'OLWM' 'OMRAN' 'OPEN' 'OPENLOOK' 'OPENWINDOW' 'OPTION' 'ORG' 'ORGAN' 'OSCIL' 'OUTLET' 'OUTPUT' 'OWNER' 'PACKAG' 'PACKARD' 'PACKET' 'PAGE' 'PAID' 'PAIN' 'PALESTIN' 'PALESTINIAN' 'PAPER' 'PARENT' 'PARTI' 'PASS' 'PATCH'
'PATIENT' 'PATRICK' 'PAUL' 'PEAC' 'PERFORM' 'PERIOD' 'PERSIAN' 'PETER' 'PHOTOGRAPHI' 'PHYSIC' 'PHYSICIAN' 'PICA' 'PICK' 'PICTUR' 'PILL' 'PIN' 'PIXEL' 'PIXMAP' 'PLAI' 'PLAIN' 'PLAN' 'PLANE' 'PLAYER' 'PLUG' 'POINTER' 'POLIC' 'POPUL' 'POPULAR' 'POPUP' 'PORT'
'POSIT' 'POSSIBL' 'POSTER' 'POSTSCRIPT' 'PRACTIC' 'PREFER' 'PRESENT' 'PRESID' 'PRESS' 'PRETTI' 'PREVENT' 'PREVIOU' 'PRICE' 'PRINT' 'PRINTER' 'PRIVAT' 'PROCESS' 'PRODUC' 'PROGRAMM' 'PROJECT' 'PROLIN' 'PROPAGANDA' 'PROPER' 'PROPOS' 'PROTECT' 'PROTOCOL'
'PROVE' 'PUBLISH' 'PULL' 'PURPOS' 'PUT' 'QUACK' 'QUALITI' 'QUOT' 'RACE' 'RACISM' 'RACIST' 'RADAR' 'RADIO' 'RAINER' 'RANG' 'RATE' 'REACTION' 'READER' 'REALIZ' 'REC' 'RECAL' 'RECEIV' 'RECOGN' 'RECOMMEND' 'REDUC' 'REDUND' 'REGION' 'REGIST' 'REILLI' 'RELAI'
'RELAT' 'RELEAS' 'RELIABL' 'RELIGION' 'REMAIN' 'REMOT' 'REMOV' 'REPEAT' 'REPLAC' 'REQUEST' 'RESERV' 'RESIST' 'RESISTOR' 'RESOURC' 'RESPOND' 'REST' 'RETURN' 'REVIEW' 'RICH' 'RICHARD' 'RICHARDSON' 'RIGHT' 'RIND' 'RING' 'RISK' 'RIVER' 'ROAD' 'ROBERT'
'ROCHEST' 'RON' 'ROOM' 'ROOT' 'RUI' 'RULE' 'RUSSEL' 'RUSSIAN' 'SALAH' 'SALE' 'SALMON' 'SAMPL' 'SAT' 'SAVE' 'SCHEMAT' 'SCHWARTZ' 'SCIENTIF' 'SCIENTIST' 'SCOPE' 'SCOTT' 'SCREEN' 'SDSU' 'SEA' 'SEARCH' 'SEATTL' 'SECTION' 'SECUR' 'SEEK' 'SEIZUR' 'SELECT'
'SELL' 'SEMIT' 'SENS' 'SENSIT' 'SEPAR' 'SEQUENC' 'SERA' 'SERDAR' 'SERI' 'SERIAL' 'SET' 'SEXUAL' 'SHACK' 'SHAME' 'SHARE' 'SHELL' 'SHNEKENDORF' 'SHOOT' 'SHORT' 'SHOSTACK' 'SHOT' 'SHOULDN' 'SICK' 'SIGN' 'SIGNAL' 'SIGNIFIC' 'SIMILAR' 'SIMM' 'SIMPL' 'SIMPLI'
'SITE' 'SITUAT' 'SIZE' 'SKEPTIC' 'SKIN' 'SLEEP' 'SLOW' 'SMOKE' 'SOCIETI' 'SOLARI' 'SOLDIER' 'SOLUT' 'SORT' 'SOUND' 'SOUTH' 'SOVIET' 'SPACE' 'SPARC' 'SPEAK' 'SPEC' 'SPECIAL' 'SPEED' 'SPELL' 'SPOCK' 'SPOT' 'STAI' 'STAND' 'STATEMENT' 'STATIC' 'STATU' 'STEIN'
'STEPHEN' 'STEVE' 'STEVEN' 'STONE' 'STOP' 'STORE' 'STORI' 'STRING' 'STRIP' 'STUDENT' 'STUPID' 'STYLE' 'SUBSCRIB' 'SUBSCRIV' 'SUFFER' 'SUIT' 'SUNO' 'SUPERSTIT' 'SUPPLI' 'SUPPOS' 'SURGERI' 'SURPRIS' 'SURREND' 'SUSPECT' 'SWITCH' 'SYMBOL' 'SYMPTOM' 'SYNDROM'
'SYRIA' 'TABL' 'TAKE' 'TAPE' 'TARGET' 'TAST' 'TCP' 'TECHNIC' 'TEKTRONIX' 'TEL' 'TELEPHON' 'TELL' 'TEMPERATUR' 'TERM' 'TERMIN' 'TERRITORI' 'TERROR' 'TERRORIST' 'TEST' 'TEXA' 'TEXT' 'THEE' 'THEORI' 'THERAPI' 'THERE' 'THEY' 'THINK' 'THOMA' 'THREAD' 'THROW'
'TIM' 'TIMER' 'TITL' 'TOLD' 'TOM' 'TONIGHT' 'TOOL' 'TOOLKIT' 'TOPIC' 'TORONTO' 'TOTAL' 'TOWER' 'TRACE' 'TRAFFIC' 'TRAIN' 'TRANSFORM' 'TRANSLAT' 'TRANSMIT' 'TREAT' 'TREATMENT' 'TROOP' 'TROUBL' 'TRUTH' 'TUBE' 'TURK' 'TURKEI' 'TURKISH' 'TURN' 'TYPIC'
'UNDEFIN' 'UNDERSTAND' 'UNIX' 'UNKNOWN' 'UPDAT' 'URBANA' 'USA' 'UTEXA' 'VALU' 'VANDERBYL' 'VARIABL' 'VAX' 'VIDEO' 'VIEW' 'VILLAG' 'VIRGINIA' 'VIRTUAL' 'VISUAL' 'VOIC' 'VOLT' 'VOLTAG' 'WAI' 'WAIT' 'WALL' 'WANT' 'WAR' 'WARN' 'WASHINGTON' 'WASN' 'WAST'
'WATCH' 'WATER' 'WAVE' 'WAYN' 'WEIGHT' 'WEST' 'WESTERN' 'WHAT' 'WHITE' 'WIDE' 'WIDGET' 'WIDTH' 'WIFE' 'WIN' 'WIRE' 'WOMEN' 'WON' 'WORD' 'WORTH' 'WPI' 'WRITE' 'WRITTEN' 'XLIB' 'XPUTIMAG' 'XSERVER' 'XTERM' 'XTERMIN' 'XVIEW' 'XWINDOW' 'YASSIN' 'YEAH' 'YEAST'
'YIGAL' 'YORK' 'YOUNG' 'ZIONISM' 'ZIONIST' 'ZUMA' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else delete;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H24" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                19/11/20
Hora:                13H24
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O23ELIZ4 "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O23ELIZ4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
