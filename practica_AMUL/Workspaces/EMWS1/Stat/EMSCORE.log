MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "19/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H24" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                19/11/20
Hora:                13H24
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0H7QGPF "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0H7QGPF new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat_TRAIN / view=EMWS1.Stat_TRAIN ;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_DATA ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\Stat\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Stat_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Stat_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Stat_TRAIN out=WORK.M0785Z8R noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0785Z8R;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0785Z8R(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0785Z8R;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0785Z8R;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2Z0LBYA NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3JBA1LV(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z0LBYA;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT= 
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Ids_DATA noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Ids_CMeta_DATA out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Stat_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Stat";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Stat: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'ABSOLUT' 'ACCELER' 'ACCESS' 'ACCOUNT' 'ACCUR' 'ACID' 'ACTION' 'ACTIV' 'ADAM' 'ADCOM' 'ADDIT' 'ADDRESS' 'ADMIN' 'ADMINISTR' 'ADRIAN' 'ADVIC' 'AFFECT' 'AID' 'ALAN' 'ALLERG' 'ALLERGI' 'ALLOC' 'ALLOW' 'ALTERN' 
'AMATEUR' 'AMERICAN' 'AMOUNT' 'AMP' 'AMPLIFI' 'ANA' 'ANALOG' 'ANDI' 'ANDREW' 'ANGEL' 'ANIM' 'ANNOUNC' 'ANTENNA' 'ANTI' 'ANTIBIOT' 'APP' 'APPAR' 'APPEAR' 'APPL' 'APPROACH' 'APRIL' 'ARCAD' 'AREN' 'ARGIC' 'ARGUMENT' 'ARM' 'ARMENIA' 'ARMI' 'ARTICL' 'ARTIFICI' 
'ASK' 'ASSEMBL' 'ASSIST' 'ASSOCI' 'ATARI' 'ATHEN' 'ATHENA' 'ATTACH' 'ATTEMPT' 'ATTRIBUT' 'AUDIO' 'AUSTIN' 'AUSTRALIA' 'AUTHOR' 'AVOID' 'AZERI' 'BACKGROUND' 'BAND' 'BARBECU' 'BASIC' 'BATTERI' 'BECK' 'BELL' 'BENSON' 'BERKELEI' 'BEYER' 'BILL' 'BIRTHDAI' 
'BIT' 'BITMAP' 'BLACK' 'BLOOD' 'BLUE' 'BOARD' 'BODI' 'BOMB' 'BORDER' 'BOSTON' 'BOUGHT' 'BOULDER' 'BOX' 'BRAD' 'BRAIN' 'BRAND' 'BREAK' 'BRIAN' 'BRING' 'BRITISH' 'BROWN' 'BTW' 'BUFFER' 'BUILT' 'BULB' 'BUNCH' 'BUSH' 'BUSI' 'BUTTON' 'CABL' 'CALIFORNIA' 
'CAMBRIDG' 'CANADA' 'CANCER' 'CANDIDA' 'CAPABL' 'CAPACITOR' 'CAPIT' 'CAR' 'CARD' 'CARNEGI' 'CARRI' 'CARTER' 'CATALOG' 'CAUS' 'CELL' 'CENTR' 'CHANC' 'CHANNEL' 'CHARACT' 'CHARG' 'CHASTITI' 'CHEAP' 'CHEER' 'CHEMIC' 'CHICAGO' 'CHILD' 'CHILDREN' 'CHINES' 
'CHOIC' 'CHRI' 'CHRISTIAN' 'CHRISTOPH' 'CIRCUIT' 'CITI' 'CITIZEN' 'CIVIL' 'CIVILIAN' 'CLASS' 'CLEAR' 'CLEVELAND' 'CLIENT' 'CLINIC' 'CLINTON' 'CLOCK' 'CLUB' 'CMU' 'COLD' 'COLLEG' 'COLLIN' 'COLOR' 'COLORADO' 'COLORMAP' 'COLUMBIA' 'COMBIN' 'COMMAND' 
'COMMENT' 'COMMERCI' 'COMMIT' 'COMMON' 'COMPAR' 'COMPAT' 'COMPIL' 'COMPON' 'CONCERN' 'CONCRET' 'CONDIT' 'CONFER' 'CONFIGUR' 'CONFLICT' 'CONFUS' 'CONSID' 'CONSIST' 'CONSTRUCT' 'CONSULT' 'CONTACT' 'CONTENT' 'CONTEXT' 'CONVENT' 'CONVERT' 'COOL' 'COPI' 'CORN' 
'CORP' 'CORPOR' 'COST' 'COULDN' 'COUNT' 'COUNTRI' 'COVER' 'COVINGTON' 'CPR' 'CROHN' 'CROSS' 'CURE' 'CURSOR' 'CUSTOM' 'CUTE' 'CYCL' 'DAILI' 'DALE' 'DAMAG' 'DANGER' 'DANIEL' 'DANNI' 'DATA' 'DAVE' 'DAVIDIAN' 'DAYTON' 'DEAD' 'DEAL' 'DEAR' 'DEATH' 'DECID' 
'DECOD' 'DEFAULT' 'DEFIN' 'DEFINIT' 'DEGRE' 'DEIR' 'DELET' 'DEPEND' 'DEPTH' 'DESIGN' 'DESTROI' 'DETAIL' 'DETECT' 'DETECTOR' 'DETERMIN' 'DEVIC' 'DIAGNOS' 'DIAGRAM' 'DIALOG' 'DICK' 'DIEGO' 'DIET' 'DIFFER' 'DIGIT' 'DIMENS' 'DIOD' 'DIRECT' 'DIRECTORI' 
'DISCHARG' 'DISCLAIM' 'DISCUSS' 'DISEAS' 'DISK' 'DISTANC' 'DIVIS' 'DOCUMENT' 'DOMAIN' 'DOMIN' 'DONAT' 'DORTMUND' 'DOUBT' 'DOUG' 'DRAW' 'DRIVE' 'DRIVER' 'DROP' 'DRUG' 'DUMP' 'DYER' 'EASI' 'EASILI' 'EAST' 'EAT' 'ECHO' 'EDITOR' 'EDUC' 'EDWARD' 'ELECTR' 
'EMPLOY' 'EMUL' 'ENERGI' 'ENGLAND' 'ENTIR' 'ENTRI' 'ENVIRON' 'EPROM' 'EQUAL' 'EQUIP' 'ERIC' 'ERROR' 'ESCAP' 'ESSENTI' 'EUROP' 'EUROPEAN' 'EVENT' 'EVID' 'EXACT' 'EXECUT' 'EXERCIS' 'EXPANS' 'EXPECT' 'EXPENS' 'EXPERIENC' 'EXPLAIN' 'EXPLOD' 'EXPOS' 'EXPRESS' 
'EXTENS' 'EXTERMIN' 'EXTRA' 'FACE' 'FAIL' 'FALS' 'FAMILI' 'FAST' 'FATHER' 'FAVOR' 'FEATUR' 'FEDER' 'FEED' 'FIELD' 'FIGHT' 'FIGUR' 'FILL' 'FILTER' 'FINE' 'FIRE' 'FIX' 'FLAME' 'FLASH' 'FLOOR' 'FLUKE' 'FOCU' 'FOLK' 'FONT' 'FOOD' 'FORGET' 'FORM' 'FORMAT' 
'FOURD' 'FRAME' 'FRANC' 'FRANK' 'FREE' 'FREEDOM' 'FREEMAN' 'FREQUENC' 'FREQUENT' 'FRIEND' 'FULL' 'FUTUR' 'GAIN' 'GAME' 'GARFIEL' 'GARI' 'GATEWAI' 'GAZA' 'GEB' 'GENOCID' 'GEORG' 'GEORGIA' 'GERMAN' 'GERMANI' 'GILBERT' 'GORDON' 'GRANT' 'GRAPHIC' 'GREATLI' 
'GREEK' 'GREEN' 'GREG' 'GROUND' 'GUESS' 'GUEST' 'GUI' 'HAMAZA' 'HAMID' 'HANDL' 'HANG' 'HAPPI' 'HARDWAR' 'HARRI' 'HARVARD' 'HATE' 'HAVEN' 'HEAD' 'HEADACH' 'HEALTH' 'HEART' 'HEAT' 'HEAVI' 'HEIGHT' 'HELP' 'HENRI' 'HENRIK' 'HERNIA' 'HERNLEM' 'HEWLETT' 
'HEZBOLLAH' 'HIGHER' 'HINT' 'HISTOR' 'HISTORI' 'HOLD' 'HOLOCAUST' 'HOOK' 'HOSPIT' 'HOST' 'HOUR' 'HOUS' 'HOWARD' 'HUNTSVIL' 'ICON' 'IGNOR' 'ILLEG' 'ILLINOI' 'IMAG' 'IMAGIN' 'IMAK' 'IMPLEMENT' 'IMPRESS' 'IMPROV' 'INCREAS' 'INDIVIDU' 'INDUSTRI' 'INFECT' 
'INJECT' 'INPUT' 'INSTAL' 'INSTRUMENT' 'INTEL' 'INTELLECT' 'INTELLIG' 'INTEND' 'INTERFAC' 'INTERGRAPH' 'INTERVIEW' 'INVENT' 'INVOLV' 'IRAN' 'IRVIN' 'ISLAM' 'ISLAND' 'ITEM' 'JACK' 'JAKE' 'JASON' 'JEFF' 'JEFFERSON' 'JERUSALEM' 'JESS' 'JIM' 'JIMMI' 'JOEL' 
'JOSEPH' 'JOYSTICK' 'JUSTIFI' 'KEI' 'KEITH' 'KEN' 'KENNETH' 'KEYBOARD' 'KIDNEI' 'KIRLIAN' 'KLUTE' 'KNOW' 'KNOWLEDG' 'KRILLEAN' 'LAB' 'LABEL' 'LABORATORI' 'LACK' 'LAND' 'LANGUAG' 'LARG' 'LARRI' 'LASER' 'LAW' 'LEAD' 'LEADER' 'LEARN' 'LEAV' 'LEBANES' 
'LEBANON' 'LEGAL' 'LET' 'LETTER' 'LEVEL' 'LIBRARI' 'LICENS' 'LIFE' 'LIGHT' 'LIMIT' 'LINK' 'LINUX' 'LIST' 'LISTEN' 'LITERATUR' 'LIVNI' 'LOAD' 'LOCAL' 'LOCAT' 'LOGIC' 'LOGIN' 'LONGER' 'LOOK' 'LOOP' 'LOST' 'LOT' 'LOVE' 'LUCK' 'LUNG' 'LYME' 'MAHAN' 'MAIN' 
'MAINTAIN' 'MAKE' 'MAN' 'MANAG' 'MANUAL' 'MAP' 'MARC' 'MARK' 'MARKET' 'MARTIN' 'MASK' 'MASS' 'MASSACR' 'MATERI' 'MATH' 'MATTER' 'MCGILL' 'MEAN' 'MEASUR' 'MECHAN' 'MEDIA' 'MEDICIN' 'MELLON' 'MEMBER' 'MEMORI' 'MENU' 'MESSAG' 'METAL' 'METHOD' 'METHODOLOG' 
'MICHAEL' 'MIDDL' 'MIGRAIN' 'MIKE' 'MILE' 'MILITARI' 'MILLION' 'MIND' 'MINUT' 'MISC' 'MISS' 'MISTAK' 'MODE' 'MODEL' 'MODIFI' 'MODUL' 'MONEI' 'MONITOR' 'MONTH' 'MORAL' 'MOTIF' 'MOTOROLA' 'MOUNTAIN' 'MOUS' 'MOVEMENT' 'MSG' 'MULTI' 'MULTIPL' 'MURDER' 'MUSCL' 
'MUSLIM' 'NAFTALI' 'NAME' 'NASA' 'NATUR' 'NAZI' 'NECESSARILI' 'NEED' 'NEEDL' 'NEGOTI' 'NET' 'NETANYAHU' 'NETCOM' 'NETNEW' 'NEUTRAL' 'NICE' 'NIGHT' 'NNTP' 'NOIS' 'NORMAL' 'NORTH' 'NOTIC' 'NUCLEAR' 'NULL' 'OBJECT' 'OBSERV' 'OBTAIN' 'OCCUP' 'OCCUPI' 'OCCUR' 
'ODOMET' 'OFFER' 'OFFICI' 'OHIO' 'OLWM' 'OMRAN' 'OPEN' 'OPENLOOK' 'OPENWINDOW' 'OPTION' 'ORG' 'ORGAN' 'OSCIL' 'OUTLET' 'OUTPUT' 'OWNER' 'PACKAG' 'PACKARD' 'PACKET' 'PAGE' 'PAID' 'PAIN' 'PALESTIN' 'PALESTINIAN' 'PAPER' 'PARENT' 'PARTI' 'PASS' 'PATCH' 
'PATIENT' 'PATRICK' 'PAUL' 'PEAC' 'PERFORM' 'PERIOD' 'PERSIAN' 'PETER' 'PHOTOGRAPHI' 'PHYSIC' 'PHYSICIAN' 'PICA' 'PICK' 'PICTUR' 'PILL' 'PIN' 'PIXEL' 'PIXMAP' 'PLAI' 'PLAIN' 'PLAN' 'PLANE' 'PLAYER' 'PLUG' 'POINTER' 'POLIC' 'POPUL' 'POPULAR' 'POPUP' 'PORT' 
'POSIT' 'POSSIBL' 'POSTER' 'POSTSCRIPT' 'PRACTIC' 'PREFER' 'PRESENT' 'PRESID' 'PRESS' 'PRETTI' 'PREVENT' 'PREVIOU' 'PRICE' 'PRINT' 'PRINTER' 'PRIVAT' 'PROCESS' 'PRODUC' 'PROGRAMM' 'PROJECT' 'PROLIN' 'PROPAGANDA' 'PROPER' 'PROPOS' 'PROTECT' 'PROTOCOL' 
'PROVE' 'PUBLISH' 'PULL' 'PURPOS' 'PUT' 'QUACK' 'QUALITI' 'QUOT' 'RACE' 'RACISM' 'RACIST' 'RADAR' 'RADIO' 'RAINER' 'RANG' 'RATE' 'REACTION' 'READER' 'REALIZ' 'REC' 'RECAL' 'RECEIV' 'RECOGN' 'RECOMMEND' 'REDUC' 'REDUND' 'REGION' 'REGIST' 'REILLI' 'RELAI' 
'RELAT' 'RELEAS' 'RELIABL' 'RELIGION' 'REMAIN' 'REMOT' 'REMOV' 'REPEAT' 'REPLAC' 'REQUEST' 'RESERV' 'RESIST' 'RESISTOR' 'RESOURC' 'RESPOND' 'REST' 'RETURN' 'REVIEW' 'RICH' 'RICHARD' 'RICHARDSON' 'RIGHT' 'RIND' 'RING' 'RISK' 'RIVER' 'ROAD' 'ROBERT' 
'ROCHEST' 'RON' 'ROOM' 'ROOT' 'RUI' 'RULE' 'RUSSEL' 'RUSSIAN' 'SALAH' 'SALE' 'SALMON' 'SAMPL' 'SAT' 'SAVE' 'SCHEMAT' 'SCHWARTZ' 'SCIENTIF' 'SCIENTIST' 'SCOPE' 'SCOTT' 'SCREEN' 'SDSU' 'SEA' 'SEARCH' 'SEATTL' 'SECTION' 'SECUR' 'SEEK' 'SEIZUR' 'SELECT' 
'SELL' 'SEMIT' 'SENS' 'SENSIT' 'SEPAR' 'SEQUENC' 'SERA' 'SERDAR' 'SERI' 'SERIAL' 'SET' 'SEXUAL' 'SHACK' 'SHAME' 'SHARE' 'SHELL' 'SHNEKENDORF' 'SHOOT' 'SHORT' 'SHOSTACK' 'SHOT' 'SHOULDN' 'SICK' 'SIGN' 'SIGNAL' 'SIGNIFIC' 'SIMILAR' 'SIMM' 'SIMPL' 'SIMPLI' 
'SITE' 'SITUAT' 'SIZE' 'SKEPTIC' 'SKIN' 'SLEEP' 'SLOW' 'SMOKE' 'SOCIETI' 'SOLARI' 'SOLDIER' 'SOLUT' 'SORT' 'SOUND' 'SOUTH' 'SOVIET' 'SPACE' 'SPARC' 'SPEAK' 'SPEC' 'SPECIAL' 'SPEED' 'SPELL' 'SPOCK' 'SPOT' 'STAI' 'STAND' 'STATEMENT' 'STATIC' 'STATU' 'STEIN' 
'STEPHEN' 'STEVE' 'STEVEN' 'STONE' 'STOP' 'STORE' 'STORI' 'STRING' 'STRIP' 'STUDENT' 'STUPID' 'STYLE' 'SUBSCRIB' 'SUBSCRIV' 'SUFFER' 'SUIT' 'SUNO' 'SUPERSTIT' 'SUPPLI' 'SUPPOS' 'SURGERI' 'SURPRIS' 'SURREND' 'SUSPECT' 'SWITCH' 'SYMBOL' 'SYMPTOM' 'SYNDROM' 
'SYRIA' 'TABL' 'TAKE' 'TAPE' 'TARGET' 'TAST' 'TCP' 'TECHNIC' 'TEKTRONIX' 'TEL' 'TELEPHON' 'TELL' 'TEMPERATUR' 'TERM' 'TERMIN' 'TERRITORI' 'TERROR' 'TERRORIST' 'TEST' 'TEXA' 'TEXT' 'THEE' 'THEORI' 'THERAPI' 'THERE' 'THEY' 'THINK' 'THOMA' 'THREAD' 'THROW' 
'TIM' 'TIMER' 'TITL' 'TOLD' 'TOM' 'TONIGHT' 'TOOL' 'TOOLKIT' 'TOPIC' 'TORONTO' 'TOTAL' 'TOWER' 'TRACE' 'TRAFFIC' 'TRAIN' 'TRANSFORM' 'TRANSLAT' 'TRANSMIT' 'TREAT' 'TREATMENT' 'TROOP' 'TROUBL' 'TRUTH' 'TUBE' 'TURK' 'TURKEI' 'TURKISH' 'TURN' 'TYPIC' 
'UNDEFIN' 'UNDERSTAND' 'UNIX' 'UNKNOWN' 'UPDAT' 'URBANA' 'USA' 'UTEXA' 'VALU' 'VANDERBYL' 'VARIABL' 'VAX' 'VIDEO' 'VIEW' 'VILLAG' 'VIRGINIA' 'VIRTUAL' 'VISUAL' 'VOIC' 'VOLT' 'VOLTAG' 'WAI' 'WAIT' 'WALL' 'WANT' 'WAR' 'WARN' 'WASHINGTON' 'WASN' 'WAST' 
'WATCH' 'WATER' 'WAVE' 'WAYN' 'WEIGHT' 'WEST' 'WESTERN' 'WHAT' 'WHITE' 'WIDE' 'WIDGET' 'WIDTH' 'WIFE' 'WIN' 'WIRE' 'WOMEN' 'WON' 'WORD' 'WORTH' 'WPI' 'WRITE' 'WRITTEN' 'XLIB' 'XPUTIMAG' 'XSERVER' 'XTERM' 'XTERMIN' 'XVIEW' 'XWINDOW' 'YASSIN' 'YEAH' 'YEAST' 
'YIGAL' 'YORK' 'YOUNG' 'ZIONISM' 'ZIONIST' 'ZUMA' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else delete;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
