MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21H53" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                10/11/20
Hora:                21H53
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1S3V5KE "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1S3V5KE new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21H53" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70161230";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10/11/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "21H53" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS1\PRINCOMP\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.PRINCOMP_VariableSet noprint;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.PRINCOMPMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc print data=WORK.PRINCOMPMETA label noobs;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    data WORK.M2ECZ_M1;
MPRINT(EM_DIAGRAM):   set WORK.M2ECZ_M1;
MPRINT(EM_DIAGRAM):   if role = 'INPUT' and use in ('Y','D') then do;
MPRINT(EM_DIAGRAM):   role = 'INPUT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = 'REJECTED' and use = 'Y' then do;
MPRINT(EM_DIAGRAM):   role = 'INPUT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = 'FREQ' then do;
MPRINT(EM_DIAGRAM):   role = 'FREQ';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Create DMDB macros;
MPRINT(EM_DIAGRAM):   options nosource;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   options NOSOURCE;
MPRINT(EM_DIAGRAM):   * End DMDB macros generation;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Ids_DATA dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   ACCESS ADAM ADDRESS ADVANC AMERICAN ANDI ANSWER APPLIC APPRECI ARAB AREA ARGIC ARMENIA ARMENIAN ATTACK AUDIO BANK BASE BATTERI BILL BOOK BRAIN BRIAN BUILD BUTTON CALIFORNIA CALL CAN CARD CASE CENTER CHANG CHIP CIRCUIT CLIENT CODE COLOR 
COMMUN COMP COMPANI COMPIL COMPUT CONNECT CONTROL COPI CORRECT CREAT CURRENT DAI DATA DAVID DEPART DEPT DESIGN DETECTOR DEVIC DISEAS DISPLAI DISTRIBUT DOCTOR DOESN DON DRAW DRIVE DRUG EDU EFFECT ELECTR ELECTRON EMAIL ENGIN ERROR EVENT EXPERI FACT FAX FEEL 
FILE FIND FOLLOWUP FONT FOOD FRI FRIEND FUNCTION GEB GENER GEORGIA GIVE GOOD GORDON GOVERN GRAPHIC GREAT GREEK GROUND GROUP HAPPEN HEAR HIGH HOME IMAG INCLUD INFO INFORM INPUT INSTITUT INTEREST INTERNET ISRA ISRAEL JEW JEWISH JOHN KEYBOARD KEYWORD KILL 
KIND LEVEL LIST LIVE LONG MACHIN MAIL MANAG MARK MED MEDIC MEDICIN MEMORI MICHAEL MIKE MON MOTIF MOTOROLA NATION NETWORK NEW NEWS NEWSREAD NOIS NUMBER OPER OPINION ORIGIN OUTPUT PAIN PALESTINIAN PART PATIENT PERSON PHONE PITT PITTSBURGH PLACE POINT POLICI 
POSIT POST POWER PROBLEM PRODUCT PROGRAM PROJECT PUBLIC QUESTION RADAR RADIO READ REASON RECEIV REMEMB REPLI REPORT REQUIR RESEARCH RESPONS ROBERT RUN SAT SCHOOL SCI SCIENC SCREEN SELL SEND SERDAR SERVER SERVIC SHOW SIDE SIGNAL SOFTWAR SOUND SOURC 
STANDARD START STATE STEVE STUDI SUBSCRIB SUGGEST SUN SUPPORT SWITCH SYSTEM TALK TECHNOLOG TERMIN TEST THAT THU TIME TREATMENT TRUE TUE TURKISH TYPE UNIV UNIVERS UNIX USENET USER UTEXA UUCP VERSION VIRGINIA VOLTAG WATER WED WIDGET WINDOW WIRE WONDER WORK 
WORLD XLIB XTERM YEAR YOU
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * PRINCOMP: Input Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   proc dmneurl data=EMWS1.Ids_DATA dmdbcat=WORK.EM_DMDB outstat=EMWS1.PRINCOMP_OUTSTAT outclass=EMWS1.PRINCOMP_OUTCLASS CORR NOMONITOR ;
MPRINT(EM_DIAGRAM):   var
MPRINT(INPUTS):   ACCESS ADAM ADDRESS ADVANC AMERICAN ANDI ANSWER APPLIC APPRECI ARAB AREA ARGIC ARMENIA ARMENIAN ATTACK AUDIO BANK BASE BATTERI BILL BOOK BRAIN BRIAN BUILD BUTTON CALIFORNIA CALL CAN CARD CASE CENTER CHANG CHIP CIRCUIT CLIENT CODE COLOR 
COMMUN COMP COMPANI COMPIL COMPUT CONNECT CONTROL COPI CORRECT CREAT CURRENT DAI DATA DAVID DEPART DEPT DESIGN DETECTOR DEVIC DISEAS DISPLAI DISTRIBUT DOCTOR DOESN DON DRAW DRIVE DRUG EDU EFFECT ELECTR ELECTRON EMAIL ENGIN ERROR EVENT EXPERI FACT FAX FEEL 
FILE FIND FOLLOWUP FONT FOOD FRI FRIEND FUNCTION GEB GENER GEORGIA GIVE GOOD GORDON GOVERN GRAPHIC GREAT GREEK GROUND GROUP HAPPEN HEAR HIGH HOME IMAG INCLUD INFO INFORM INPUT INSTITUT INTEREST INTERNET ISRA ISRAEL JEW JEWISH JOHN KEYBOARD KEYWORD KILL 
KIND LEVEL LIST LIVE LONG MACHIN MAIL MANAG MARK MED MEDIC MEDICIN MEMORI MICHAEL MIKE MON MOTIF MOTOROLA NATION NETWORK NEW NEWS NEWSREAD NOIS NUMBER OPER OPINION ORIGIN OUTPUT PAIN PALESTINIAN PART PATIENT PERSON PHONE PITT PITTSBURGH PLACE POINT POLICI 
POSIT POST POWER PROBLEM PRODUCT PROGRAM PROJECT PUBLIC QUESTION RADAR RADIO READ REASON RECEIV REMEMB REPLI REPORT REQUIR RESEARCH RESPONS ROBERT RUN SAT SCHOOL SCI SCIENC SCREEN SELL SEND SERDAR SERVER SERVIC SHOW SIDE SIGNAL SOFTWAR SOUND SOURC 
STANDARD START STATE STEVE STUDI SUBSCRIB SUGGEST SUN SUPPORT SWITCH SYSTEM TALK TECHNOLOG TERMIN TEST THAT THU TIME TREATMENT TRUE TUE TURKISH TYPE UNIV UNIVERS UNIX USENET USER UTEXA UUCP VERSION VIRGINIA VOLTAG WATER WED WIDGET WINDOW WIRE WONDER WORK 
WORLD XLIB XTERM YEAR YOU
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   run;

Construyendo X'X  para el objetivo:  filas=241 memoria=0.23 meg.
3000 registros leídos
3000 registros leídos
*** Número total de ejecuciones de los datos :        2
*** Número total de optimizaciones NL:        0
MPRINT(EM_DIAGRAM):    data EMWS1.PRINCOMP_STDMEAN;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_OUTSTAT;
MPRINT(EM_DIAGRAM):   if _TYPE_='_STDEV_' or _TYPE_='_MEAN_' then output;
MPRINT(EM_DIAGRAM):   DROP _EIGVAL_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.PRINCOMP_EIGENVECTOR;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_OUTSTAT;
MPRINT(EM_DIAGRAM):   if upcase(_TYPE_)='_V_MAP_' or upcase(_TYPE_)='_C_MAP_' or upcase(_TYPE_)='_MEAN_' or upcase(_TYPE_)='_STDEV_' or upcase(_TYPE_)='_EIGVAL_' or _EIGVAL_=0 then delete;
MPRINT(EM_DIAGRAM):   drop _TYPE_;
MPRINT(EM_DIAGRAM):   rename _EIGVAL_=Eigenvalue;
MPRINT(EM_DIAGRAM):   data EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGENVECTOR;
MPRINT(EM_DIAGRAM):   Keep EigenValue;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.PRINCOMP_EIGEN out=EMWS1.PRINCOMP_EIGEN prefix=PC_;
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.PRINCOMP_EIGEN out=EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   data EMWS1.PRINCOMP_EIGENVECTOR;
MPRINT(EM_DIAGRAM):   merge EMWS1.PRINCOMP_EIGEN EMWS1.PRINCOMP_EIGENVECTOR;
MPRINT(EM_DIAGRAM):   DROP EigenValue;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   by EigenValue;
MPRINT(EM_DIAGRAM):   data EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   Difference=Eigenvalue-lag(Eigenvalue);
MPRINT(EM_DIAGRAM):   ProportionalEigenvalue=EigenValue/240.000000000008;
MPRINT(EM_DIAGRAM):   LagProportionalEigenvalue=lag(ProportionalEigenvalue);
MPRINT(EM_DIAGRAM):   label EigenValue = "Autovalor";
MPRINT(EM_DIAGRAM):   label Difference = "Diferencia";
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   by DESCENDING EigenValue;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   CumProportionalEigenvalue+ProportionalEigenvalue;
MPRINT(EM_DIAGRAM):   if CumProportionalEigenvalue > 1.0 then CumProportionalEigenvalue=1.0;
MPRINT(EM_DIAGRAM):   LogEigenvalue=Log(Eigenvalue);
MPRINT(EM_DIAGRAM):   length Exported $8;
MPRINT(EM_DIAGRAM):   Exported = 'NO';
MPRINT(EM_DIAGRAM):   label LogEigenvalue = "Logaritmo del autovalor";
MPRINT(EM_DIAGRAM):   label Exported = "Exportado";
MPRINT(EM_DIAGRAM):   data WORK._DSEIGENCHART;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   PC_=_N_;
MPRINT(EM_DIAGRAM):   DROP _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._EMPRINDSSUBEIGEN;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   if ( CumProportionalEigenvalue GE 0.8 ) or (LagProportionalEigenvalue LT 0.001 and CumProportionalEigenvalue GE 0.9 ) or ( _N_ > 20-1) then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   length PC 8.;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   if _N_ < 20+1 then Exported = 'YES';
MPRINT(EM_DIAGRAM):   Drop LagProportionalEigenvalue;
MPRINT(EM_DIAGRAM):   PC = _N_;
MPRINT(EM_DIAGRAM):   format PC 8.;
MPRINT(EM_DIAGRAM):   rename _NAME_ = Component;
MPRINT(EM_DIAGRAM):   label _NAME_ = "Componentes principales";
MPRINT(EM_DIAGRAM):   rename ProportionalEigenvalue = Proportion;
MPRINT(EM_DIAGRAM):   label ProportionalEigenvalue = "Autovalor proporcional";
MPRINT(EM_DIAGRAM):   rename CumProportionalEigenvalue = Cumulative;
MPRINT(EM_DIAGRAM):   label CumProportionalEigenvalue = "Autovalor proporcional acumulado";
MPRINT(EM_DIAGRAM):   label PC = "ID PC";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.PRINCOMP_SUBEIGENVECTOR;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGENVECTOR;
MPRINT(EM_DIAGRAM):   if _N_ > 20 then delete;
MPRINT(EM_DIAGRAM):   data WORK._EMPRINDSSUBEIGEN;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGEN;
MPRINT(EM_DIAGRAM):   if _N_ > 20 then delete;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.PRINCOMP_EIGENVECTOR name=Variable label=Label out=EMWS1.PRINCOMP_EIGENVECTOR;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.PRINCOMP_EIGENVECTOR;
MPRINT(EM_DIAGRAM):   set EMWS1.PRINCOMP_EIGENVECTOR;
MPRINT(EM_DIAGRAM):   label Label = "Etiqueta";
MPRINT(EM_DIAGRAM):   label Variable = "Variable";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file print;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Resumen de componentes principales exportados";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put " ";
MPRINT(EM_DIAGRAM):   put "Número total de variables input: 240";
MPRINT(EM_DIAGRAM):   put "Corte de número máximo de los componentes principales: 20";
MPRINT(EM_DIAGRAM):   put "Corte de autovalor proporcional acumulado: 0.8";
MPRINT(EM_DIAGRAM):   put "Corte de incremento de autovalor proporcional: 0.001";
MPRINT(EM_DIAGRAM):   put "Número de los componentes principales seleccionados: 20";
MPRINT(EM_DIAGRAM):   put "Variación total explicada por los componentes principales seleccionados: 0.2286157938";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.PRINCOMP_EMSCOREVAR;
MPRINT(EM_DIAGRAM):   length Name $32 formula $70 file $200;
MPRINT(EM_DIAGRAM):   keep NAME Formula file;
MPRINT(EM_DIAGRAM):   name='';
MPRINT(EM_DIAGRAM):   file="OPTCODE\"!!"_ALL_.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_1";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_1.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_10";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_10.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_11";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_11.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_12";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_12.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_13";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_13.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_14";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_14.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_15";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_15.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_16";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_16.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_17";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_17.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_18";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_18.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_19";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_19.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_2";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_2.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_20";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_20.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_3";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_3.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_4";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_4.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_5";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_5.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_6";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_6.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_7";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_7.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_8";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_8.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   name = "PC_9";
MPRINT(EM_DIAGRAM):   file="OPTCODE\PC_9.sas";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
