MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "22H47" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                11/12/20
Hora:                22H47
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2XW6G_Z "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Prof\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2XW6G_Z new;
MPRINT(EM_DIAGRAM):   run;
57142      %let EMEXCEPTIONSTRING=;
57143      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
57144      * REPORT: Prof;
MPRINT(EM_DIAGRAM):   * REPORT: Prof;
57145      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
57146      %let EM_ACTION = REPORT;
57147      %let syscc = 0;
57148      %macro main;
57149         %if %sysfunc(indexw(&EM_DEBUG, _ALL_)) or %sysfunc(indexw(&EM_DEBUG, SOURCE)) %then %do;
57150             options MPRINT;
57151         %end;
57152      
57153         filename temp catalog 'sashelp.emexpl.profile_macros.source';
57154         %include temp;
57155         filename temp;
57156      
57157         /* Initialize property macro variables */
57158         %SetProperties;
57159      
57160         %if %upcase(&EM_ACTION) = CREATE %then %do;
57161      
57162             filename temp catalog 'sashelp.emexpl.profile_create.source';
57163             %include temp;
57164             filename temp;
57165             %create;
57166         %end;
57167         %else
57168         %if %upcase(&EM_ACTION) = TRAIN %then %do;
57169      
57170             filename temp catalog 'sashelp.emexpl.profile_train.source';
57171             %include temp;
57172             filename temp;
57173             %train;
57174         %end;
57175      %mend main;
57176      
57177      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.profile_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.PROFILE_MACROS.SOURCE.
57178     +%macro SetProperties;
57179     +   %em_checkmacro(name=EM_PROPERTY_PROFILEALL,         global=Y, value=N);
57180     +   %em_checkmacro(name=EM_PROPERTY_USEREPORTVARS,      global=Y, value=Y);
57181     +   %em_checkmacro(name=EM_PROPERTY_OTHERPERCENTCUTOFF, global=Y, value=95);
57182     +   %em_checkmacro(name=EM_PROPERTY_TARGETROLE,         global=Y, value=NONE);
57183     +   %em_checkmacro(name=EM_PROPERTY_NUMHISTBARS,        global=Y, value=8);
57184     +   %em_checkmacro(name=EM_PROPERTY_MINWORTH,           global=Y, value=0.01);
57185     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,           global=Y, value=1);
57186     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMREPORT,       global=Y, value=10);
57187     +   %em_checkmacro(name=EM_PROPERTY_MAXNUMINPUT,        global=Y, value=10);
57188     +   %em_checkmacro(name=EM_PROPERTY_PRINTWORTH,         global=Y, value=Y);
57189     +%mend SetProperties;
57190     +
57191     +
57192     +%macro makeVarMacros(level= );
57193     +
57194     +    %let numvars = 0;
57195     +    %let where   = '';
57196     +
57197     +    %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
57198     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL="&level"  and USE in('Y', 'D'));
57199     +    %else
57200     +        %let where = (ROLE = 'REJECTED' and LEVEL="&level" and USE='Y') or (ROLE ='INPUT' and LEVEL="&level" and USE in('Y', 'D'));
57201     +
57202     +    %if &level = INTERVAL %then %do;
57203     +        %let numvars = %eval( &EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED);
57204     +        %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
57205     +             %let numvars = %eval(&numvars + &EM_NUM_INTERVAL_TARGET);
57206     +    %end;
57207     +    %else %do;
57208     +        %if &level = NOMINAL %then %do;
57209     +            %let numvars = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT +  &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED);
57210     +             %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then %do;
57211     +                 %let numvars = %eval(&numvars + &EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET);
57212     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE in('INPUT', 'TARGET') and LEVEL in('NOMINAL', 'BINARY') and USE in('Y', 'D'));
57213     +             %end;
57214     +             %else
57215     +                 %let where = (ROLE = 'REJECTED' and LEVEL in('NOMINAL', 'BINARY') and USE='Y') or (ROLE ='INPUT' and LEVEL in("NOMINAL", "BINARY") and USE in('Y', 'D'));
57216     +
57217     +        %end;
57218     +        %else %do;
57219     +            %let numvars = %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED);
57220     +            %if (%upcase(&EM_PROPERTY_TARGETROLE) eq INPUT) %then
57221     +                %let numvars = %eval(&numvars + &EM_NUM_ORDINAL_TARGET);
57222     +        %end;
57223     +    %end;
57224     +
57225     +    %if &numvars>0 %then %do;
57226     +         %let numloop = %sysfunc(ceil(&numvars/10000));
57227     +         %let loopcount = 0;
57228     +
57229     +         %do %while((&numloop - &loopcount) > 0);
57230     +             %let first = %eval((&loopcount*10000) + 1);
57231     +             %let last  = %eval(&first + 10000);
57232     +             %let loopcount = %eval(&loopcount +1);
57233     +             %let centry = &EM_LIB..&EM_NODEID._MACS.&LEVEL._&loopcount..SOURCE;
57234     +             filename X catalog "&centry";
57235     +             data _null_;
57236     +                length _STRING_ $80;
57237     +                retain _STRING_ ;
57238     +                file X;
57239     +                set &EM_DATA_VARIABLESET(firstobs=&first obs=&last) end=eof;
57240     +
57241     +                where &where;
57242     +
57243     +                if _N_=1 then
57244     +                   put '%macro _PROFVAR;';
57245     +
57246     +                if (length(_STRING_) + length(trim(NAME))+ 1  < 80) then do;
57247     +                   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
57248     +                   if eof then do;
57249     +                      put _STRING_;
57250     +                      put '%mend _PROFVAR;';
57251     +                   end;
57252     +                end;
57253     +                else do;
57254     +                   put _STRING_;
57255     +                  _string_ = TRIM(NAME);
57256     +                   if eof then do;
57257     +                      put _string_;
57258     +                      put '%mend _PROFVAR;';
57259     +                   end;
57260     +                end;
57261     +             run;
57262     +             filename X;
57263     +         %end;
57264     +    %end;
57265     +
57266     +%mend makeVarMacros;
57267     +
57268     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Prof;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
57269      *------------------------------------------------------------*;
57270      * End REPORT: Prof;
57271      *------------------------------------------------------------*;

57272      /* Reset EM Options */
57273      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
57274      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
57275      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
