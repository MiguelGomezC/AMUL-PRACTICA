MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17H16" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                13/12/20
Hora:                17H16
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3EZKZ9L "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3EZKZ9L new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17H16" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70161230";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10HOME";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "13/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17H16" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Admin";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\EMSave\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22357      proc freq data=EMWS3.EMSave_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS3.EMSave_VariableSet noprint;
22358      table ROLE*LEVEL/out=WORK.EMSaveMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.EMSaveMETA;
22359      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 245 observations read from the data set EMWS3.EMSAVE_VARIABLESET.
NOTE: The data set WORK.EMSAVEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ ha utilizado (Tiempo de proceso total):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

22360      proc print data=WORK.EMSaveMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.EMSaveMETA label noobs;
22361      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22362      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
22363      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22364      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
22365      run;

NOTE: There were 5 observations read from the data set WORK.EMSAVEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22366      title10;
MPRINT(EM_DIAGRAM):   title10;
22367      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EMSave: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EMSave: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'practica_AMUL';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'ANÁLISIS CLUSTER';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS3.Ids2_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22768      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22769      * EMSave: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * EMSave: Generation of macros and macro variables;
22770      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
22771      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

22772      %let EMEXCEPTIONSTRING=;
22773      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22774      * TRAIN: EMSave;
MPRINT(EM_DIAGRAM):   * TRAIN: EMSave;
22775      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22776      %let EM_ACTION = TRAIN;
22777      %let syscc = 0;
22778      *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
MPRINT(EM_DIAGRAM):     *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
22779      
22780      %macro EM_SAVEXT_MAIN;
22781      
22782         %if %upcase("&EM_ACTION") = "CREATE" %then %do;
22783             filename _create catalog 'sashelp.emutil.savext_create.source';
22784             %include _create;
22785             filename _create;
22786             %EM_SAVEXT_CREATE;
22787         %end;
22788         %else
22789         %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
22790             filename _train catalog 'sashelp.emutil.savext_train.source';
22791             %include _train;
22792             filename _train;
22793             %EM_SAVEXT_TRAIN;
22794         %end;
22795      
22796      %mend EM_SAVEXT_MAIN;
22797      
22798      %EM_SAVEXT_MAIN;
MPRINT(EM_SAVEXT_MAIN):   filename _train catalog 'sashelp.emutil.savext_train.source';
NOTE: %INCLUDE (level 1) file _TRAIN is file SASHELP.EMUTIL.SAVEXT_TRAIN.SOURCE.
22799     +*** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
MPRINT(EM_SAVEXT_MAIN):   *** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
22801     +%macro EM_SAVEXT_TRAIN;
22803     +    *** IMPORT UTILITY MACROS;
22805     +    filename _savutil catalog 'sashelp.emutil.savext_macros.source';
22806     +    %include _savutil;
22807     +    filename _savutil;
22809     +    *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
22810     +    *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
22811     +    *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
22813     +    data _null_;
22814     +        length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
22815     +        _i=0;
22817     +        *** TRAIN;
22818     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_DATA) and (("&EM_PROPERTY_TRAIN"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
22819     +            _i=_i+1;                                                        /* INCREMENT ARRAY INDEX */
22820     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_DATA, TRAIN, _i);                /* INSERT INTO MACRO ARRAY */
22821     +        %end;
22823     +        *** VALIDATE;
22824     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_VALIDATE) and (("&EM_PROPERTY_VALIDATE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
22825     +            _i=_i+1;
22826     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_VALIDATE, VALIDATE, _i);
22827     +        %end;
22829     +        *** TEST;
22830     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TEST) and (("&EM_PROPERTY_TEST"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
22831     +            _i=_i+1;
22832     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TEST, TEST, _i);
22833     +        %end;
22835     +        *** SCORE;
22836     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_SCORE) and (("&EM_PROPERTY_SCORE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
22837     +            _i=_i+1;
22838     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_SCORE, SCORE, _i);
22839     +        %end;
22841     +        *** TRANSACTION;
22842     +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TRANSACTION) and (("&EM_PROPERTY_TRANSACTION"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
22843     +            _i=_i+1;
22844     +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TRANSACTION, TRANSACTION, _i);
22845     +        %end;
22847     +        *** ESTABLISH NUMBER OF SETS TO SAVE;
22848     +        call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
22850     +    run;
22852     +    *** EXIT IF NO PARTITIONS TO SAVE;
22854     +    %if ^(&_NUM_SAVE_SETS) %then %do;
22855     +        %put &EM_CODEBAR;
22856     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nodata_warn, NOQUOTE));
22857     +        %put &WARNING;
22858     +        %put &EM_CODEBAR;
22859     +        %goto quit;
22860     +    %end;
22862     +    *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
22863     +    *** REVERT TO DEFAULT NAME;
22865     +    %if ^(%nrbquote(%sysfunc(compress("&EM_PROPERTY_NAME")))="") %then %do;
22866     +        %let _BAD_CHARS= <>:%str(%")%str(%')/\|?* %nrstr(&)%nrstr(%%);
22867     +        %let _BAD_CHAR_FLAG= 0;
22868     +        %do _i= 1 %to %length(%nrbquote(&_BAD_CHARS));
22869     +            %if %index(%nrbquote(&EM_PROPERTY_NAME), %nrbquote(%substr(%nrbquote(&_BAD_CHARS), &_i, 1)))
22870     +                %then %let _BAD_CHAR_FLAG= 1;
22871     +        %end;
22872     +        %if %sysfunc(kcount(%nrbquote(&EM_PROPERTY_NAME))) %then %let _BAD_CHAR_FLAG= 1;
22874     +        %if &_BAD_CHAR_FLAG %then %do;
22875     +           %put &EM_CODEBAR;
22876     +           %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_bad_char_err, NOQUOTE));
22877     +           %put &WARNING;
22878     +           %put &EM_CODEBAR;
22879     +           *** REVERT TO DEFAULT NAME;
22880     +           %let EM_PROPERTY_NAME = em_save;
22881     +        %end;
22882     +    %end;
22883     +    *** ACCOUNT FOR LIB ISSUES;
22885     +    %if (%upcase(%sysfunc(compress("&EM_PROPERTY_LIB"))) = "WORK") %then %do;
22886     +        %put &EM_CODEBAR;
22887     +        %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_work_lib_warn, NOQUOTE));
22888     +        %put &WARNING;                                                      /* WORK IS A TEMPORARY LIBRARY */
22889     +        %put &EM_CODEBAR;                                                   /* IT DISAPPEARS AFTER THE FLOW COMPLETES ALONG WITH DATA SAVED THERE */
22890     +    %end;
22893     +    %if (%sysfunc(compress("&EM_PROPERTY_LIB")) = "") %then %do;            /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
22894     +        libname _em_save "%nrbquote(&EM_NODEDIR)";                          /* AND IN OTHERS AS "" */
22895     +        %let EM_PROPERTY_LIB = _em_save;
22896     +    %end;
22898     +    *** CHECK FOR EXISTING LIB;
22900     +    %let _rc = %sysfunc(libref(&EM_PROPERTY_LIB));
22901     +    %if &_rc %then %do;
22902     +        %let EMEXCEPTIONSTRING=exception.server.DATASOURCE.LIBRARY.NOTASSIGNED,&EM_PROPERTY_LIB;
22903     +        %put &EM_CODEBAR;
22904     +        %let ERROR1 = %sysfunc(sasmsg(sashelp.dmine, DATASOURCE.LIBRARY.NOTASSIGNED_ERR, NOQUOTE, &EM_PROPERTY_LIB));
22905     +        %put &ERROR1;
22906     +        %put &EM_CODEBAR;
22907     +        %goto quit;
22908     +    %end;
22910     +    *** ACCOUNT FOR DEFAULT NAME;                                           /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
22911     +                                                                            /* AND IN OTHERS AS "" */
22912     +    %if (%sysfunc(compress("&EM_PROPERTY_NAME"))="") %then %let EM_PROPERTY_NAME = em_save;
22914     +    *** CALL UTILITY MACROS TO SAVE SETS *************************************;
22916     +    %if ("&EM_PROPERTY_TYPE"="SAS7BDAT") %then %do;                         /* OUTPUT SAS DATA SET */
22917     +        %do _i=1 %to &_num_save_sets;
22918     +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);           /* GET EXACT INPUT VARS FOR EACH INPUT SET */
22919     +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;                     /* IF NO VARIABLES WERE SELECTED CONTINUE TO NEXT PARTITION */
22920     +                %put &EM_CODEBAR;                                           /* REALLY ONLY MATTERS FOR TRANSACTION DATA - OTHERWISE ALL PARTITIONS WILL HAVE SAME NUMBER OF VARS */
22921     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
22922     +                %put &WARNING;
22923     +                %put &EM_CODEBAR;
22924     +                %goto continue_sas_loop;
22925     +            %end;
22926     +            %EM_SAVEXT_SAS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);                /* CYCLE THROUGH SETS TO SAVE */
22927     +            %continue_sas_loop:
22928     +        %end;
22929     +    %end;
22930     +    %else %do;                                                              /* OUTPUT JMP, EXCEL 2007, CSV OR TAB TABLE */
22931     +        %do _i=1 %to &_num_save_sets;
22932     +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
22933     +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;
22934     +                %put &EM_CODEBAR;
22935     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
22936     +                %put &WARNING;
22937     +                %put &EM_CODEBAR;
22938     +                %goto continue_pxpt_loop;
22939     +            %end;
22940     +            %EM_SAVEXT_PXPT(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
22941     +            %continue_pxpt_loop:
22942     +        %end;
22943     +    %end;
22945     +    *** OUTPUT ****************************************************************;
22947     +    %if %sysfunc(exist(_save_output_temp)) %then %do;
22949     +        %EM_GETNAME(key=SAVEOUT, type=DATA);
22951     +        *** SAVE OUTPUT DATA TO PROJECT;
22953     +        data &EM_USER_SAVEOUT;
22954     +            set _save_output_temp;
22955     +            label
22956     +                nobs="%sysfunc(sasmsg(sashelp.dmine, save_numobs_vlabel, NOQUOTE))"
22957     +                outnobs="%sysfunc(sasmsg(sashelp.dmine, save_numoutobs_vlabel, NOQUOTE))"
22958     +                vars="%sysfunc(sasmsg(sashelp.dmine, rpt_varcount_vlabel, NOQUOTE))"
22959     +                name="%sysfunc(sasmsg(sashelp.dmine, save_location_vlabel, NOQUOTE))"
22960     +                %if ("&EM_PROPERTY_TYPE"= "SAS7BDAT") %then %do;
22961     +                    lib= "%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))"
22962     +                %end;
22963     +                ;
22964     +        run;
22966     +        *** PRINT TO OUTPUT;
22968     +        title "%sysfunc(sasmsg(sashelp.dmine, save_results_title, NOQUOTE))";
22969     +        proc print data=&EM_USER_SAVEOUT label noobs; run;
22970     +        %EM_REPORT(key=SAVEOUT, viewtype=DATA, autodisplay=Y);
22971     +        title;
22973     +    %end;
22975     +    *** SAVE FORMATS **********************************************************;
22977     +    *** CHECK REPLACE CONSTRAINT FOR FORMATS;
22979     +    %if ((%sysfunc(cexist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._FORMATS)) and
22980     +        "&EM_PROPERTY_TYPE"="SAS7BDAT") and
22981     +        ("&EM_PROPERTY_REPLACE"="N"))
22982     +            %then %do;
22983     +                %put &EM_CODEBAR;
22984     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
22985     +                %put &WARNING;
22986     +                %put &EM_CODEBAR;
22987     +                %goto quit;
22988     +            %end;
22990     +    %if ((%sysfunc(fileexist(&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt)) and
22991     +        "&EM_PROPERTY_TYPE" ne "SAS7BDAT") and
22992     +        ("&EM_PROPERTY_REPLACE"="N"))
22993     +           %then %do;
22994     +                %put &EM_CODEBAR;
22995     +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
22996     +                %put &WARNING;
22997     +                %put &EM_CODEBAR;
22998     +                %goto quit;
22999     +            %end;
23001     +    *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
23002     +    *** CONTINGENT ON FORMATS EXISTING;
23003     +    *** PARSE NODE VARIABLE SET FOR FORMATS;
23005     +    %let _FORMAT_FLAG = 0;
23006     +    data _formats;
23007     +        length format $32; /* AVOID MERGE VARIABLE LENGTH WARNING */
23008     +        set &EM_DATA_VARIABLESET(keep=format where=(format ne '')) end=eof;
23009     +        format = tranwrd(format, '.', '');
23010     +        if indexc(format, '$') then fmttype = 'C';
23011     +        else fmttype = 'N';
23012     +        if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
23013     +    run;
23014     +    %if (&_FORMAT_FLAG) %then %EM_SAVEXT_CATALOG(_formats);
23015     +    proc delete data=_formats; run;
23017     +    *** HOUSEKEEPING **********************************************************;
23019     +    %quit:
23021     +    %if ^(%sysfunc(libref(_em_save))) %then %do;
23022     +        libname &EM_PROPERTY_LIB clear;
23023     +    %end;
23025     +    %if (%sysfunc(exist(_save_output_temp))) %then %do;
23026     +        proc delete data=_save_output_temp; run;
23027     +    %end;
23029     +%mend EM_SAVEXT_TRAIN;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SAVEXT_MAIN):   filename _train;
NOTE: Fileref _TRAIN has been deassigned.
MPRINT(EM_SAVEXT_TRAIN):   *** IMPORT UTILITY MACROS;
MPRINT(EM_SAVEXT_TRAIN):   filename _savutil catalog 'sashelp.emutil.savext_macros.source';
NOTE: %INCLUDE (level 1) file _SAVUTIL is file SASHELP.EMUTIL.SAVEXT_MACROS.SOURCE.
23030     +*** UTILITY MACROS FOR EMSAVE NODE ********************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** UTILITY MACROS FOR EMSAVE NODE ********************************************;
23032     +*** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
23033     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23035     +%macro EM_SAVEXT_SAS(_SAVE_ROLE, _SAVE_SET);
23037     +    *** CHECK SAS SET NAME LENGTH;
23039     +    %if %symexist(EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
23040     +        %if ("&EM_SAVEXT_SAS_NAME_LENGTH"="") %then %let EM_SAVEXT_SAS_NAME_LENGTH=30;
23041     +    %end;
23042     +    %else %let EM_SAVEXT_SAS_NAME_LENGTH=30;                                /* 30 FOR OUTSIDE VENDOR LIBS */
23044     +    %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
23045     +        %put &EM_CODEBAR;
23046     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_namelengthsas_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
23047     +        %put &WARNING;
23048     +        %put &EM_CODEBAR;
23049     +        *** REVERTING TO DEFAULT NAME;
23050     +        %let EM_PROPERTY_NAME = em_save;
23051     +    %end;
23053     +    *** CHECK REPLACE CONSTRAINT FOR DATA SET;
23055     +    %if (%sysfunc(exist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE)) and
23056     +        ("&EM_PROPERTY_REPLACE"="N")) %then %do;
23057     +        %put &EM_CODEBAR;
23058     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
23059     +        %put &WARNING;
23060     +        %put &EM_CODEBAR;
23061     +        %goto quit;
23062     +    %end;
23064     +    *** WRITE SAVED DATA SET;
23066     +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;
23068     +    data &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
23069     +        set &_SAVE_SET (obs=&EM_PROPERTY_OUTOBS);
23070     +        keep %EM_SAVEXT_VARS;
23071     +    run;
23073     +    *** WRITE RESULTS *********************************************************;
23074     +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
23076     +    %let _dsid=%sysfunc(open(&_SAVE_SET));
23077     +    %if &_dsid %then %do;
23078     +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
23079     +        %let _rc=%sysfunc(close(&_dsid));
23080     +        %if %eval(&_SAVE_NOBS < 0) %then %do;
23081     +            proc sql noprint;
23082     +                select count(*) into: _SAVE_NOBS
23083     +                from &_SAVE_SET;
23084     +            ;
23085     +            quit;
23086     +        %end;
23087     +    %end;
23088     +    %else %do;
23089     +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
23090     +        %put &EM_CODEBAR;
23091     +        %let ERROR2 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
23092     +        %put &ERROR2;
23093     +        %put &EM_CODEBAR;
23094     +        %goto quit;
23095     +    %end;
23097     +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
23098     +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
23099     +    %end;
23101     +    data _save_output_temp_record;
23102     +        length lib $20 name $255 nobs $20 outnobs $20 vars $20;
23103     +        vars=left("&EM_NUM_SAVEXT_VARS");
23104     +        outnobs=left("&EM_PROPERTY_OUTOBS");
23105     +        nobs=left("&_SAVE_NOBS");
23106     +        lib= left("&EM_PROPERTY_LIB");
23107     +        name=left("%sysfunc(pathname(&EM_PROPERTY_LIB))&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE)");
23108     +    run;
23110     +    proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
23111     +    proc delete data=_save_output_temp_record; run;
23113     +    *** HOUSEKEEPING **********************************************************;
23115     +    %quit:
23117     +    %if %symexist(_SAVE_NOBS) %then %do;
23118     +        data _null_;
23119     +            call symdel('_SAVE_NOBS', 'NOWARN');
23120     +        run;
23121     +    %end;
23123     +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
23124     +        data _null_;
23125     +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
23126     +        run;
23127     +    %end;
23129     +%mend EM_SAVEXT_SAS;
23131     +*** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
23132     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23134     +%macro EM_SAVEXT_PXPT(_SAVE_ROLE, _SAVE_SET);
23136     +    *** ACCOUNT FOR DEFAULT DIR;
23138     +    %if ("&EM_PROPERTY_DIRECTORYSELECTOR" = "") %then %let EM_PROPERTY_DIRECTORYSELECTOR = %nrbquote(&EM_NODEDIR);
23140     +    *** CHECK JMP NAME LENGTH;
23142     +    %if %symexist(EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
23143     +        %if ("&EM_SAVEXT_JMP_NAME_LENGTH"= "") %then %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
23144     +    %end;
23145     +    %else %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
23147     +    %if ("&EM_PROPERTY_TYPE"="JMP") %then %do;
23148     +        %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
23149     +            %put &EM_CODEBAR;
23150     +            %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_namelengthjmp_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
23151     +            %put &WARNING;
23152     +            %put &EM_CODEBAR;
23153     +            *** REVERTING TO DEFAULT NAME;
23154     +            %let EM_PROPERTY_NAME = em_save;
23155     +        %end;
23156     +    %end;
23158     +    *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
23160     +    %let _OUT_FILE_NAME=&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE);
23162     +    *** CHECK REPLACE CONSTRAINT;
23164     +    %if (%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
23165     +        %put &EM_CODEBAR;
23166     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &_OUT_FILE_NAME));
23167     +        %put &WARNING;
23168     +        %put &EM_CODEBAR;
23169     +        %goto quit;
23170     +    %end;
23171     +    %else %if (^%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
23172     +        %let _REPLACE= ;
23173     +    %end;
23174     +    %else %do;
23175     +        %let _REPLACE=replace;
23176     +    %end;
23178     +    *** EXCEL 2010 LIMITATIONS;
23179     +    *** CAN BE OVERRIDDEN BY STARTUP CODE;
23181     +    %if %symexist(_EXCEL_MAX_ROWS) %then %do;
23182     +        %if ("&_EXCEL_MAX_ROWS"= "") %then %let _EXCEL_MAX_ROWS= 1048575;
23183     +    %end;
23184     +    %else %let _EXCEL_MAX_ROWS= 1048575;
23186     +    %if %symexist(_EXCEL_MAX_COLS) %then %do;
23187     +        %if ("&_EXCEL_MAX_COLS"="") %then %let _EXCEL_MAX_COLS= 16384;
23188     +    %end;
23189     +    %else %let _EXCEL_MAX_COLS=16384;
23191     +    *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
23193     +    %let _dsid=%sysfunc(open(&_SAVE_SET));
23194     +    %if &_dsid %then %do;
23195     +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
23196     +        %let _rc=%sysfunc(close(&_dsid));
23197     +        %if %eval(&_SAVE_NOBS < 0) %then %do;
23198     +            proc sql noprint;
23199     +                select count(*) into: _SAVE_NOBS
23200     +                from &_SAVE_SET;
23201     +                ;
23202     +            quit;
23203     +        %end;
23204     +    %end;
23205     +    %else %do;
23206     +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&_SAVE_SET;
23207     +        %put &EM_CODEBAR;
23208     +        %let ERROR3 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &_SAVE_SET));
23209     +        %put &ERROR3;
23210     +        %put &EM_CODEBAR;
23211     +        %goto quit;
23212     +    %end;
23214     +    *** CHECK EXCEL FILE SIZE;
23216     +    %if ("&EM_PROPERTY_TYPE"="XLSX") and (%eval(&_SAVE_NOBS > &_EXCEL_MAX_ROWS) or %eval(&EM_NUM_SAVEXT_VARS > &_EXCEL_MAX_COLS)) %then %do;
23217     +        %put &EM_CODEBAR;
23218     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_excel_limit_warn, NOQUOTE, &_SAVE_SET));
23219     +        %put &WARNING;
23220     +        %put &EM_CODEBAR;
23221     +    %end;
23223     +    *** EXECUTE EXPORT ********************************************************;
23224     +    *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
23226     +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;      /* OTHERWISE ONLY EM_PROPERTY_OUTOBS WILL BE WRITTEN */
23228     +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
23229     +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
23230     +    %end;
23232     +    %if ("&EM_PROPERTY_TYPE"="TXT" or "&EM_PROPERTY_TYPE"="CSV") %then %do;
23234     +        *** SPECIAL CONDITION FOR TAB PROPERTY;
23236     +        %if ("&EM_PROPERTY_TYPE"="TXT") %then %let EM_PROPERTY_TYPE=tab;
23238     +        data _temp_save_view /view=_temp_save_view;
23239     +            set &_SAVE_SET;
23240     +            keep %EM_SAVEXT_VARS;
23241     +        run;
23243     +        %let SYSCC=0;
23244     +        proc export data=_temp_save_view(obs=&EM_PROPERTY_OUTOBS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
23245     +        run;
23246     +        quit;
23248     +    %end;
23249     +    %else %do;
23251     +        %let SYSCC=0;
23252     +        proc export data=&_SAVE_SET(obs=&EM_PROPERTY_OUTOBS keep=%EM_SAVEXT_VARS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
23253     +        run;
23254     +        quit;
23256     +    %end;
23258     +    %if (^&SYSCC=0) %then %do;
23259     +        %let EMEXCEPTIONSTRING=exception.server.IO.CREATE,&_OUT_FILE_NAME;
23260     +        %put &EM_CODEBAR;
23261     +        %let ERROR4 = %sysfunc(sasmsg(sashelp.dmine, IO.CREATE_ERR, NOQUOTE, &_OUT_FILE_NAME));
23262     +        %put &ERROR4;
23263     +        %put &EM_CODEBAR;
23264     +        %goto quit;
23265     +    %end;
23267     +    *** WRITE RESULTS *********************************************************;
23268     +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
23270     +    %if %sysfunc(fileexist(&_OUT_FILE_NAME)) %then %do;
23271     +        data _save_output_temp_record;
23272     +            length name $255 nobs $20 outnobs $20 vars $20;
23273     +            vars=left("&EM_NUM_SAVEXT_VARS");
23274     +            outnobs=left("&EM_PROPERTY_OUTOBS");
23275     +            nobs=left("&_SAVE_NOBS");
23276     +            name=left("&_OUT_FILE_NAME");
23277     +        run;
23278     +        proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
23279     +        proc delete data=_save_output_temp_record; run;
23280     +    %end;
23281     +    %else %do;
23282     +        %let EMEXCEPTIONSTRING=exception.server.IO.CANTREADFILE,&_OUT_FILE_NAME;
23283     +        %put &EM_CODEBAR;
23284     +        %let ERROR5 = %sysfunc(sasmsg(sashelp.dmine, IO.CANTREADFILE_ERR, NOQUOTE, &_OUT_FILE_NAME));
23285     +        %put &ERROR5;
23286     +        %put &EM_CODEBAR;
23287     +        %goto quit;
23288     +    %end;
23290     +    *** HOUSEKEEPING **********************************************************;
23292     +    %quit:
23294     +    %if ("&EM_PROPERTY_TYPE"="tab") %then %let EM_PROPERTY_TYPE=TXT;
23296     +    %if %sysfunc(exist(_temp_save_view, VIEW)) %then %do;
23297     +        proc datasets lib=work memtype=view nolist;
23298     +            delete _temp_save_view;
23299     +        run;
23300     +        quit;
23301     +    %end;
23303     +    %if %symexist(_SAVE_NOBS) %then %do;
23304     +        data _null_;
23305     +            call symdel('_SAVE_NOBS', 'NOWARN');
23306     +        run;
23307     +    %end;
23309     +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
23310     +        data _null_;
23311     +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
23312     +        run;
23313     +    %end;
23315     +%mend EM_SAVEXT_PXPT;
23317     +*** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
23318     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23320     +%macro EM_SAVEXT_CATALOG(_FORMATS);
23322     +    *** SORT AND REMOVE DUPLICATES;
23324     +    proc sort data=&_FORMATS nodupkey;
23325     +        by format;
23326     +    run;
23327     +    quit;
23329     +    *** RETRIEVE FORMAT LOCATION INFO AND ASSIGNED CATALOGS IN ACTIVE SESSION;
23331     +    proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne ''))
23332     +        out=_formats2(rename=(fmtname=format));
23333     +        by fmtname;
23334     +    run;
23335     +    quit;
23337     +    *** MERGE SAS FORMATS WITH LOCATION;
23339     +    data &_FORMATS;
23340     +        merge &_FORMATS(in=_a) _formats2(in=_b);
23341     +        by format;
23342     +        if _a and _b then output;
23343     +    run;
23345     +    *** IF &_FORMATS IS EMPTY AFTER MERGE THEN NO FORMATS BELONG TO THE SAVED SET;
23347     +    proc contents data=&_FORMATS out=_formats_content_temp noprint; run;
23348     +    data _null_;
23349     +        set _formats_content_temp (obs=1);
23350     +        if nobs > 0 then call symput('_USER_FORMATS_FLAG','1');
23351     +        else call symput('_USER_FORMATS_FLAG','0');
23352     +    run;
23353     +    %if (^&_USER_FORMATS_FLAG) %then %do;
23354     +        %put &EM_CODEBAR;
23355     +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
23356     +        %put &WARNING;
23357     +        %put &EM_CODEBAR;
23358     +        %goto quit;
23359     +    %end;
23361     +    *** SAVE FORMATS AS CATALOG OR TRANSPORT FORMAT;
23363     +    proc sort data=&_FORMATS;
23364     +        by libname memname;
23365     +    run;
23366     +    quit;
23368     +    *** WRITING CATALOG IN WORK AVOIDS OVERWRITING SAS CATALOG;
23369     +    *** FOR CASE REPLACE=N, TYPE ne SAS7BDAT;
23371     +    data _null_;
23372     +        set &_FORMATS end=eof;
23373     +        by libname memname;
23374     +        if first.libname or first.memname then do;
23375     +            call execute('proc catalog cat='|| strip(libname)||'.'||strip(memname)||';');
23376     +            call execute('copy out=work.&EM_PROPERTY_NAME._FORMATS et=format ;');
23377     +            call execute('select ');
23378     +        end;
23379     +        if strip(fmttype) eq 'C' then do;
23380     +            call execute(' '||strip(tranwrd(format, '$', ''))||'.formatc');
23381     +        end;
23382     +        else call execute(' '||strip(format)||'.format');
23383     +        if last.libname or last.memname then do;
23384     +            call execute(';');
23385     +            call execute('run;');
23386     +        end;
23387     +        if eof then call execute('quit;');
23388     +    run;
23390     +    %if ("&EM_PROPERTY_TYPE" = "SAS7BDAT") %then %do;
23391     +        proc copy in=work out=&EM_PROPERTY_LIB; select &EM_PROPERTY_NAME._FORMATS; run; quit;
23392     +    %end;
23393     +    %else %do;
23394     +        proc cport cat=work.&EM_PROPERTY_NAME._formats file="&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt"; run;
23395     +    %end;
23397     +    *** HOUSEKEEPING **********************************************************;
23399     +    proc datasets lib=work memtype=catalog nolist;
23400     +        delete &EM_PROPERTY_NAME._FORMATS;
23401     +    run;
23402     +    quit;
23404     +    %quit:
23406     +    proc delete data=_formats_content_temp; run;
23407     +    proc delete data=_formats2; run;
23409     +%mend EM_SAVEXT_CATALOG;
23411     +*** FIND VARIABLES TO KEEP ****************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** FIND VARIABLES TO KEEP ****************************************************;
23412     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23414     +%macro EM_SAVEXT_GET_VARS(_SAVE_ROLE, _SAVE_SET);
23416     +    %if("%sysfunc(strip(%upcase(&_SAVE_ROLE)))" ne "TRANSACTION") %then %do;
23418     +        *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
23420     +        proc contents data=&_SAVE_SET out=_input_vars(keep=name) noprint; run;
23421     +        proc sort data=_input_vars; by name; run;
23423     +        *** EXCLUDE REJECTED OR UNUSED VARIABLES;
23425     +        proc sort data=&EM_DATA_VARIABLESET
23426     +            (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
23427     +            by name;
23428     +        run;
23430     +        data _em_savext_vars;
23431     +            merge _input_vars(in=_a) _train_vars(in=_b);
23432     +            by name;
23433     +            keep name;
23434     +            if _a and _b then output;
23435     +        run;
23437     +        *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
23439     +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
23441     +        *** HOUSEKEEPING;
23443     +        proc delete data=_input_vars; run;
23444     +        proc delete data=_train_vars; run;
23445     +        proc delete data=_em_savext_vars; run;
23447     +    %end;
23448     +    %else %do; /* TRANSCATION TABLE VARIABLES ARE NOT LISTED IN THE TRAINING VARIABLE SET */
23450     +        proc contents data=&_SAVE_SET out=_em_savext_vars(keep=name) noprint; run;
23451     +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
23452     +        proc delete data=_em_savext_vars; run;
23454     +    %end;
23456     +%mend EM_SAVEXT_GET_VARS;
23458     +*** CHECKS IF A SET OR VIEW EXISTS ********************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CHECKS IF A SET OR VIEW EXISTS ********************************************;
23459     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23461     +%macro EM_SAVEXT_SET_EXISTS(_DATASET);
23463     +    %if (%sysfunc(exist(&_DATASET)) or
23464     +        %sysfunc(exist(&_DATASET, VIEW))) and
23465     +        "&_DATASET" ne "" %then %do;
23466     +            %let _rc=1;
23467     +    %end;
23468     +    %else %do;
23469     +            %let _rc=0;
23470     +    %end;
23472     +    &_rc.
23474     +%mend EM_SAVEXT_SET_EXISTS;
23476     +*** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
MPRINT(EM_SAVEXT_TRAIN):   *** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
23477     +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CALLED BY EM_SAVEXT_TRAIN *************************************************;
23479     +%macro EM_SAVEXT_REGISTER(_DATASET, _ROLE, _i);
23481     +    _save_set="&_DATASET";
23482     +    _save_role="&_ROLE";
23483     +    _save_set_index=cats('_save_set', strip(put(&_i,1.)));
23484     +    _save_role_index=cats('_save_role', strip(put(&_i,1.)));
23485     +    call symput(_save_set_index, _save_set);
23486     +    call symput(_save_role_index, _save_role);
23488     +%mend EM_SAVEXT_REGISTER;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SAVEXT_TRAIN):   filename _savutil;
NOTE: Fileref _SAVUTIL has been deassigned.
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
MPRINT(EM_SAVEXT_TRAIN):   *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
MPRINT(EM_SAVEXT_TRAIN):   *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
MPRINT(EM_SAVEXT_TRAIN):   data _null_;
MPRINT(EM_SAVEXT_TRAIN):   length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
MPRINT(EM_SAVEXT_TRAIN):   _i=0;
MPRINT(EM_SAVEXT_TRAIN):   *** TRAIN;
MPRINT(EM_SAVEXT_TRAIN):   _i=_i+1;
MPRINT(EM_SAVEXT_REGISTER):   _save_set="EMWS3.Clus2_TRAIN";
MPRINT(EM_SAVEXT_REGISTER):   _save_role="TRAIN";
MPRINT(EM_SAVEXT_REGISTER):   _save_set_index=cats('_save_set', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_REGISTER):   _save_role_index=cats('_save_role', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_REGISTER):   call symput(_save_set_index, _save_set);
MPRINT(EM_SAVEXT_REGISTER):   call symput(_save_role_index, _save_role);
MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** VALIDATE;
MPRINT(EM_SAVEXT_TRAIN):   *** TEST;
MPRINT(EM_SAVEXT_TRAIN):   *** SCORE;
MPRINT(EM_SAVEXT_TRAIN):   *** TRANSACTION;
MPRINT(EM_SAVEXT_TRAIN):   *** ESTABLISH NUMBER OF SETS TO SAVE;
MPRINT(EM_SAVEXT_TRAIN):   call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** EXIT IF NO PARTITIONS TO SAVE;
MPRINT(EM_SAVEXT_TRAIN):   *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
MPRINT(EM_SAVEXT_TRAIN):   *** REVERT TO DEFAULT NAME;
MPRINT(EM_SAVEXT_TRAIN):   *** ACCOUNT FOR LIB ISSUES;
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK FOR EXISTING LIB;
MPRINT(EM_SAVEXT_TRAIN):   *** ACCOUNT FOR DEFAULT NAME;
MPRINT(EM_SAVEXT_TRAIN):   *** CALL UTILITY MACROS TO SAVE SETS *************************************;
MPRINT(EM_SAVEXT_GET_VARS):   *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
MPRINT(EM_SAVEXT_GET_VARS):   proc contents data=EMWS3.Clus2_TRAIN out=_input_vars(keep=name) noprint;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: The data set WORK._INPUT_VARS has 245 observations and 1 variables.
NOTE: PROCEDURE CONTENTS ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc sort data=_input_vars;
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: There were 245 observations read from the data set WORK._INPUT_VARS.
NOTE: The data set WORK._INPUT_VARS has 245 observations and 1 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   *** EXCLUDE REJECTED OR UNUSED VARIABLES;
MPRINT(EM_SAVEXT_GET_VARS):   proc sort data=EMWS3.EMSave_VariableSet (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: There were 243 observations read from the data set EMWS3.EMSAVE_VARIABLESET.
      WHERE (use='Y') or ((use='D') and (role not = 'REJECTED'));
NOTE: The data set WORK._TRAIN_VARS has 243 observations and 1 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   data _em_savext_vars;
MPRINT(EM_SAVEXT_GET_VARS):   merge _input_vars(in=_a) _train_vars(in=_b);
MPRINT(EM_SAVEXT_GET_VARS):   by name;
MPRINT(EM_SAVEXT_GET_VARS):   keep name;
MPRINT(EM_SAVEXT_GET_VARS):   if _a and _b then output;
MPRINT(EM_SAVEXT_GET_VARS):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 245 observations read from the data set WORK._INPUT_VARS.
NOTE: There were 243 observations read from the data set WORK._TRAIN_VARS.
NOTE: The data set WORK._EM_SAVEXT_VARS has 243 observations and 1 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set _em_savext_vars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(name))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' "'!!trim(name)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global EM_NUM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put "%" "let EM_NUM_SAVEXT_VARS = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = '"'!!TRIM(name)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend EM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global EM_NUM_SAVEXT_VARS;";
MPRINT(EM_VARMACRO):   put "%" "let EM_NUM_SAVEXT_VARS = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Tamaño de página del catálogo=4096,
      Número de páginas de catálogo=4,
      Creado=dom, 13 de dic de 2020 17:16:10,
      Última modificación=dom, 13 de dic de 2020 17:16:10,
      Nombre archivo=C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD9308_MIIKYMEDIA_\Prc2\emutil.sas7bcat,
      Versión creada=9.0401M6,Host creado=X64_10HOME,
      Nombre de propietario=MIIKYMEDIA\Admin,
      Tamaño archivo=             5KB,
      Tamaño de archivo (bytes)=5120

NOTE: 34 records were written to the file MACFILE.
      The minimum record length was 21.
      The maximum record length was 79.
NOTE: There were 243 observations read from the data set WORK._EM_SAVEXT_VARS.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
23494     +%macro EM_SAVEXT_VARS;
23495     +"ACCESS"n "ADAM"n "ADDRESS"n "ADVANC"n "AMERICAN"n "ANDI"n "ANSWER"n
23496     +"APPLIC"n "APPRECI"n "ARAB"n "AREA"n "ARGIC"n "ARMENIA"n "ARMENIAN"n "ATTACK"n
23497     +"AUDIO"n "BANK"n "BASE"n "BATTERI"n "BILL"n "BOOK"n "BRAIN"n "BRIAN"n "BUILD"n
23498     +"BUTTON"n "CALIFORNIA"n "CALL"n "CAN"n "CARD"n "CASE"n "CENTER"n "CHANG"n
23499     +"CHIP"n "CIRCUIT"n "CLIENT"n "CODE"n "COLOR"n "COMMUN"n "COMP"n "COMPANI"n
23500     +"COMPIL"n "COMPUT"n "CONNECT"n "CONTROL"n "COPI"n "CORRECT"n "CREAT"n
23501     +"CURRENT"n "DAI"n "DATA"n "DAVID"n "DEPART"n "DEPT"n "DESIGN"n "DETECTOR"n
23502     +"DEVIC"n "DISEAS"n "DISPLAI"n "DISTRIBUT"n "DOCTOR"n "DOESN"n "DON"n "DRAW"n
23503     +"DRIVE"n "DRUG"n "EDU"n "EFFECT"n "ELECTR"n "ELECTRON"n "EMAIL"n "ENGIN"n
23504     +"ERROR"n "EVENT"n "EXPERI"n "FACT"n "FAX"n "FEEL"n "FILE"n "FIND"n "FOLLOWUP"n
23505     +"FONT"n "FOOD"n "FRI"n "FRIEND"n "FUNCTION"n "GEB"n "GENER"n "GEORGIA"n "GIVE"n
23506     +"GOOD"n "GORDON"n "GOVERN"n "GRAPHIC"n "GREAT"n "GREEK"n "GROUND"n "GROUP"n
23507     +"HAPPEN"n "HEAR"n "HIGH"n "HOME"n "IDEA"n "IMAG"n "INCLUD"n "INFO"n "INFORM"n
23508     +"INPUT"n "INSTITUT"n "INTEREST"n "INTERNET"n "ISRA"n "ISRAEL"n "JEW"n "JEWISH"n
23509     +"JOHN"n "KEYBOARD"n "KEYWORD"n "KILL"n "KIND"n "LEVEL"n "LIST"n "LIVE"n "LONG"n
23510     +"MACHIN"n "MAIL"n "MANAG"n "MARK"n "MED"n "MEDIC"n "MEDICIN"n "MEMORI"n
23511     +"MICHAEL"n "MIKE"n "MON"n "MOTIF"n "MOTOROLA"n "NATION"n "NETWORK"n "NEW"n
23512     +"NEWS"n "NEWSREAD"n "NOIS"n "NUMBER"n "OPER"n "OPINION"n "ORIGIN"n "OUTPUT"n
23513     +"PAIN"n "PALESTINIAN"n "PART"n "PATIENT"n "PERSON"n "PHONE"n "PITT"n
23514     +"PITTSBURGH"n "PLACE"n "POINT"n "POLICI"n "POSIT"n "POST"n "POWER"n "PROBLEM"n
23515     +"PRODUCT"n "PROGRAM"n "PROJECT"n "PUBLIC"n "QUESTION"n "RADAR"n "RADIO"n
23516     +"READ"n "REASON"n "RECEIV"n "REMEMB"n "REPLI"n "REPORT"n "REQUIR"n "RESEARCH"n
23517     +"RESPONS"n "ROBERT"n "RUN"n "SAT"n "SCHOOL"n "SCI"n "SCIENC"n "SCREEN"n "SELL"n
23518     +"SEND"n "SERDAR"n "SERVER"n "SERVIC"n "SHOW"n "SIDE"n "SIGNAL"n "SOFTWAR"n
23519     +"SOUND"n "SOURC"n "STANDARD"n "START"n "STATE"n "STEVE"n "STUDI"n "SUBSCRIB"n
23520     +"SUGGEST"n "SUN"n "SUPPORT"n "SWITCH"n "SYSTEM"n "TALK"n "TECHNOLOG"n "TERMIN"n
23521     +"TEST"n "THAT"n "THU"n "TIME"n "TREATMENT"n "TRUE"n "TUE"n "TURKISH"n "TYPE"n
23522     +"UNIV"n "UNIVERS"n "UNIX"n "USENET"n "USER"n "UTEXA"n "UUCP"n "VERSION"n
23523     +"VIRGINIA"n "VOLTAG"n "WATER"n "WED"n "WIDGET"n "WINDOW"n "WIRE"n "WONDER"n
23524     +"WORK"n "WORLD"n "XLIB"n "XTERM"n "YEAR"n "YOU"n "_SEGMENT_"n "id_documento"n
23525     +%mend EM_SAVEXT_VARS;
23526     +%global EM_NUM_SAVEXT_VARS;
23527     +%let EM_NUM_SAVEXT_VARS = 243 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_SAVEXT_GET_VARS):  ;
MPRINT(EM_SAVEXT_GET_VARS):   *** HOUSEKEEPING;
MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_input_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._INPUT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_train_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._TRAIN_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_GET_VARS):   proc delete data=_em_savext_vars;
MPRINT(EM_SAVEXT_GET_VARS):   run;

NOTE: Deleting WORK._EM_SAVEXT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_SAS):   *** CHECK SAS SET NAME LENGTH;
MPRINT(EM_SAVEXT_SAS):   *** CHECK REPLACE CONSTRAINT FOR DATA SET;
MPRINT(EM_SAVEXT_SAS):   *** WRITE SAVED DATA SET;
MPRINT(EM_SAVEXT_SAS):   data AMUL.em_save_TRAIN;
MPRINT(EM_SAVEXT_SAS):   set EMWS3.Clus2_TRAIN (obs=MAX);
MPRINT(EM_SAVEXT_SAS):   keep
MPRINT(EM_SAVEXT_VARS):   "ACCESS"n "ADAM"n "ADDRESS"n "ADVANC"n "AMERICAN"n "ANDI"n "ANSWER"n "APPLIC"n "APPRECI"n "ARAB"n "AREA"n "ARGIC"n "ARMENIA"n "ARMENIAN"n "ATTACK"n "AUDIO"n "BANK"n "BASE"n "BATTERI"n "BILL"n "BOOK"n "BRAIN"n "BRIAN"n "BUILD"n 
"BUTTON"n "CALIFORNIA"n "CALL"n "CAN"n "CARD"n "CASE"n "CENTER"n "CHANG"n "CHIP"n "CIRCUIT"n "CLIENT"n "CODE"n "COLOR"n "COMMUN"n "COMP"n "COMPANI"n "COMPIL"n "COMPUT"n "CONNECT"n "CONTROL"n "COPI"n "CORRECT"n "CREAT"n "CURRENT"n "DAI"n "DATA"n "DAVID"n 
"DEPART"n "DEPT"n "DESIGN"n "DETECTOR"n "DEVIC"n "DISEAS"n "DISPLAI"n "DISTRIBUT"n "DOCTOR"n "DOESN"n "DON"n "DRAW"n "DRIVE"n "DRUG"n "EDU"n "EFFECT"n "ELECTR"n "ELECTRON"n "EMAIL"n "ENGIN"n "ERROR"n "EVENT"n "EXPERI"n "FACT"n "FAX"n "FEEL"n "FILE"n 
"FIND"n "FOLLOWUP"n "FONT"n "FOOD"n "FRI"n "FRIEND"n "FUNCTION"n "GEB"n "GENER"n "GEORGIA"n "GIVE"n "GOOD"n "GORDON"n "GOVERN"n "GRAPHIC"n "GREAT"n "GREEK"n "GROUND"n "GROUP"n "HAPPEN"n "HEAR"n "HIGH"n "HOME"n "IDEA"n "IMAG"n "INCLUD"n "INFO"n "INFORM"n 
"INPUT"n "INSTITUT"n "INTEREST"n "INTERNET"n "ISRA"n "ISRAEL"n "JEW"n "JEWISH"n "JOHN"n "KEYBOARD"n "KEYWORD"n "KILL"n "KIND"n "LEVEL"n "LIST"n "LIVE"n "LONG"n "MACHIN"n "MAIL"n "MANAG"n "MARK"n "MED"n "MEDIC"n "MEDICIN"n "MEMORI"n "MICHAEL"n "MIKE"n 
"MON"n "MOTIF"n "MOTOROLA"n "NATION"n "NETWORK"n "NEW"n "NEWS"n "NEWSREAD"n "NOIS"n "NUMBER"n "OPER"n "OPINION"n "ORIGIN"n "OUTPUT"n "PAIN"n "PALESTINIAN"n "PART"n "PATIENT"n "PERSON"n "PHONE"n "PITT"n "PITTSBURGH"n "PLACE"n "POINT"n "POLICI"n "POSIT"n 
"POST"n "POWER"n "PROBLEM"n "PRODUCT"n "PROGRAM"n "PROJECT"n "PUBLIC"n "QUESTION"n "RADAR"n "RADIO"n "READ"n "REASON"n "RECEIV"n "REMEMB"n "REPLI"n "REPORT"n "REQUIR"n "RESEARCH"n "RESPONS"n "ROBERT"n "RUN"n "SAT"n "SCHOOL"n "SCI"n "SCIENC"n "SCREEN"n 
"SELL"n "SEND"n "SERDAR"n "SERVER"n "SERVIC"n "SHOW"n "SIDE"n "SIGNAL"n "SOFTWAR"n "SOUND"n "SOURC"n "STANDARD"n "START"n "STATE"n "STEVE"n "STUDI"n "SUBSCRIB"n "SUGGEST"n "SUN"n "SUPPORT"n "SWITCH"n "SYSTEM"n "TALK"n "TECHNOLOG"n "TERMIN"n "TEST"n 
"THAT"n "THU"n "TIME"n "TREATMENT"n "TRUE"n "TUE"n "TURKISH"n "TYPE"n "UNIV"n "UNIVERS"n "UNIX"n "USENET"n "USER"n "UTEXA"n "UUCP"n "VERSION"n "VIRGINIA"n "VOLTAG"n "WATER"n "WED"n "WIDGET"n "WINDOW"n "WIRE"n "WONDER"n "WORK"n "WORLD"n "XLIB"n "XTERM"n 
"YEAR"n "YOU"n
MPRINT(EM_SAVEXT_SAS):   "_SEGMENT_"n "id_documento"n;
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS_99.
NOTE: Vista EMWS3.CLUS2_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.39 seconds
      cpu time            0.39 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.IDS2_DATA.
NOTE: There were 3000 observations read from the data set EMWS3.CLUS2_TRAIN.
NOTE: The data set AMUL.EM_SAVE_TRAIN has 3000 observations and 243 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.40 seconds
      cpu time            0.42 seconds
      

MPRINT(EM_SAVEXT_SAS):   *** WRITE RESULTS *********************************************************;
MPRINT(EM_SAVEXT_SAS):   *** CONTINGENT ON SAVED FILE EXISTING *************************************;
MPRINT(EM_SAVEXT_SAS):   proc sql noprint;
MPRINT(EM_SAVEXT_SAS):   select count(*) into: _SAVE_NOBS from EMWS3.Clus2_TRAIN;
NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS_99.
NOTE: Vista EMWS3.CLUS2_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.36 seconds
      cpu time            0.35 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.IDS2_DATA.
MPRINT(EM_SAVEXT_SAS):   ;
MPRINT(EM_SAVEXT_SAS):   quit;
NOTE: PROCEDURE SQL ha utilizado (Tiempo de proceso total):
      real time           0.37 seconds
      cpu time            0.37 seconds
      

MPRINT(EM_SAVEXT_SAS):   data _save_output_temp_record;
MPRINT(EM_SAVEXT_SAS):   length lib $20 name $255 nobs $20 outnobs $20 vars $20;
MPRINT(EM_SAVEXT_SAS):   vars=left("243");
MPRINT(EM_SAVEXT_SAS):   outnobs=left("MAX");
MPRINT(EM_SAVEXT_SAS):   nobs=left("    3000");
MPRINT(EM_SAVEXT_SAS):   lib= left("AMUL");
MPRINT(EM_SAVEXT_SAS):   name=left(
MPRINT(EM_SAVEXT_SAS):  "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\DATA\em_save_TRAIN.sas7bdat");
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: The data set WORK._SAVE_OUTPUT_TEMP_RECORD has 1 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_SAS):   proc append base=_save_output_temp data=_save_output_temp_record force;
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: Appending WORK._SAVE_OUTPUT_TEMP_RECORD a WORK._SAVE_OUTPUT_TEMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP_RECORD.
NOTE: The data set WORK._SAVE_OUTPUT_TEMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_SAS):   quit;
MPRINT(EM_SAVEXT_SAS):   proc delete data=_save_output_temp_record;
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: Deleting WORK._SAVE_OUTPUT_TEMP_RECORD (memtype=DATA).
NOTE: PROCEDURE DELETE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_SAS):   *** HOUSEKEEPING **********************************************************;
MPRINT(EM_SAVEXT_SAS):   data _null_;
MPRINT(EM_SAVEXT_SAS):   call symdel('_SAVE_NOBS', 'NOWARN');
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_SAS):   data _null_;
MPRINT(EM_SAVEXT_SAS):   call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
MPRINT(EM_SAVEXT_SAS):   run;

NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** OUTPUT ****************************************************************;
MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVE OUTPUT DATA TO PROJECT;
MPRINT(EM_SAVEXT_TRAIN):   data EMWS3.EMSave_SAVEOUT;
MPRINT(EM_SAVEXT_TRAIN):   set _save_output_temp;
MPRINT(EM_SAVEXT_TRAIN):   label nobs= "Observaciones totales" outnobs= "Observaciones guardadas" vars= "Número de variables" name= "Ubicación de la salida" lib= "Librería de datos" ;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP.
NOTE: The data set EMWS3.EMSAVE_SAVEOUT has 1 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** PRINT TO OUTPUT;
MPRINT(EM_SAVEXT_TRAIN):   title "Propiedades de datos guardadas";
MPRINT(EM_SAVEXT_TRAIN):   proc print data=EMWS3.EMSave_SAVEOUT label noobs;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS3.EMSAVE_SAVEOUT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "SAVEOUT";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27239612782019;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_SAVEXT_TRAIN):  ;
MPRINT(EM_SAVEXT_TRAIN):   title;
MPRINT(EM_SAVEXT_TRAIN):   *** SAVE FORMATS **********************************************************;
MPRINT(EM_SAVEXT_TRAIN):   *** CHECK REPLACE CONSTRAINT FOR FORMATS;
MPRINT(EM_SAVEXT_TRAIN):   *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
MPRINT(EM_SAVEXT_TRAIN):   *** CONTINGENT ON FORMATS EXISTING;
MPRINT(EM_SAVEXT_TRAIN):   *** PARSE NODE VARIABLE SET FOR FORMATS;
MPRINT(EM_SAVEXT_TRAIN):   data _formats;
MPRINT(EM_SAVEXT_TRAIN):   length format $32;
MPRINT(EM_SAVEXT_TRAIN):   set EMWS3.EMSave_VariableSet(keep=format where=(format ne '')) end=eof;
MPRINT(EM_SAVEXT_TRAIN):   format = tranwrd(format, '.', '');
MPRINT(EM_SAVEXT_TRAIN):   if indexc(format, '$') then fmttype = 'C';
MPRINT(EM_SAVEXT_TRAIN):   else fmttype = 'N';
MPRINT(EM_SAVEXT_TRAIN):   if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: There were 0 observations read from the data set EMWS3.EMSAVE_VARIABLESET.
      WHERE format not = ' ';
NOTE: The data set WORK._FORMATS has 0 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   proc delete data=_formats;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: Deleting WORK._FORMATS (memtype=DATA).
NOTE: PROCEDURE DELETE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_TRAIN):   *** HOUSEKEEPING **********************************************************;
MPRINT(EM_SAVEXT_TRAIN):   proc delete data=_save_output_temp;
MPRINT(EM_SAVEXT_TRAIN):   run;

NOTE: Deleting WORK._SAVE_OUTPUT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_SAVEXT_MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: EMSave;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23528      
23529      *------------------------------------------------------------*;
23530      * End TRAIN: EMSave;
23531      *------------------------------------------------------------*;

23532      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23533      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
23534      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23535      ;
MPRINT(EM_DIAGRAM):   ;
23536      ;
MPRINT(EM_DIAGRAM):   ;
23537      ;
MPRINT(EM_DIAGRAM):   ;
23538      ;
MPRINT(EM_DIAGRAM):   ;
23539      quit;
MPRINT(EM_DIAGRAM):   quit;
23540      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23541      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
23542      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23543      /*; *"; *'; */
23544      ;
MPRINT(EM_DIAGRAM):   ;
23545      run;
MPRINT(EM_DIAGRAM):   run;
23546      quit;
MPRINT(EM_DIAGRAM):   quit;
23547      /* Reset EM Options */
23548      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
23549      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
23550      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
23551      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
23552      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
23553      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
