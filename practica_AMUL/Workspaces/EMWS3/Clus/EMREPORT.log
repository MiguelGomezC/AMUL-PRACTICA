MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "10/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "22H33" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                10/12/20
Hora:                22H33
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3P0O999 "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3P0O999 new;
MPRINT(EM_DIAGRAM):   run;
39837      data WORK.M0R5RQNI;
MPRINT(EM_DIAGRAM):    data WORK.M0R5RQNI;
39838      set WORK.M0R5RQNI;
MPRINT(EM_DIAGRAM):   set WORK.M0R5RQNI;
39839      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
39840      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.M0R5RQNI.
NOTE: The data set WORK.M0R5RQNI has 1204 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

39841      data WORK.M0R5RQNI;
MPRINT(EM_DIAGRAM):    data WORK.M0R5RQNI;
39842      set WORK.M0R5RQNI end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M0R5RQNI end=_eof_ nobs=_nobs_;
39843      output;
MPRINT(EM_DIAGRAM):   output;
39844      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
39845      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
39846      ROLE = 'TARGET';
MPRINT(EM_DIAGRAM):   ROLE = 'TARGET';
39847      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
39848      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
39849      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
39850      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
39851      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
39852      USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
39853      output;
MPRINT(EM_DIAGRAM):   output;
39854      end;
MPRINT(EM_DIAGRAM):   end;
39855      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.M0R5RQNI.
NOTE: The data set WORK.M0R5RQNI has 1205 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

39856      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
39857      * Clus: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Clus: Create decision matrix;
39858      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39859      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
39860      * Clus: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Variables Macro ;
39861      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
39862      %macro EM_TREEVARS;
39863          ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT
39864         ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI
39865         ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW
39866         ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI
39867         APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA
39868         ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN
39869         ATHENA ATTACH ATTACK ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI
39870         BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER
39871         BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON
39872         BOUGHT BOULDER BOX BRAD BRAIN BRAND BREAK BRIAN BRING BRITISH BROWN BTW BUFFER
39873         BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN
39874         CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER
39875         CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL CHARACT CHARG CHASTITI
39876         CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI
39877         CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR
39878         CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN
39879         COLOR COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON
39880         COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET
39881         CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT
39882         CONTACT CONTENT CONTEXT CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP
39883         CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN
39884         CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL
39885         DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD DEAL DEAR DEATH DECID DECOD DEFAULT
39886         DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL
39887         DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO
39888         DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG DISCLAIM DISCUSS DISEAS
39889         DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON
39890         DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI
39891         EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL
39892         ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP
39893         ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT
39894         EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE
39895         FACT FAIL FALS FAMILI FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT
39896         FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU
39897         FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE
39898         FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND FULL FUNCTION FUTUR GAIN GAME
39899         GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI
39900         GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG
39901         GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD
39902         HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT
39903         HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER
39904         HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD
39905         HUMAN HUNTSVIL ICON IDEA IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT
39906         IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT
39907         INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC
39908         INTERGRAPH INTERN INTERNET INTERVIEW INVENT INVOLV IRAN IRVIN ISLAM ISLAND ISN
39909         ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH
39910         JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD
39911         KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB LABEL
39912         LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV
39913         LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT
39914         LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG
39915         LONGER LOOK LOOP LOST LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN
39916         MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR
39917         MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON
39918         MEMBER MEMORI MENTION MENU MESSAG METAL METHOD METHODOLOG MICHAEL MIDDL MIGRAIN
39919         MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL
39920         MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG
39921         MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR NAZI
39922         NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW
39923         NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER
39924         OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM
39925         OMRAN OPEN OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL
39926         OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN
39927         PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD
39928         PERSIAN PERSON PETER PHONE PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL
39929         PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT
39930         POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER
39931         POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID PRESS PRETTI PREVENT PREVIOU
39932         PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM
39933         PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC
39934         PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST RADAR
39935         RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV
39936         RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL
39937         RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR
39938         RESEARCH RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN
39939         REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST
39940         RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE
39941         SCHEMAT SCHOOL SCHWARTZ SCI SCIENC SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU
39942         SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT
39943         SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME
39944         SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT SHOULDN SHOW SICK SIDE SIGN
39945         SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN
39946         SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC
39947         SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK SPOT STAI
39948         STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN
39949         STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB
39950         SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS
39951         SURGERI SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL
39952         TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL
39953         TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE
39954         THEORI THERAPI THERE THEY THINK THOMA THOUGHT THREAD THROW THU TIM TIME TIMER
39955         TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE
39956         TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE
39957         TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN UNDERSTAND UNIT UNIV
39958         UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL
39959         VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG
39960         WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK
39961         WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON
39962         WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG
39963         XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG
39964         ZIONISM ZIONIST ZUMA
39965      %mend EM_TREEVARS;
39966      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
39967      * Clus: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Targets Macro ;
39968      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
39969      %macro EM_TREETARGETS;
39970          _SEGMENT_
39971      %mend EM_TREETARGETS;
39972      data EMWS3.EM_Clus / view=EMWS3.EM_Clus;
MPRINT(EM_DIAGRAM):   data EMWS3.EM_Clus / view=EMWS3.EM_Clus;
39973      set
39973    ! EMWS3.Clus_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_TRAIN(keep
MPRINT(EM_DIAGRAM):  =ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI 
ANDREW ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN ATHENA ATTACH ATTACK 
ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND 
BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL 
CHARACT CHARG CHASTITI CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN COLOR 
COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT 
CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD 
DEAL DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG 
DISCLAIM DISCUSS DISEAS DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL 
ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FACT FAIL FALS FAMILI 
FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND 
FULL FUNCTION FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD 
HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD HUMAN HUNTSVIL ICON IDEA 
IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC INTERGRAPH INTERN INTERNET INTERVIEW INVENT 
INVOLV IRAN IRVIN ISLAM ISLAND ISN ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB 
LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG LONGER LOOK LOOP LOST 
LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON MEMBER MEMORI MENTION MENU MESSAG METAL METHOD 
METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR 
NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM OMRAN OPEN 
OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PERSON PETER PHONE 
PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID 
PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST 
RADAR RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR RESEARCH 
RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE SCHEMAT SCHOOL SCHWARTZ SCI SCIENC 
SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT 
SHOULDN SHOW SICK SIDE SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK 
SPOT STAI STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS SURGERI 
SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE THEORI THERAPI THERE THEY THINK 
THOMA THOUGHT THREAD THROW THU TIM TIME TIMER TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN 
UNDERSTAND UNIT UNIV UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK 
WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG ZIONISM ZIONIST 
ZUMA _SEGMENT_);
39974      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS3.EM_CLUS.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Vista EMWS3.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.10 seconds
      cpu time            0.10 seconds
      
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.12 seconds
      cpu time            0.10 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs intervalo Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
39975      *------------------------------------------------------------* ;
39976      * Clus: Inputs intervalo Macro ;
39977      *------------------------------------------------------------* ;
39978      %macro INTINPUTS;
39979          ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT
39980         ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI
39981         ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW
39982         ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI
39983         APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA
39984         ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN
39985         ATHENA ATTACH ATTACK ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI
39986         BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER
39987         BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON
39988         BOUGHT BOULDER BOX BRAD BRAIN BRAND BREAK BRIAN BRING BRITISH BROWN BTW BUFFER
39989         BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN
39990         CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER
39991         CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL CHARACT CHARG CHASTITI
39992         CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI
39993         CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR
39994         CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN
39995         COLOR COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON
39996         COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET
39997         CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT
39998         CONTACT CONTENT CONTEXT CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP
39999         CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN
40000         CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL
40001         DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD DEAL DEAR DEATH DECID DECOD DEFAULT
40002         DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL
40003         DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO
40004         DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG DISCLAIM DISCUSS DISEAS
40005         DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON
40006         DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI
40007         EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL
40008         ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP
40009         ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT
40010         EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE
40011         FACT FAIL FALS FAMILI FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT
40012         FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU
40013         FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE
40014         FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND FULL FUNCTION FUTUR GAIN GAME
40015         GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI
40016         GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG
40017         GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD
40018         HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT
40019         HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER
40020         HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD
40021         HUMAN HUNTSVIL ICON IDEA IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT
40022         IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT
40023         INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC
40024         INTERGRAPH INTERN INTERNET INTERVIEW INVENT INVOLV IRAN IRVIN ISLAM ISLAND ISN
40025         ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH
40026         JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD
40027         KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB LABEL
40028         LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV
40029         LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT
40030         LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG
40031         LONGER LOOK LOOP LOST LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN
40032         MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR
40033         MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON
40034         MEMBER MEMORI MENTION MENU MESSAG METAL METHOD METHODOLOG MICHAEL MIDDL MIGRAIN
40035         MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL
40036         MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG
40037         MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR NAZI
40038         NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW
40039         NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER
40040         OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM
40041         OMRAN OPEN OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL
40042         OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN
40043         PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD
40044         PERSIAN PERSON PETER PHONE PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL
40045         PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT
40046         POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER
40047         POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID PRESS PRETTI PREVENT PREVIOU
40048         PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM
40049         PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC
40050         PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST RADAR
40051         RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV
40052         RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL
40053         RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR
40054         RESEARCH RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN
40055         REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST
40056         RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE
40057         SCHEMAT SCHOOL SCHWARTZ SCI SCIENC SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU
40058         SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT
40059         SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME
40060         SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT SHOULDN SHOW SICK SIDE SIGN
40061         SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN
40062         SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC
40063         SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK SPOT STAI
40064         STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN
40065         STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB
40066         SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS
40067         SURGERI SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL
40068         TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL
40069         TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE
40070         THEORI THERAPI THERE THEY THINK THOMA THOUGHT THREAD THROW THU TIM TIME TIMER
40071         TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE
40072         TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE
40073         TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN UNDERSTAND UNIT UNIV
40074         UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL
40075         VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG
40076         WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK
40077         WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON
40078         WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG
40079         XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG
40080         ZIONISM ZIONIST ZUMA
40081      %mend INTINPUTS;
40082      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40083      * Clus: Inputs binarios y nominales Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs binarios y nominales Macro ;
40084      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40085      %macro NOMINPUTS;
40086      
40087      %mend NOMINPUTS;
40088      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40089      * Clus: Inputs ordinales Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs ordinales Macro ;
40090      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40091      %macro ORDINPUTS;
40092      
40093      %mend ORDINPUTS;
40094      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40095      * Clus: ejecutar procedimiento ARBOR;
MPRINT(EM_DIAGRAM):   * Clus: ejecutar procedimiento ARBOR;
40096      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

40097      proc arbor data=EMWS3.EM_Clus
40098      MAXSURRS=5
40099      ;
MPRINT(EM_DIAGRAM):    proc arbor data=EMWS3.EM_Clus MAXSURRS=5 ;
40100      ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
40101      input %INTINPUTS
MPRINT(INTINPUTS):   ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI 
ANDREW ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN ATHENA ATTACH ATTACK 
ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND 
BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL 
CHARACT CHARG CHASTITI CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN COLOR 
COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT 
CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD 
DEAL DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG 
DISCLAIM DISCUSS DISEAS DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL 
ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FACT FAIL FALS FAMILI 
FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND 
FULL FUNCTION FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD 
HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD HUMAN HUNTSVIL ICON IDEA 
IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC INTERGRAPH INTERN INTERNET INTERVIEW INVENT 
INVOLV IRAN IRVIN ISLAM ISLAND ISN ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB 
LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG LONGER LOOK LOOP LOST 
LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON MEMBER MEMORI MENTION MENU MESSAG METAL METHOD 
METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR 
NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM OMRAN OPEN 
OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PERSON PETER PHONE 
PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID 
PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST 
RADAR RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR RESEARCH 
RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE SCHEMAT SCHOOL SCHWARTZ SCI SCIENC 
SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT 
SHOULDN SHOW SICK SIDE SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK 
SPOT STAI STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS SURGERI 
SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE THEORI THERAPI THERE THEY THINK 
THOMA THOUGHT THREAD THROW THU TIM TIME TIMER TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN 
UNDERSTAND UNIT UNIV UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK 
WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG ZIONISM ZIONIST 
ZUMA
40102      / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
40103      target _SEGMENT_ / level=NOMINAL
40104      Criterion=PROBCHISQ
40105      ;
MPRINT(EM_DIAGRAM):   target _SEGMENT_ / level=NOMINAL Criterion=PROBCHISQ ;
40106      ;
MPRINT(EM_DIAGRAM):   ;
40107      Performance DISK
40108      ;
MPRINT(EM_DIAGRAM):   Performance DISK ;
40109      MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: 1473605 kilobytes of physical memory.
NOTE: Will use 3000 out of 3000 training cases.
NOTE: Using memory pool with 1191492608 bytes.
NOTE: Will not search for split on variable SUBSCRIV.
NOTE: Too few acceptable cases.
NOTE: Passed training data 18 times.
NOTE: Training used 88372864 bytes of work memory.
NOTE: The subtree sequence contains 8 subtrees. The largest has 15 nodes and 8 leaves.
NOTE: Using subtree with 13 nodes and 7 leaves.
NOTE: Created macro variable NLEAVES equal to 7.
40110      save
40111      MODEL=EMWS3.Clus_PLOTDS
40112      SEQUENCE=EMWS3.Clus_OUTSEQ
40113      IMPORTANCE=EMWS3.Clus_OUTIMPORT
40114      NODESTAT=EMWS3.Clus_OUTNODES
40115      SUMMARY=WORK.OUTSUMMARY_TREE_1EMR_5J
40116      STATSBYNODE=WORK.OUTSTATS_TREE_1EMR_5J
40117      Pathlistnonmissing = WORK.OUTPATH_TREE_1EMR_5J
40118      Rules = WORK.OUTRULES_TREE_1EMR_5J
40119      ;
MPRINT(EM_DIAGRAM):   save MODEL=EMWS3.Clus_PLOTDS SEQUENCE=EMWS3.Clus_OUTSEQ IMPORTANCE=EMWS3.Clus_OUTIMPORT NODESTAT=EMWS3.Clus_OUTNODES SUMMARY=WORK.OUTSUMMARY_TREE_1EMR_5J STATSBYNODE=WORK.OUTSTATS_TREE_1EMR_5J Pathlistnonmissing = 
WORK.OUTPATH_TREE_1EMR_5J Rules = WORK.OUTRULES_TREE_1EMR_5J ;
NOTE: The data set EMWS3.CLUS_OUTIMPORT has 1204 observations and 5 variables.
NOTE: The data set EMWS3.CLUS_PLOTDS has 9325 observations and 4 variables.
NOTE: The data set EMWS3.CLUS_OUTNODES has 13 observations and 28 variables.
NOTE: The data set WORK.OUTPATH_TREE_1EMR_5J has 75 observations and 7 variables.
NOTE: The data set WORK.OUTRULES_TREE_1EMR_5J has 251 observations and 6 variables.
NOTE: The data set EMWS3.CLUS_OUTSEQ has 8 observations and 11 variables.
NOTE: The data set WORK.OUTSTATS_TREE_1EMR_5J has 104 observations and 5 variables.
NOTE: The data set WORK.OUTSUMMARY_TREE_1EMR_5J has 28 observations and 9 variables.
40120      run;
MPRINT(EM_DIAGRAM):   run;

40121      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: There were 3000 observations read from the data set EMWS3.IDS_DATA.
NOTE: Vista EMWS3.EM_CLUS.VIEW ha utilizado (Tiempo de proceso total):
      real time           5.85 seconds
      cpu time            5.85 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.CLUS_TRAIN.
NOTE: There were 3000 observations read from the data set EMWS3.EM_CLUS.
NOTE: The data set WORK._NAMEDAT has 6 observations and 5 variables.
NOTE: PROCEDURE ARBOR ha utilizado (Tiempo de proceso total):
      real time           5.87 seconds
      cpu time            5.85 seconds
      

40122      data EMWS3.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):    data EMWS3.Clus_OUTIMPORT;
40123      set EMWS3.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTIMPORT;
40124      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
40125         "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
40126      ;
MPRINT(EM_DIAGRAM):   label NAME = "Nombre de la variable" LABEL = "Etiqueta" NRULES = "Número de reglas de división" IMPORTANCE = "Importancia" NSURROGATES = "Número de reglas sustitutas" ;
40127      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set EMWS3.CLUS_OUTIMPORT.
NOTE: The data set EMWS3.CLUS_OUTIMPORT has 1204 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

40128      filename x "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
40129      data temp;
MPRINT(EM_DIAGRAM):    data temp;
40130      length varname $11;
MPRINT(EM_DIAGRAM):   length varname $11;
40131      retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
40132      set WORK.OUTPATH_TREE_1EMR_5J;
MPRINT(EM_DIAGRAM):   set WORK.OUTPATH_TREE_1EMR_5J;
40133      if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
40134      else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
40135      output;
MPRINT(EM_DIAGRAM):   output;
40136      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 75 observations read from the data set WORK.OUTPATH_TREE_1EMR_5J.
NOTE: The data set WORK.TEMP has 75 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40137      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
40138      by node;
MPRINT(EM_DIAGRAM):   by node;
40139      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 75 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 75 observations and 8 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40140      proc sort data=EMWS3.Clus_OUTNODES out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_OUTNODES out=outnodes;
40141      by node;
MPRINT(EM_DIAGRAM):   by node;
40142      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_OUTNODES.
NOTE: The data set WORK.OUTNODES has 13 observations and 28 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40143      data temp;
MPRINT(EM_DIAGRAM):   data temp;
40144      merge temp(in=_a) outnodes(keep= node
40145      NPRIORS
40146      P__SEGMENT_4
40147      P__SEGMENT_5
40148      P__SEGMENT_1
40149      P__SEGMENT_6
40150      P__SEGMENT_2
40151      P__SEGMENT_3
40152      );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P__SEGMENT_4 P__SEGMENT_5 P__SEGMENT_1 P__SEGMENT_6 P__SEGMENT_2 P__SEGMENT_3 );
40153      by node;
MPRINT(EM_DIAGRAM):   by node;
40154      if _a;
MPRINT(EM_DIAGRAM):   if _a;
40155      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 75 observations read from the data set WORK.TEMP.
NOTE: There were 13 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 75 observations and 15 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40156      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
40157      by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
40158      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 75 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 75 observations and 15 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40159      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
40160      file x;
MPRINT(EM_DIAGRAM):   file x;
40161      set temp;
MPRINT(EM_DIAGRAM):   set temp;
40162      by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
40163      retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
40164      length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
40165      if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
40166      origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
40167      oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
40168      end;
MPRINT(EM_DIAGRAM):   end;
40169      if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
40170      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
40171      put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
40172      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
40173      end;
MPRINT(EM_DIAGRAM):   end;
40174      if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
40175      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
40176      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
40177      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
40178      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
40179      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
40180      end;
MPRINT(EM_DIAGRAM):   end;
40181      else do;
MPRINT(EM_DIAGRAM):   else do;
40182      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
40183      end;
MPRINT(EM_DIAGRAM):   end;
40184      end;
MPRINT(EM_DIAGRAM):   end;
40185      end;
MPRINT(EM_DIAGRAM):   end;
40186      else do;
MPRINT(EM_DIAGRAM):   else do;
40187      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
40188      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
40189      end;
MPRINT(EM_DIAGRAM):   end;
40190      else do;
MPRINT(EM_DIAGRAM):   else do;
40191      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
40192      end;
MPRINT(EM_DIAGRAM):   end;
40193      end;
MPRINT(EM_DIAGRAM):   end;
40194      end;
MPRINT(EM_DIAGRAM):   end;
40195      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
40196      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
40197      string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
40198      end;
MPRINT(EM_DIAGRAM):   end;
40199      else do;
MPRINT(EM_DIAGRAM):   else do;
40200      string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
40201      end;
MPRINT(EM_DIAGRAM):   end;
40202      end;
MPRINT(EM_DIAGRAM):   end;
40203      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
40204      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
40205      string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
40206      end;
MPRINT(EM_DIAGRAM):   end;
40207      else do;
MPRINT(EM_DIAGRAM):   else do;
40208      string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
40209      end;
MPRINT(EM_DIAGRAM):   end;
40210      end;
MPRINT(EM_DIAGRAM):   end;
40211      else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
40212      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
40213      string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
40214      end;
MPRINT(EM_DIAGRAM):   end;
40215      else do;
MPRINT(EM_DIAGRAM):   else do;
40216      string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
40217      end;
MPRINT(EM_DIAGRAM):   end;
40218      end;
MPRINT(EM_DIAGRAM):   end;
40219      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
40220      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
40221      end;
MPRINT(EM_DIAGRAM):   end;
40222      else do;
MPRINT(EM_DIAGRAM):   else do;
40223      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
40224      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
40225      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
40226      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
40227      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
40228      end;
MPRINT(EM_DIAGRAM):   end;
40229      end;
MPRINT(EM_DIAGRAM):   end;
40230      else do;
MPRINT(EM_DIAGRAM):   else do;
40231      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
40232      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
40233      end;
MPRINT(EM_DIAGRAM):   end;
40234      end;
MPRINT(EM_DIAGRAM):   end;
40235      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
40236      string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
40237      end;
MPRINT(EM_DIAGRAM):   end;
40238      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
40239      end;
MPRINT(EM_DIAGRAM):   end;
40240      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
40241      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
40242      end;
MPRINT(EM_DIAGRAM):   end;
40243      if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
40244      if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
40245      if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
40246      string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
40247      end;
MPRINT(EM_DIAGRAM):   end;
40248      end;
MPRINT(EM_DIAGRAM):   end;
40249      put string;
MPRINT(EM_DIAGRAM):   put string;
40250      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
40251      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
40252      end;
MPRINT(EM_DIAGRAM):   end;
40253      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
40254      put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
40255      put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
40256      put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
40257      put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
40258      put " Predicted: _SEGMENT_=5  = " P__SEGMENT_5;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=5  = " P__SEGMENT_5;
40259      put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
40260      put " Predicted: _SEGMENT_=6  = " P__SEGMENT_6;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=6  = " P__SEGMENT_6;
40261      put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
40262      put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
40263      put " ";
MPRINT(EM_DIAGRAM):   put " ";
40264      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
40265      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
40266      end;
MPRINT(EM_DIAGRAM):   end;
40267      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      40179:67    40182:66    40226:108   40227:72    
NOTE: The file X is:
      Nombre archivo=C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,
      Tamaño de archivo (bytes)=0,
      Última modificación=10 de diciembre de 2020 22H33,
      Create Time=23 de noviembre de 2020 15H57

NOTE: 118 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 75 observations read from the data set WORK.TEMP.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40268      filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
40269      /* belowtext */
40270      data templabel;
MPRINT(EM_DIAGRAM):    data templabel;
40271      set WORK.OUTRULES_TREE_1EMR_5J;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_1EMR_5J;
40272      if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
40273      rename character_value = belowtext;
MPRINT(EM_DIAGRAM):   rename character_value = belowtext;
40274      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
40275      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 251 observations read from the data set WORK.OUTRULES_TREE_1EMR_5J.
NOTE: The data set WORK.TEMPLABEL has 0 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40276      data tempvar;
MPRINT(EM_DIAGRAM):   data tempvar;
40277      set WORK.OUTRULES_TREE_1EMR_5J;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_1EMR_5J;
40278      if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
40279      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
40280      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 251 observations read from the data set WORK.OUTRULES_TREE_1EMR_5J.
NOTE: The data set WORK.TEMPVAR has 6 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40281      proc sort data=templabel;
MPRINT(EM_DIAGRAM):   proc sort data=templabel;
40282      by node;
MPRINT(EM_DIAGRAM):   by node;
40283      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK.TEMPLABEL has 0 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40284      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
40285      by node;
MPRINT(EM_DIAGRAM):   by node;
40286      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 6 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40287      data tempbelow;
MPRINT(EM_DIAGRAM):   data tempbelow;
40288      merge templabel tempvar;
MPRINT(EM_DIAGRAM):   merge templabel tempvar;
40289      by node;
MPRINT(EM_DIAGRAM):   by node;
40290      if missing(belowtext) then belowtext= character_value;
MPRINT(EM_DIAGRAM):   if missing(belowtext) then belowtext= character_value;
40291      keep node belowtext;
MPRINT(EM_DIAGRAM):   keep node belowtext;
40292      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK.TEMPLABEL.
NOTE: There were 6 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPBELOW has 6 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40293      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
40294      by node;
MPRINT(EM_DIAGRAM):   by node;
40295      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TEMPBELOW has 6 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40296      /* abovetext */
40297      data tempoutrules;
MPRINT(EM_DIAGRAM):   data tempoutrules;
40298      set WORK.OUTRULES_TREE_1EMR_5J;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_1EMR_5J;
40299      if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
MPRINT(EM_DIAGRAM):   if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
40300      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 251 observations read from the data set WORK.OUTRULES_TREE_1EMR_5J.
NOTE: The data set WORK.TEMPOUTRULES has 6 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40301      proc sort data=tempoutrules;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutrules;
40302      by node numeric_value;
MPRINT(EM_DIAGRAM):   by node numeric_value;
40303      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 6 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40304      data tempabove;
MPRINT(EM_DIAGRAM):   data tempabove;
40305      set tempoutrules(rename=(node=parent));
MPRINT(EM_DIAGRAM):   set tempoutrules(rename=(node=parent));
40306      by parent numeric_value;
MPRINT(EM_DIAGRAM):   by parent numeric_value;
40307      retain abovetext tempstring flag branch origval origchar;
MPRINT(EM_DIAGRAM):   retain abovetext tempstring flag branch origval origchar;
40308      *length abovetext tempstring origchar $45;
MPRINT(EM_DIAGRAM):   *length abovetext tempstring origchar $45;
40309      length abovetext $256;
MPRINT(EM_DIAGRAM):   length abovetext $256;
40310      length tempstring origchar $64;
MPRINT(EM_DIAGRAM):   length tempstring origchar $64;
40311      if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_DIAGRAM):   if STAT in ("INTERVAL", "ORDINAL") then do;
40312      if first.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent then do;
40313      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
40314      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
40315      abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(NUMERIC_VALUE);
40316      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
40317      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
40318      output;
MPRINT(EM_DIAGRAM):   output;
40319      end;
MPRINT(EM_DIAGRAM):   end;
40320      else do;
MPRINT(EM_DIAGRAM):   else do;
40321      abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(CHARACTER_VALUE);
40322      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
40323      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
40324      output;
MPRINT(EM_DIAGRAM):   output;
40325      end;
MPRINT(EM_DIAGRAM):   end;
40326      if first.parent AND last.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent AND last.parent then do;
40327      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
40328      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
40329      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
40330      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
40331      output;
MPRINT(EM_DIAGRAM):   output;
40332      end;
MPRINT(EM_DIAGRAM):   end;
40333      else do;
MPRINT(EM_DIAGRAM):   else do;
40334      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
40335      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
40336      output;
MPRINT(EM_DIAGRAM):   output;
40337      end;
MPRINT(EM_DIAGRAM):   end;
40338      end;
MPRINT(EM_DIAGRAM):   end;
40339      end;
MPRINT(EM_DIAGRAM):   end;
40340      else if last.parent then do;
MPRINT(EM_DIAGRAM):   else if last.parent then do;
40341      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
40342      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
40343      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
40344      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
40345      end;
MPRINT(EM_DIAGRAM):   end;
40346      else do;
MPRINT(EM_DIAGRAM):   else do;
40347      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
40348      end;
MPRINT(EM_DIAGRAM):   end;
40349      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
40350      output;
MPRINT(EM_DIAGRAM):   output;
40351      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
40352      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
40353      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
40354      end;
MPRINT(EM_DIAGRAM):   end;
40355      else do;
MPRINT(EM_DIAGRAM):   else do;
40356      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
40357      end;
MPRINT(EM_DIAGRAM):   end;
40358      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
40359      output;
MPRINT(EM_DIAGRAM):   output;
40360      end;
MPRINT(EM_DIAGRAM):   end;
40361      else do;
MPRINT(EM_DIAGRAM):   else do;
40362      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
40363      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
40364      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
40365      end;
MPRINT(EM_DIAGRAM):   end;
40366      else do;
MPRINT(EM_DIAGRAM):   else do;
40367      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
40368      end;
MPRINT(EM_DIAGRAM):   end;
40369      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
40370      output;
MPRINT(EM_DIAGRAM):   output;
40371      end;
MPRINT(EM_DIAGRAM):   end;
40372      end;
MPRINT(EM_DIAGRAM):   end;
40373      else do;
MPRINT(EM_DIAGRAM):   else do;
40374      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
40375      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
40376      numeric_value = round(numeric_value,0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value,0.0001);
40377      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
40378      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
40379      end;
MPRINT(EM_DIAGRAM):   end;
40380      else do;
MPRINT(EM_DIAGRAM):   else do;
40381      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
40382      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
40383      end;
MPRINT(EM_DIAGRAM):   end;
40384      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
40385      output;
MPRINT(EM_DIAGRAM):   output;
40386      end;
MPRINT(EM_DIAGRAM):   end;
40387      else do;
MPRINT(EM_DIAGRAM):   else do;
40388      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
40389      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
40390      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
40391      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
40392      end;
MPRINT(EM_DIAGRAM):   end;
40393      else do;
MPRINT(EM_DIAGRAM):   else do;
40394      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
40395      origval = character_value;
MPRINT(EM_DIAGRAM):   origval = character_value;
40396      end;
MPRINT(EM_DIAGRAM):   end;
40397      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
40398      output;
MPRINT(EM_DIAGRAM):   output;
40399      end;
MPRINT(EM_DIAGRAM):   end;
40400      end;
MPRINT(EM_DIAGRAM):   end;
40401      end;
MPRINT(EM_DIAGRAM):   end;
40402      else do;
MPRINT(EM_DIAGRAM):   else do;
40403      if first.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value then do;
40404      flag = 0;
MPRINT(EM_DIAGRAM):   flag = 0;
40405      abovetext = CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   abovetext = CHARACTER_VALUE;
40406      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
40407      if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value AND last.numeric_value then do;
40408      output;
MPRINT(EM_DIAGRAM):   output;
40409      end;
MPRINT(EM_DIAGRAM):   end;
40410      end;
MPRINT(EM_DIAGRAM):   end;
40411      else if last.numeric_value then do;
MPRINT(EM_DIAGRAM):   else if last.numeric_value then do;
40412      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
40413      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
40414      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
40415      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
40416      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
40417      end;
MPRINT(EM_DIAGRAM):   end;
40418      else do;
MPRINT(EM_DIAGRAM):   else do;
40419      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
40420      flag = 1;
MPRINT(EM_DIAGRAM):   flag = 1;
40421      end;
MPRINT(EM_DIAGRAM):   end;
40422      end;
MPRINT(EM_DIAGRAM):   end;
40423      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
40424      output;
MPRINT(EM_DIAGRAM):   output;
40425      end;
MPRINT(EM_DIAGRAM):   end;
40426      else do;
MPRINT(EM_DIAGRAM):   else do;
40427      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
40428      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
40429      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
40430      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
40431      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
40432      end;
MPRINT(EM_DIAGRAM):   end;
40433      else do;
MPRINT(EM_DIAGRAM):   else do;
40434      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
40435      flag=1;
MPRINT(EM_DIAGRAM):   flag=1;
40436      end;
MPRINT(EM_DIAGRAM):   end;
40437      end;
MPRINT(EM_DIAGRAM):   end;
40438      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
40439      end;
MPRINT(EM_DIAGRAM):   end;
40440      end;
MPRINT(EM_DIAGRAM):   end;
40441      keep parent branch abovetext;
MPRINT(EM_DIAGRAM):   keep parent branch abovetext;
40442      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      40315:25   40330:26   40344:24   40344:47   40353:26   40364:26   40377:24   40377:47   40390:26   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      40395:11   
NOTE: There were 6 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPABOVE has 12 observations and 3 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

40443      /* MIssing value to abovetext */
40444      data tempmissing;
MPRINT(EM_DIAGRAM):   data tempmissing;
40445      set WORK.OUTRULES_TREE_1EMR_5J;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_1EMR_5J;
40446      if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
40447      rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_DIAGRAM):   rename node=parent numeric_value=branch character_value=misschar;
40448      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 251 observations read from the data set WORK.OUTRULES_TREE_1EMR_5J.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40449      proc sort data=work.tempabove;
MPRINT(EM_DIAGRAM):   proc sort data=work.tempabove;
40450      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
40451      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set WORK.TEMPABOVE.
NOTE: The data set WORK.TEMPABOVE has 12 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40452      proc sort data=EMWS3.Clus_OUTNODES out=tempoutnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_OUTNODES out=tempoutnodes;
40453      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
40454      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 13 observations and 28 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40455      proc sort data=tempmissing;
MPRINT(EM_DIAGRAM):   proc sort data=tempmissing;
40456      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
40457      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 6 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40458      data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
40459      merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
MPRINT(EM_DIAGRAM):   merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
40460      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
40461      length traintotal validtotal 8;
MPRINT(EM_DIAGRAM):   length traintotal validtotal 8;
40462      retain traintotal validtotal;
MPRINT(EM_DIAGRAM):   retain traintotal validtotal;
40463      if _a then do;
MPRINT(EM_DIAGRAM):   if _a then do;
40464      if ^MISSING(abovetext) then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(abovetext) then do;
40465      abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext= strip(abovetext)||" Falta Or";
40466      end;
MPRINT(EM_DIAGRAM):   end;
40467      else do;
MPRINT(EM_DIAGRAM):   else do;
40468      abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext = " Sólo valores ausentes";
40469      end;
MPRINT(EM_DIAGRAM):   end;
40470      end;
MPRINT(EM_DIAGRAM):   end;
40471      if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   if MISSING(abovetext) then abovetext="Valores no ausentes";
40472      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
40473      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
40474      validtotal=VN;
MPRINT(EM_DIAGRAM):   validtotal=VN;
40475      end;
MPRINT(EM_DIAGRAM):   end;
40476      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Total de entrenamiento";
40477      drop role rank stat misschar belowtext;
MPRINT(EM_DIAGRAM):   drop role rank stat misschar belowtext;
40478      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable VN is uninitialized.
NOTE: There were 12 observations read from the data set WORK.TEMPABOVE.
NOTE: There were 13 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 30 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

40479      proc sort data=WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_outnodes;
40480      by node;
MPRINT(EM_DIAGRAM):   by node;
40481      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 30 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40482      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
40483      by node;
MPRINT(EM_DIAGRAM):   by node;
40484      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40485      data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
40486      merge WORK.Clus_outnodes tempbelow;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_outnodes tempbelow;
40487      by node;
MPRINT(EM_DIAGRAM):   by node;
40488      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: There were 6 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.CLUS_OUTNODES has 13 observations and 31 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: There were 3000 observations read from the data set EMWS3.IDS_DATA.
NOTE: Vista EMWS3.EM_CLUS.VIEW ha utilizado (Tiempo de proceso total):
      real time           1.80 seconds
      cpu time            1.79 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.CLUS_TRAIN.
40489      data tempoutstats;
MPRINT(EM_DIAGRAM):    data tempoutstats;
40490      set WORK.OUTSTATS_TREE_1EMR_5J;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_1EMR_5J;
40491      length tarlevel $8;
MPRINT(EM_DIAGRAM):   length tarlevel $8;
40492      tarlevel ="NOMINAL";
MPRINT(EM_DIAGRAM):   tarlevel ="NOMINAL";
40493      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 104 observations read from the data set WORK.OUTSTATS_TREE_1EMR_5J.
NOTE: The data set WORK.TEMPOUTSTATS has 104 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40494      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS3.Clus_TREE_PLOT;
40495      length NODETEXT TEXTALL $800 N NODECOLOR 8;
MPRINT(EM_DIAGRAM):   length NODETEXT TEXTALL $800 N NODECOLOR 8;
40496      set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
40497      label parent = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentID_vlabel, noquote))" depth = "%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, noquote))" belowtext= "%sysfunc(sasmsg(sashelp.dmine, rpt_belowtext_vlabel, noquote))" abovetext =
40498         "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))" linkwidth = "%sysfunc(sasmsg(sashelp.dmine, rpt_linkwidth_vlabel, noquote))" nodetext = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodetext_vlabel, noquote))" textall =
40499         "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))" N = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainn_vlabel, noquote))" nodecolor = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))" node =
40500         "%sysfunc(sasmsg(sashelp.dmine, rpt_node_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label parent = "Id padre" depth = "Profundidad" belowtext= "Por debajo del texto" abovetext = "Por encima del texto" linkwidth = "Anchura del enlace" nodetext = "Texto del nodo" textall = "Todo el texto" N = "Entrenar: número de 
observaciones" nodecolor = "Color del nodo" node = "Nodo";
40501      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
40502      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable TEXTALL is uninitialized.
NOTE: Variable NODECOLOR is uninitialized.
NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

40503      proc sort data=EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_TREE_PLOT;
40504      by node;
MPRINT(EM_DIAGRAM):   by node;
40505      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 10 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40506      proc sort data=tempoutstats;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutstats;
40507      by node;
MPRINT(EM_DIAGRAM):   by node;
40508      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 104 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 104 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40509      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS3.Clus_TREE_PLOT;
40510      merge EMWS3.Clus_TREE_PLOT tempoutstats;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_TREE_PLOT tempoutstats;
40511      length text $800 _RASE_ P__SEGMENT_4 8;
MPRINT(EM_DIAGRAM):   length text $800 _RASE_ P__SEGMENT_4 8;
40512      retain P__SEGMENT_4 eventlevel;
MPRINT(EM_DIAGRAM):   retain P__SEGMENT_4 eventlevel;
40513      by node;
MPRINT(EM_DIAGRAM):   by node;
40514      if statname='N' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='N' then N=statvalue;
40515      if statname='NPRIORS' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='NPRIORS' then N=statvalue;
40516      if statname='PREDICTION' then eventlevel=category;
MPRINT(EM_DIAGRAM):   if statname='PREDICTION' then eventlevel=category;
40517      _RASE_ = .;
MPRINT(EM_DIAGRAM):   _RASE_ = .;
40518      if tarlevel ^= 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^= 'INTERVAL' then do;
40519      if STATNAME = 'PROBABILITY' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PROBABILITY' then do;
40520      if CATEGORY=EVENTLEVEL then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL then do;
40521      nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
40522      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
40523      P__SEGMENT_4 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   P__SEGMENT_4 = round(STATVALUE, .01);
40524      end;
MPRINT(EM_DIAGRAM):   end;
40525      else do;
MPRINT(EM_DIAGRAM):   else do;
40526      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
40527      end;
MPRINT(EM_DIAGRAM):   end;
40528      textall = strip(textall)||'0A'x||strip( text);
MPRINT(EM_DIAGRAM):   textall = strip(textall)||'0A'x||strip( text);
40529      end;
MPRINT(EM_DIAGRAM):   end;
40530      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
40531      nodetext = trim(nodetext)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||" Número:"|| put(N, 13.);
40532      textall = trim(textall)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||" Número:"|| put(N, 13.);
40533      output EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS3.Clus_TREE_PLOT;
40534      end;
MPRINT(EM_DIAGRAM):   end;
40535      end;
MPRINT(EM_DIAGRAM):   end;
40536      else do;
MPRINT(EM_DIAGRAM):   else do;
40537      if statname='RASE' then _RASE_=statvalue;
MPRINT(EM_DIAGRAM):   if statname='RASE' then _RASE_=statvalue;
40538      label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Entrenar: error cuadrado del promedio de la raíz";
40539      if STATNAME = 'PREDICTION' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PREDICTION' then do;
40540      nodetext= "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"|| put(STATVALUE, 13.4)||'0A'x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext= "Promedio"|| put(STATVALUE, 13.4)||'0A'x|| "Número:"|| put(N, 13.);
40541      textall = nodetext;
MPRINT(EM_DIAGRAM):   textall = nodetext;
40542      P__SEGMENT_4 = STATVALUE;
MPRINT(EM_DIAGRAM):   P__SEGMENT_4 = STATVALUE;
40543      ;
MPRINT(EM_DIAGRAM):   ;
40544      ;
MPRINT(EM_DIAGRAM):   ;
40545      end;
MPRINT(EM_DIAGRAM):   end;
40546      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
40547      output EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS3.Clus_TREE_PLOT;
40548      end;
MPRINT(EM_DIAGRAM):   end;
40549      ;
MPRINT(EM_DIAGRAM):   ;
40550      end;
MPRINT(EM_DIAGRAM):   end;
40551      label P__SEGMENT_4 = "%sysfunc(sasmsg(sashelp.dmine, rpt_predictedvar_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label P__SEGMENT_4 = "Variable predicha";
40552      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_4;
40553      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: There were 104 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 12 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

40554      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
40555      set WORK.OUTSTATS_TREE_1EMR_5J;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_1EMR_5J;
40556      retain eventlevel;
MPRINT(EM_DIAGRAM):   retain eventlevel;
40557      if STATNAME='PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' then eventlevel=CATEGORY;
40558      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 104 observations read from the data set WORK.OUTSTATS_TREE_1EMR_5J.
NOTE: The data set WORK.TEMPCOLOR has 104 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40559      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
40560      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
40561      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
40562      if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
40563      end;
MPRINT(EM_DIAGRAM):   end;
40564      else do;
MPRINT(EM_DIAGRAM):   else do;
40565      if STATNAME="PREDICTION";
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION";
40566      end;
MPRINT(EM_DIAGRAM):   end;
40567      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 104 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40568      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
40569      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
40570      length nodecolor 8;
MPRINT(EM_DIAGRAM):   length nodecolor 8;
40571      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
40572      nodecolor = round(100*(STATVALUE), .01);
MPRINT(EM_DIAGRAM):   nodecolor = round(100*(STATVALUE), .01);
40573      end;
MPRINT(EM_DIAGRAM):   end;
40574      else do;
MPRINT(EM_DIAGRAM):   else do;
40575      nodecolor=round(statvalue, .01);
MPRINT(EM_DIAGRAM):   nodecolor=round(statvalue, .01);
40576      end;
MPRINT(EM_DIAGRAM):   end;
40577      keep node nodecolor;
MPRINT(EM_DIAGRAM):   keep node nodecolor;
40578      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40579      proc sort data=EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_TREE_PLOT;
40580      by node;
MPRINT(EM_DIAGRAM):   by node;
40581      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 12 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40582      proc sort data=tempcolor;
MPRINT(EM_DIAGRAM):   proc sort data=tempcolor;
40583      by node;
MPRINT(EM_DIAGRAM):   by node;
40584      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 13 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40585      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_TREE_PLOT;
40586      merge EMWS3.Clus_TREE_PLOT tempcolor;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_TREE_PLOT tempcolor;
40587      by node;
MPRINT(EM_DIAGRAM):   by node;
40588      length traintotal 8;
MPRINT(EM_DIAGRAM):   length traintotal 8;
40589      retain traintotal;
MPRINT(EM_DIAGRAM):   retain traintotal;
40590      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Total de entrenamiento";
40591      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
40592      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
40593      end;
MPRINT(EM_DIAGRAM):   end;
40594      if NODE eq . then delete;
MPRINT(EM_DIAGRAM):   if NODE eq . then delete;
40595      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: There were 13 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 13 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

40596      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_TREE_PLOT;
40597      set EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_TREE_PLOT;
40598      textall = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote, )):"|| put(Node, 13.)||'0A'x||trim(textall);
MPRINT(EM_DIAGRAM):   textall = "Id de nodo:"|| put(Node, 13.)||'0A'x||trim(textall);
40599      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 13 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

40600      data tempout;
MPRINT(EM_DIAGRAM):   data tempout;
40601      set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
40602      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set WORK.TEMPOUT has 13 observations and 31 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40603      proc sort data=tempout;
MPRINT(EM_DIAGRAM):   proc sort data=tempout;
40604      by descending P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   by descending P__SEGMENT_4;
40605      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TEMPOUT has 13 observations and 31 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40606      data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
40607      set tempout;
MPRINT(EM_DIAGRAM):   set tempout;
40608      if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
40609      label index="%sysfunc(sasmsg(sashelp.dmine, rpt_leafindex_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label index= "Índice de hoja";
40610      label percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_train = "Casos de porcentaje";
40611      label perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_train = "Porcentaje de evento";
40612      label tprob="%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel  , NOQUOTE, %nrbquote()))";
MPRINT(EM_DIAGRAM):   label tprob= "Porcentaje de entrenamiento ";
40613      tprob = round(P__SEGMENT_4, .01);
MPRINT(EM_DIAGRAM):   tprob = round(P__SEGMENT_4, .01);
40614      percevent_train = round ( tprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_train = round ( tprob*100, .01);
40615      *perc_train =round( ( N / traintotal)*100, .001);
MPRINT(EM_DIAGRAM):   *perc_train =round( ( N / traintotal)*100, .001);
40616      perc_train =round( ( N / traintotal), .01);
MPRINT(EM_DIAGRAM):   perc_train =round( ( N / traintotal), .01);
40617      if missing(perc_train) then perc_train = round( linkwidth*100, .001);
MPRINT(EM_DIAGRAM):   if missing(perc_train) then perc_train = round( linkwidth*100, .001);
40618      index = _n_;
MPRINT(EM_DIAGRAM):   index = _n_;
40619      keep NODE index tprob perc_train percevent_train
40620      ;
MPRINT(EM_DIAGRAM):   keep NODE index tprob perc_train percevent_train ;
40621      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TREE_TEMP has 7 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

40622      proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):   proc sort data=tree_temp;
40623      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
40624      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 7 observations and 5 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40625      proc sort data=EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_TREE_PLOT;
40626      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
40627      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 13 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40628      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_TREE_PLOT;
40629      merge EMWS3.Clus_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_TREE_PLOT tree_temp;
40630      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
40631      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: There were 7 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 17 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40632      proc sort data=EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_TREE_PLOT;
40633      by node index;
MPRINT(EM_DIAGRAM):   by node index;
40634      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 13 observations and 17 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40635      title9 ' ';
MPRINT(EM_DIAGRAM):    title9 ' ';
40636      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_VariableImportance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Importancia de la variable";
40637      proc print data=EMWS3.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS3.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
40638      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS3.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40639      title10;
MPRINT(EM_DIAGRAM):   title10;
40640      data WORK.M1L4IL7U;
MPRINT(EM_DIAGRAM):    data WORK.M1L4IL7U;
40641      set WORK.M1L4IL7U;
MPRINT(EM_DIAGRAM):   set WORK.M1L4IL7U;
40642      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
40643      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1205 observations read from the data set WORK.M1L4IL7U.
NOTE: The data set WORK.M1L4IL7U has 1205 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40644      proc sort data=EMWS3.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
40645      where IMPORTANCE>0;
MPRINT(EM_DIAGRAM):   where IMPORTANCE>0;
40646      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
40647      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set EMWS3.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The data set WORK.CLUS_GRAPHVARS has 33 observations and 1 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40648      proc sort data = WORK.M1L4IL7U;
MPRINT(EM_DIAGRAM):   proc sort data = WORK.M1L4IL7U;
40649      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
40650      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1205 observations read from the data set WORK.M1L4IL7U.
NOTE: The data set WORK.M1L4IL7U has 1205 observations and 21 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40651      data WORK.M1L4IL7U;
MPRINT(EM_DIAGRAM):   data WORK.M1L4IL7U;
40652      merge WORK.M1L4IL7U WORK.Clus_GRAPHVARS(in=_b_);
MPRINT(EM_DIAGRAM):   merge WORK.M1L4IL7U WORK.Clus_GRAPHVARS(in=_b_);
40653      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
40654      if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
MPRINT(EM_DIAGRAM):   if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
40655      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1205 observations read from the data set WORK.M1L4IL7U.
NOTE: There were 33 observations read from the data set WORK.CLUS_GRAPHVARS.
NOTE: The data set WORK.M1L4IL7U has 33 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

40656      data WORK.M1L4IL7U;
MPRINT(EM_DIAGRAM):    data WORK.M1L4IL7U;
40657      set WORK.M1L4IL7U end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M1L4IL7U end=_eof_ nobs=_nobs_;
40658      output;
MPRINT(EM_DIAGRAM):   output;
40659      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
40660      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
40661      ROLE = 'BY';
MPRINT(EM_DIAGRAM):   ROLE = 'BY';
40662      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
40663      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
40664      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
40665      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
40666      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
40667      output;
MPRINT(EM_DIAGRAM):   output;
40668      end;
MPRINT(EM_DIAGRAM):   end;
40669      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set WORK.M1L4IL7U.
NOTE: The data set WORK.M1L4IL7U has 34 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40670      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
40671      * Clus: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus: STDIZE Variables Macro ;
40672      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
40673      %macro stdizevar;
40674          ANTI ARGIC ARMENIAN BIRTHDAI BRAD BUSH CARTER CHASTITI CIVILIAN EXTERMIN
40675         GENOCID GORDON HAMID HAPPI HERNLEM HEZBOLLAH INTELLECT ISRAEL JAKE JIMMI
40676         LEBANES LEBANON LIVNI OCCUPI REDUND SERA SERDAR SHAME SHNEKENDORF SKEPTIC
40677         SOVIET SURREND ZUMA
40678      %mend stdizevar;
40679      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40680      * Clus: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Clus: Computing Summary Statistics;
40681      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40682      proc stdize
40683      data = EMWS3.Clus_TRAIN
40684      out=_null_
40685      outstat=WORK.Clus_STAT
40686      add=0 fuzz=1E-14 initial=MAD
40687      vardef=df
40688      method=STD
40689      mult=1
40690      pctlmtd=ORD_STAT pctldef=2
40691      pctlpts=(
40692      0
40693      100
40694      )
40695      ;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS3.Clus_TRAIN out=_null_ outstat=WORK.Clus_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 100 ) ;
MPRINT(EM_DIAGRAM):   var
40696      var %stdizevar;
MPRINT(STDIZEVAR):   ANTI ARGIC ARMENIAN BIRTHDAI BRAD BUSH CARTER CHASTITI CIVILIAN EXTERMIN GENOCID GORDON HAMID HAPPI HERNLEM HEZBOLLAH INTELLECT ISRAEL JAKE JIMMI LEBANES LEBANON LIVNI OCCUPI REDUND SERA SERDAR SHAME SHNEKENDORF SKEPTIC SOVIET SURREND 
ZUMA
MPRINT(EM_DIAGRAM):  ;
40697      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: INITIAL= will be ignored.
NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: Vista EMWS3.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           1.68 seconds
      cpu time            1.68 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.IDS_DATA.
NOTE: There were 3000 observations read from the data set EMWS3.CLUS_TRAIN.
NOTE: The data set WORK.CLUS_STAT has 10 observations and 34 variables.
NOTE: PROCEDURE STDIZE ha utilizado (Tiempo de proceso total):
      real time           1.70 seconds
      cpu time            1.70 seconds
      

MPRINT(EM_DIAGRAM):   quit;
40698      quit;

40699      data WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):    data WORK.Clus_MINMAX;
40700      set WORK.Clus_STAT;
MPRINT(EM_DIAGRAM):   set WORK.Clus_STAT;
40701      where _TYPE_ in('P0','P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('P0','P100');
40702      if _TYPE_='P0' then _TYPE_='MIN';
MPRINT(EM_DIAGRAM):   if _TYPE_='P0' then _TYPE_='MIN';
40703      else if _TYPE_='P100' then _TYPE_='MAX';
MPRINT(EM_DIAGRAM):   else if _TYPE_='P100' then _TYPE_='MAX';
40704      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set WORK.CLUS_STAT.
      WHERE _TYPE_ in ('P0', 'P100');
NOTE: The data set WORK.CLUS_MINMAX has 2 observations and 34 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40705      proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
40706      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
40707      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set WORK.CLUS_MINMAX.
NOTE: The data set WORK.CLUS_MINMAX has 33 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40708      data WORK.Clus_UGRID;
MPRINT(EM_DIAGRAM):    data WORK.Clus_UGRID;
40709      set WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):   set WORK.Clus_MINMAX;
40710      B1 = MIN + (1-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B1 = MIN + (1-1)*(MAX-MIN)/8;
40711      B2 = MIN + (2-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B2 = MIN + (2-1)*(MAX-MIN)/8;
40712      B3 = MIN + (3-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B3 = MIN + (3-1)*(MAX-MIN)/8;
40713      B4 = MIN + (4-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B4 = MIN + (4-1)*(MAX-MIN)/8;
40714      B5 = MIN + (5-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B5 = MIN + (5-1)*(MAX-MIN)/8;
40715      B6 = MIN + (6-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B6 = MIN + (6-1)*(MAX-MIN)/8;
40716      B7 = MIN + (7-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B7 = MIN + (7-1)*(MAX-MIN)/8;
40717      B8 = MIN + (8-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B8 = MIN + (8-1)*(MAX-MIN)/8;
40718      B9 = MIN + (9-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B9 = MIN + (9-1)*(MAX-MIN)/8;
40719      drop MIN MAX;
MPRINT(EM_DIAGRAM):   drop MIN MAX;
40720      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 33 observations read from the data set WORK.CLUS_MINMAX.
NOTE: The data set WORK.CLUS_UGRID has 33 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40721      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
40722      * Clus: creando formatos para las variables de intervalo de agrupamiento;
MPRINT(EM_DIAGRAM):   * Clus: creando formatos para las variables de intervalo de agrupamiento;
40723      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40724      proc format;
MPRINT(EM_DIAGRAM):   proc format;
40725      value F1_
40726      0-0.02399943263111 = "0:0.024"
40727      0.02399943263111-0.04799886526222 = "0.024:0.048"
40728      0.04799886526222-0.07199829789333 = "0.048:0.072"
40729      0.07199829789333-0.09599773052444 = "0.072:0.096"
40730      0.09599773052444-0.11999716315555 = "0.096:0.12"
40731      0.11999716315555-0.14399659578666 = "0.12:0.144"
40732      0.14399659578666-0.16799602841777 = "0.144:0.168"
40733      0.16799602841777-0.19199546104889 = "0.168:0.192"
40734      ;
MPRINT(EM_DIAGRAM):   value F1_ 0-0.02399943263111 = "0:0.024" 0.02399943263111-0.04799886526222 = "0.024:0.048" 0.04799886526222-0.07199829789333 = "0.048:0.072" 0.07199829789333-0.09599773052444 = "0.072:0.096" 0.09599773052444-0.11999716315555 = 
"0.096:0.12" 0.11999716315555-0.14399659578666 = "0.12:0.144" 0.14399659578666-0.16799602841777 = "0.144:0.168" 0.16799602841777-0.19199546104889 = "0.168:0.192" ;
NOTE: Format F1_ has been output.
40735      value F2_
40736      0-0.0406252412429 = "0:0.0406"
40737      0.0406252412429-0.08125048248581 = "0.0406:0.0813"
40738      0.08125048248581-0.12187572372871 = "0.0813:0.1219"
40739      0.12187572372871-0.16250096497162 = "0.1219:0.1625"
40740      0.16250096497162-0.20312620621452 = "0.1625:0.2031"
40741      0.20312620621452-0.24375144745743 = "0.2031:0.2438"
40742      0.24375144745743-0.28437668870033 = "0.2438:0.2844"
40743      0.28437668870033-0.32500192994324 = "0.2844:0.325"
40744      ;
MPRINT(EM_DIAGRAM):   value F2_ 0-0.0406252412429 = "0:0.0406" 0.0406252412429-0.08125048248581 = "0.0406:0.0813" 0.08125048248581-0.12187572372871 = "0.0813:0.1219" 0.12187572372871-0.16250096497162 = "0.1219:0.1625" 0.16250096497162-0.20312620621452 = 
"0.1625:0.2031" 0.20312620621452-0.24375144745743 = "0.2031:0.2438" 0.24375144745743-0.28437668870033 = "0.2438:0.2844" 0.28437668870033-0.32500192994324 = "0.2844:0.325" ;
NOTE: Format F2_ has been output.
40745      value F3_
40746      0-0.02948806596317 = "0:0.0295"
40747      0.02948806596317-0.05897613192634 = "0.0295:0.059"
40748      0.05897613192634-0.08846419788951 = "0.059:0.0885"
40749      0.08846419788951-0.11795226385268 = "0.0885:0.118"
40750      0.11795226385268-0.14744032981586 = "0.118:0.1474"
40751      0.14744032981586-0.17692839577903 = "0.1474:0.1769"
40752      0.17692839577903-0.2064164617422 = "0.1769:0.2064"
40753      0.2064164617422-0.23590452770537 = "0.2064:0.2359"
40754      ;
MPRINT(EM_DIAGRAM):   value F3_ 0-0.02948806596317 = "0:0.0295" 0.02948806596317-0.05897613192634 = "0.0295:0.059" 0.05897613192634-0.08846419788951 = "0.059:0.0885" 0.08846419788951-0.11795226385268 = "0.0885:0.118" 0.11795226385268-0.14744032981586 = 
"0.118:0.1474" 0.14744032981586-0.17692839577903 = "0.1474:0.1769" 0.17692839577903-0.2064164617422 = "0.1769:0.2064" 0.2064164617422-0.23590452770537 = "0.2064:0.2359" ;
NOTE: Format F3_ has been output.
40755      value F4_
40756      0-0.09069030350314 = "0:0.0907"
40757      0.09069030350314-0.18138060700629 = "0.0907:0.1814"
40758      0.18138060700629-0.27207091050943 = "0.1814:0.2721"
40759      0.27207091050943-0.36276121401258 = "0.2721:0.3628"
40760      0.36276121401258-0.45345151751572 = "0.3628:0.4535"
40761      0.45345151751572-0.54414182101887 = "0.4535:0.5441"
40762      0.54414182101887-0.63483212452201 = "0.5441:0.6348"
40763      0.63483212452201-0.72552242802516 = "0.6348:0.7255"
40764      ;
MPRINT(EM_DIAGRAM):   value F4_ 0-0.09069030350314 = "0:0.0907" 0.09069030350314-0.18138060700629 = "0.0907:0.1814" 0.18138060700629-0.27207091050943 = "0.1814:0.2721" 0.27207091050943-0.36276121401258 = "0.2721:0.3628" 0.36276121401258-0.45345151751572 = 
"0.3628:0.4535" 0.45345151751572-0.54414182101887 = "0.4535:0.5441" 0.54414182101887-0.63483212452201 = "0.5441:0.6348" 0.63483212452201-0.72552242802516 = "0.6348:0.7255" ;
NOTE: Format F4_ has been output.
40765      value F5_
40766      0-0.04824053922678 = "0:0.0482"
40767      0.04824053922678-0.09648107845356 = "0.0482:0.0965"
40768      0.09648107845356-0.14472161768034 = "0.0965:0.1447"
40769      0.14472161768034-0.19296215690712 = "0.1447:0.193"
40770      0.19296215690712-0.2412026961339 = "0.193:0.2412"
40771      0.2412026961339-0.28944323536068 = "0.2412:0.2894"
40772      0.28944323536068-0.33768377458746 = "0.2894:0.3377"
40773      0.33768377458746-0.38592431381424 = "0.3377:0.3859"
40774      ;
MPRINT(EM_DIAGRAM):   value F5_ 0-0.04824053922678 = "0:0.0482" 0.04824053922678-0.09648107845356 = "0.0482:0.0965" 0.09648107845356-0.14472161768034 = "0.0965:0.1447" 0.14472161768034-0.19296215690712 = "0.1447:0.193" 0.19296215690712-0.2412026961339 = 
"0.193:0.2412" 0.2412026961339-0.28944323536068 = "0.2412:0.2894" 0.28944323536068-0.33768377458746 = "0.2894:0.3377" 0.33768377458746-0.38592431381424 = "0.3377:0.3859" ;
NOTE: Format F5_ has been output.
40775      value F6_
40776      0-0.01968434885683 = "0:0.0197"
40777      0.01968434885683-0.03936869771367 = "0.0197:0.0394"
40778      0.03936869771367-0.05905304657051 = "0.0394:0.0591"
40779      0.05905304657051-0.07873739542734 = "0.0591:0.0787"
40780      0.07873739542734-0.09842174428418 = "0.0787:0.0984"
40781      0.09842174428418-0.11810609314102 = "0.0984:0.1181"
40782      0.11810609314102-0.13779044199785 = "0.1181:0.1378"
40783      0.13779044199785-0.15747479085469 = "0.1378:0.1575"
40784      ;
MPRINT(EM_DIAGRAM):   value F6_ 0-0.01968434885683 = "0:0.0197" 0.01968434885683-0.03936869771367 = "0.0197:0.0394" 0.03936869771367-0.05905304657051 = "0.0394:0.0591" 0.05905304657051-0.07873739542734 = "0.0591:0.0787" 0.07873739542734-0.09842174428418 = 
"0.0787:0.0984" 0.09842174428418-0.11810609314102 = "0.0984:0.1181" 0.11810609314102-0.13779044199785 = "0.1181:0.1378" 0.13779044199785-0.15747479085469 = "0.1378:0.1575" ;
NOTE: Format F6_ has been output.
40785      value F7_
40786      0-0.02764594358968 = "0:0.0276"
40787      0.02764594358968-0.05529188717937 = "0.0276:0.0553"
40788      0.05529188717937-0.08293783076906 = "0.0553:0.0829"
40789      0.08293783076906-0.11058377435875 = "0.0829:0.1106"
40790      0.11058377435875-0.13822971794844 = "0.1106:0.1382"
40791      0.13822971794844-0.16587566153812 = "0.1382:0.1659"
40792      0.16587566153812-0.19352160512781 = "0.1659:0.1935"
40793      0.19352160512781-0.2211675487175 = "0.1935:0.2212"
40794      ;
MPRINT(EM_DIAGRAM):   value F7_ 0-0.02764594358968 = "0:0.0276" 0.02764594358968-0.05529188717937 = "0.0276:0.0553" 0.05529188717937-0.08293783076906 = "0.0553:0.0829" 0.08293783076906-0.11058377435875 = "0.0829:0.1106" 0.11058377435875-0.13822971794844 = 
"0.1106:0.1382" 0.13822971794844-0.16587566153812 = "0.1382:0.1659" 0.16587566153812-0.19352160512781 = "0.1659:0.1935" 0.19352160512781-0.2211675487175 = "0.1935:0.2212" ;
NOTE: Format F7_ has been output.
40795      value F8_
40796      0-0.01410905630069 = "0:0.0141"
40797      0.01410905630069-0.02821811260138 = "0.0141:0.0282"
40798      0.02821811260138-0.04232716890208 = "0.0282:0.0423"
40799      0.04232716890208-0.05643622520277 = "0.0423:0.0564"
40800      0.05643622520277-0.07054528150347 = "0.0564:0.0705"
40801      0.07054528150347-0.08465433780416 = "0.0705:0.0847"
40802      0.08465433780416-0.09876339410486 = "0.0847:0.0988"
40803      0.09876339410486-0.11287245040555 = "0.0988:0.1129"
40804      ;
MPRINT(EM_DIAGRAM):   value F8_ 0-0.01410905630069 = "0:0.0141" 0.01410905630069-0.02821811260138 = "0.0141:0.0282" 0.02821811260138-0.04232716890208 = "0.0282:0.0423" 0.04232716890208-0.05643622520277 = "0.0423:0.0564" 0.05643622520277-0.07054528150347 = 
"0.0564:0.0705" 0.07054528150347-0.08465433780416 = "0.0705:0.0847" 0.08465433780416-0.09876339410486 = "0.0847:0.0988" 0.09876339410486-0.11287245040555 = "0.0988:0.1129" ;
NOTE: Format F8_ has been output.
40805      value F9_
40806      0-0.03267049797528 = "0:0.0327"
40807      0.03267049797528-0.06534099595057 = "0.0327:0.0653"
40808      0.06534099595057-0.09801149392585 = "0.0653:0.098"
40809      0.09801149392585-0.13068199190114 = "0.098:0.1307"
40810      0.13068199190114-0.16335248987642 = "0.1307:0.1634"
40811      0.16335248987642-0.19602298785171 = "0.1634:0.196"
40812      0.19602298785171-0.22869348582699 = "0.196:0.2287"
40813      0.22869348582699-0.26136398380228 = "0.2287:0.2614"
40814      ;
MPRINT(EM_DIAGRAM):   value F9_ 0-0.03267049797528 = "0:0.0327" 0.03267049797528-0.06534099595057 = "0.0327:0.0653" 0.06534099595057-0.09801149392585 = "0.0653:0.098" 0.09801149392585-0.13068199190114 = "0.098:0.1307" 0.13068199190114-0.16335248987642 = 
"0.1307:0.1634" 0.16335248987642-0.19602298785171 = "0.1634:0.196" 0.19602298785171-0.22869348582699 = "0.196:0.2287" 0.22869348582699-0.26136398380228 = "0.2287:0.2614" ;
NOTE: Format F9_ has been output.
40815      value F10_
40816      0-0.01027938591286 = "0:0.0103"
40817      0.01027938591286-0.02055877182573 = "0.0103:0.0206"
40818      0.02055877182573-0.0308381577386 = "0.0206:0.0308"
40819      0.0308381577386-0.04111754365147 = "0.0308:0.0411"
40820      0.04111754365147-0.05139692956433 = "0.0411:0.0514"
40821      0.05139692956433-0.0616763154772 = "0.0514:0.0617"
40822      0.0616763154772-0.07195570139007 = "0.0617:0.072"
40823      0.07195570139007-0.08223508730294 = "0.072:0.0822"
40824      ;
MPRINT(EM_DIAGRAM):   value F10_ 0-0.01027938591286 = "0:0.0103" 0.01027938591286-0.02055877182573 = "0.0103:0.0206" 0.02055877182573-0.0308381577386 = "0.0206:0.0308" 0.0308381577386-0.04111754365147 = "0.0308:0.0411" 0.04111754365147-0.05139692956433 = 
"0.0411:0.0514" 0.05139692956433-0.0616763154772 = "0.0514:0.0617" 0.0616763154772-0.07195570139007 = "0.0617:0.072" 0.07195570139007-0.08223508730294 = "0.072:0.0822" ;
NOTE: Format F10_ has been output.
40825      value F11_
40826      0-0.02366173302886 = "0:0.0237"
40827      0.02366173302886-0.04732346605773 = "0.0237:0.0473"
40828      0.04732346605773-0.0709851990866 = "0.0473:0.071"
40829      0.0709851990866-0.09464693211547 = "0.071:0.0946"
40830      0.09464693211547-0.11830866514434 = "0.0946:0.1183"
40831      0.11830866514434-0.14197039817321 = "0.1183:0.142"
40832      0.14197039817321-0.16563213120208 = "0.142:0.1656"
40833      0.16563213120208-0.18929386423095 = "0.1656:0.1893"
40834      ;
MPRINT(EM_DIAGRAM):   value F11_ 0-0.02366173302886 = "0:0.0237" 0.02366173302886-0.04732346605773 = "0.0237:0.0473" 0.04732346605773-0.0709851990866 = "0.0473:0.071" 0.0709851990866-0.09464693211547 = "0.071:0.0946" 0.09464693211547-0.11830866514434 = 
"0.0946:0.1183" 0.11830866514434-0.14197039817321 = "0.1183:0.142" 0.14197039817321-0.16563213120208 = "0.142:0.1656" 0.16563213120208-0.18929386423095 = "0.1656:0.1893" ;
NOTE: Format F11_ has been output.
40835      value F12_
40836      0-0.03599875352952 = "0:0.036"
40837      0.03599875352952-0.07199750705905 = "0.036:0.072"
40838      0.07199750705905-0.10799626058857 = "0.072:0.108"
40839      0.10799626058857-0.1439950141181 = "0.108:0.144"
40840      0.1439950141181-0.17999376764763 = "0.144:0.18"
40841      0.17999376764763-0.21599252117715 = "0.18:0.216"
40842      0.21599252117715-0.25199127470668 = "0.216:0.252"
40843      0.25199127470668-0.2879900282362 = "0.252:0.288"
40844      ;
MPRINT(EM_DIAGRAM):   value F12_ 0-0.03599875352952 = "0:0.036" 0.03599875352952-0.07199750705905 = "0.036:0.072" 0.07199750705905-0.10799626058857 = "0.072:0.108" 0.10799626058857-0.1439950141181 = "0.108:0.144" 0.1439950141181-0.17999376764763 = 
"0.144:0.18" 0.17999376764763-0.21599252117715 = "0.18:0.216" 0.21599252117715-0.25199127470668 = "0.216:0.252" 0.25199127470668-0.2879900282362 = "0.252:0.288" ;
NOTE: Format F12_ has been output.
40845      value F13_
40846      0-0.06481570993927 = "0:0.0648"
40847      0.06481570993927-0.12963141987855 = "0.0648:0.1296"
40848      0.12963141987855-0.19444712981782 = "0.1296:0.1944"
40849      0.19444712981782-0.2592628397571 = "0.1944:0.2593"
40850      0.2592628397571-0.32407854969637 = "0.2593:0.3241"
40851      0.32407854969637-0.38889425963565 = "0.3241:0.3889"
40852      0.38889425963565-0.45370996957492 = "0.3889:0.4537"
40853      0.45370996957492-0.5185256795142 = "0.4537:0.5185"
40854      ;
MPRINT(EM_DIAGRAM):   value F13_ 0-0.06481570993927 = "0:0.0648" 0.06481570993927-0.12963141987855 = "0.0648:0.1296" 0.12963141987855-0.19444712981782 = "0.1296:0.1944" 0.19444712981782-0.2592628397571 = "0.1944:0.2593" 0.2592628397571-0.32407854969637 = 
"0.2593:0.3241" 0.32407854969637-0.38889425963565 = "0.3241:0.3889" 0.38889425963565-0.45370996957492 = "0.3889:0.4537" 0.45370996957492-0.5185256795142 = "0.4537:0.5185" ;
NOTE: Format F13_ has been output.
40855      value F14_
40856      0-0.06216169081056 = "0:0.0622"
40857      0.06216169081056-0.12432338162113 = "0.0622:0.1243"
40858      0.12432338162113-0.1864850724317 = "0.1243:0.1865"
40859      0.1864850724317-0.24864676324227 = "0.1865:0.2486"
40860      0.24864676324227-0.31080845405284 = "0.2486:0.3108"
40861      0.31080845405284-0.37297014486341 = "0.3108:0.373"
40862      0.37297014486341-0.43513183567398 = "0.373:0.4351"
40863      0.43513183567398-0.49729352648455 = "0.4351:0.4973"
40864      ;
MPRINT(EM_DIAGRAM):   value F14_ 0-0.06216169081056 = "0:0.0622" 0.06216169081056-0.12432338162113 = "0.0622:0.1243" 0.12432338162113-0.1864850724317 = "0.1243:0.1865" 0.1864850724317-0.24864676324227 = "0.1865:0.2486" 0.24864676324227-0.31080845405284 = 
"0.2486:0.3108" 0.31080845405284-0.37297014486341 = "0.3108:0.373" 0.37297014486341-0.43513183567398 = "0.373:0.4351" 0.43513183567398-0.49729352648455 = "0.4351:0.4973" ;
NOTE: Format F14_ has been output.
40865      value F15_
40866      0-0.02428108609095 = "0:0.0243"
40867      0.02428108609095-0.04856217218191 = "0.0243:0.0486"
40868      0.04856217218191-0.07284325827287 = "0.0486:0.0728"
40869      0.07284325827287-0.09712434436383 = "0.0728:0.0971"
40870      0.09712434436383-0.12140543045479 = "0.0971:0.1214"
40871      0.12140543045479-0.14568651654575 = "0.1214:0.1457"
40872      0.14568651654575-0.1699676026367 = "0.1457:0.17"
40873      0.1699676026367-0.19424868872766 = "0.17:0.1942"
40874      ;
MPRINT(EM_DIAGRAM):   value F15_ 0-0.02428108609095 = "0:0.0243" 0.02428108609095-0.04856217218191 = "0.0243:0.0486" 0.04856217218191-0.07284325827287 = "0.0486:0.0728" 0.07284325827287-0.09712434436383 = "0.0728:0.0971" 0.09712434436383-0.12140543045479 
= "0.0971:0.1214" 0.12140543045479-0.14568651654575 = "0.1214:0.1457" 0.14568651654575-0.1699676026367 = "0.1457:0.17" 0.1699676026367-0.19424868872766 = "0.17:0.1942" ;
NOTE: Format F15_ has been output.
40875      value F16_
40876      0-0.04675621897204 = "0:0.0468"
40877      0.04675621897204-0.09351243794408 = "0.0468:0.0935"
40878      0.09351243794408-0.14026865691612 = "0.0935:0.1403"
40879      0.14026865691612-0.18702487588816 = "0.1403:0.187"
40880      0.18702487588816-0.2337810948602 = "0.187:0.2338"
40881      0.2337810948602-0.28053731383224 = "0.2338:0.2805"
40882      0.28053731383224-0.32729353280428 = "0.2805:0.3273"
40883      0.32729353280428-0.37404975177632 = "0.3273:0.374"
40884      ;
MPRINT(EM_DIAGRAM):   value F16_ 0-0.04675621897204 = "0:0.0468" 0.04675621897204-0.09351243794408 = "0.0468:0.0935" 0.09351243794408-0.14026865691612 = "0.0935:0.1403" 0.14026865691612-0.18702487588816 = "0.1403:0.187" 0.18702487588816-0.2337810948602 = 
"0.187:0.2338" 0.2337810948602-0.28053731383224 = "0.2338:0.2805" 0.28053731383224-0.32729353280428 = "0.2805:0.3273" 0.32729353280428-0.37404975177632 = "0.3273:0.374" ;
NOTE: Format F16_ has been output.
40885      value F17_
40886      0-0.01396699519065 = "0:0.014"
40887      0.01396699519065-0.0279339903813 = "0.014:0.0279"
40888      0.0279339903813-0.04190098557195 = "0.0279:0.0419"
40889      0.04190098557195-0.0558679807626 = "0.0419:0.0559"
40890      0.0558679807626-0.06983497595326 = "0.0559:0.0698"
40891      0.06983497595326-0.08380197114391 = "0.0698:0.0838"
40892      0.08380197114391-0.09776896633456 = "0.0838:0.0978"
40893      0.09776896633456-0.11173596152521 = "0.0978:0.1117"
40894      ;
MPRINT(EM_DIAGRAM):   value F17_ 0-0.01396699519065 = "0:0.014" 0.01396699519065-0.0279339903813 = "0.014:0.0279" 0.0279339903813-0.04190098557195 = "0.0279:0.0419" 0.04190098557195-0.0558679807626 = "0.0419:0.0559" 0.0558679807626-0.06983497595326 = 
"0.0559:0.0698" 0.06983497595326-0.08380197114391 = "0.0698:0.0838" 0.08380197114391-0.09776896633456 = "0.0838:0.0978" 0.09776896633456-0.11173596152521 = "0.0978:0.1117" ;
NOTE: Format F17_ has been output.
40895      value F18_
40896      0-0.03678791521982 = "0:0.0368"
40897      0.03678791521982-0.07357583043965 = "0.0368:0.0736"
40898      0.07357583043965-0.11036374565948 = "0.0736:0.1104"
40899      0.11036374565948-0.14715166087931 = "0.1104:0.1472"
40900      0.14715166087931-0.18393957609914 = "0.1472:0.1839"
40901      0.18393957609914-0.22072749131897 = "0.1839:0.2207"
40902      0.22072749131897-0.2575154065388 = "0.2207:0.2575"
40903      0.2575154065388-0.29430332175862 = "0.2575:0.2943"
40904      ;
MPRINT(EM_DIAGRAM):   value F18_ 0-0.03678791521982 = "0:0.0368" 0.03678791521982-0.07357583043965 = "0.0368:0.0736" 0.07357583043965-0.11036374565948 = "0.0736:0.1104" 0.11036374565948-0.14715166087931 = "0.1104:0.1472" 0.14715166087931-0.18393957609914 
= "0.1472:0.1839" 0.18393957609914-0.22072749131897 = "0.1839:0.2207" 0.22072749131897-0.2575154065388 = "0.2207:0.2575" 0.2575154065388-0.29430332175862 = "0.2575:0.2943" ;
NOTE: Format F18_ has been output.
40905      value F19_
40906      0-0.04090617216991 = "0:0.0409"
40907      0.04090617216991-0.08181234433982 = "0.0409:0.0818"
40908      0.08181234433982-0.12271851650974 = "0.0818:0.1227"
40909      0.12271851650974-0.16362468867965 = "0.1227:0.1636"
40910      0.16362468867965-0.20453086084956 = "0.1636:0.2045"
40911      0.20453086084956-0.24543703301948 = "0.2045:0.2454"
40912      0.24543703301948-0.28634320518939 = "0.2454:0.2863"
40913      0.28634320518939-0.3272493773593 = "0.2863:0.3272"
40914      ;
MPRINT(EM_DIAGRAM):   value F19_ 0-0.04090617216991 = "0:0.0409" 0.04090617216991-0.08181234433982 = "0.0409:0.0818" 0.08181234433982-0.12271851650974 = "0.0818:0.1227" 0.12271851650974-0.16362468867965 = "0.1227:0.1636" 0.16362468867965-0.20453086084956 
= "0.1636:0.2045" 0.20453086084956-0.24543703301948 = "0.2045:0.2454" 0.24543703301948-0.28634320518939 = "0.2454:0.2863" 0.28634320518939-0.3272493773593 = "0.2863:0.3272" ;
NOTE: Format F19_ has been output.
40915      value F20_
40916      0-0.01411393976743 = "0:0.0141"
40917      0.01411393976743-0.02822787953487 = "0.0141:0.0282"
40918      0.02822787953487-0.0423418193023 = "0.0282:0.0423"
40919      0.0423418193023-0.05645575906974 = "0.0423:0.0565"
40920      0.05645575906974-0.07056969883718 = "0.0565:0.0706"
40921      0.07056969883718-0.08468363860461 = "0.0706:0.0847"
40922      0.08468363860461-0.09879757837205 = "0.0847:0.0988"
40923      0.09879757837205-0.11291151813949 = "0.0988:0.1129"
40924      ;
MPRINT(EM_DIAGRAM):   value F20_ 0-0.01411393976743 = "0:0.0141" 0.01411393976743-0.02822787953487 = "0.0141:0.0282" 0.02822787953487-0.0423418193023 = "0.0282:0.0423" 0.0423418193023-0.05645575906974 = "0.0423:0.0565" 0.05645575906974-0.07056969883718 = 
"0.0565:0.0706" 0.07056969883718-0.08468363860461 = "0.0706:0.0847" 0.08468363860461-0.09879757837205 = "0.0847:0.0988" 0.09879757837205-0.11291151813949 = "0.0988:0.1129" ;
NOTE: Format F20_ has been output.
40925      value F21_
40926      0-0.02562288673444 = "0:0.0256"
40927      0.02562288673444-0.05124577346888 = "0.0256:0.0512"
40928      0.05124577346888-0.07686866020332 = "0.0512:0.0769"
40929      0.07686866020332-0.10249154693776 = "0.0769:0.1025"
40930      0.10249154693776-0.1281144336722 = "0.1025:0.1281"
40931      0.1281144336722-0.15373732040664 = "0.1281:0.1537"
40932      0.15373732040664-0.17936020714108 = "0.1537:0.1794"
40933      0.17936020714108-0.20498309387552 = "0.1794:0.205"
40934      ;
MPRINT(EM_DIAGRAM):   value F21_ 0-0.02562288673444 = "0:0.0256" 0.02562288673444-0.05124577346888 = "0.0256:0.0512" 0.05124577346888-0.07686866020332 = "0.0512:0.0769" 0.07686866020332-0.10249154693776 = "0.0769:0.1025" 0.10249154693776-0.1281144336722 = 
"0.1025:0.1281" 0.1281144336722-0.15373732040664 = "0.1281:0.1537" 0.15373732040664-0.17936020714108 = "0.1537:0.1794" 0.17936020714108-0.20498309387552 = "0.1794:0.205" ;
NOTE: Format F21_ has been output.
40935      value F22_
40936      0-0.02088428538274 = "0:0.0209"
40937      0.02088428538274-0.04176857076549 = "0.0209:0.0418"
40938      0.04176857076549-0.06265285614824 = "0.0418:0.0627"
40939      0.06265285614824-0.08353714153099 = "0.0627:0.0835"
40940      0.08353714153099-0.10442142691374 = "0.0835:0.1044"
40941      0.10442142691374-0.12530571229649 = "0.1044:0.1253"
40942      0.12530571229649-0.14618999767924 = "0.1253:0.1462"
40943      0.14618999767924-0.16707428306199 = "0.1462:0.1671"
40944      ;
MPRINT(EM_DIAGRAM):   value F22_ 0-0.02088428538274 = "0:0.0209" 0.02088428538274-0.04176857076549 = "0.0209:0.0418" 0.04176857076549-0.06265285614824 = "0.0418:0.0627" 0.06265285614824-0.08353714153099 = "0.0627:0.0835" 0.08353714153099-0.10442142691374 
= "0.0835:0.1044" 0.10442142691374-0.12530571229649 = "0.1044:0.1253" 0.12530571229649-0.14618999767924 = "0.1253:0.1462" 0.14618999767924-0.16707428306199 = "0.1462:0.1671" ;
NOTE: Format F22_ has been output.
40945      value F23_
40946      0-0.04129603312424 = "0:0.0413"
40947      0.04129603312424-0.08259206624849 = "0.0413:0.0826"
40948      0.08259206624849-0.12388809937274 = "0.0826:0.1239"
40949      0.12388809937274-0.16518413249699 = "0.1239:0.1652"
40950      0.16518413249699-0.20648016562124 = "0.1652:0.2065"
40951      0.20648016562124-0.24777619874549 = "0.2065:0.2478"
40952      0.24777619874549-0.28907223186974 = "0.2478:0.2891"
40953      0.28907223186974-0.33036826499399 = "0.2891:0.3304"
40954      ;
MPRINT(EM_DIAGRAM):   value F23_ 0-0.04129603312424 = "0:0.0413" 0.04129603312424-0.08259206624849 = "0.0413:0.0826" 0.08259206624849-0.12388809937274 = "0.0826:0.1239" 0.12388809937274-0.16518413249699 = "0.1239:0.1652" 0.16518413249699-0.20648016562124 
= "0.1652:0.2065" 0.20648016562124-0.24777619874549 = "0.2065:0.2478" 0.24777619874549-0.28907223186974 = "0.2478:0.2891" 0.28907223186974-0.33036826499399 = "0.2891:0.3304" ;
NOTE: Format F23_ has been output.
40955      value F24_
40956      0-0.0155254722961 = "0:0.0155"
40957      0.0155254722961-0.03105094459221 = "0.0155:0.0311"
40958      0.03105094459221-0.04657641688832 = "0.0311:0.0466"
40959      0.04657641688832-0.06210188918443 = "0.0466:0.0621"
40960      0.06210188918443-0.07762736148053 = "0.0621:0.0776"
40961      0.07762736148053-0.09315283377664 = "0.0776:0.0932"
40962      0.09315283377664-0.10867830607275 = "0.0932:0.1087"
40963      0.10867830607275-0.12420377836886 = "0.1087:0.1242"
40964      ;
MPRINT(EM_DIAGRAM):   value F24_ 0-0.0155254722961 = "0:0.0155" 0.0155254722961-0.03105094459221 = "0.0155:0.0311" 0.03105094459221-0.04657641688832 = "0.0311:0.0466" 0.04657641688832-0.06210188918443 = "0.0466:0.0621" 0.06210188918443-0.07762736148053 = 
"0.0621:0.0776" 0.07762736148053-0.09315283377664 = "0.0776:0.0932" 0.09315283377664-0.10867830607275 = "0.0932:0.1087" 0.10867830607275-0.12420377836886 = "0.1087:0.1242" ;
NOTE: Format F24_ has been output.
40965      value F25_
40966      0-0.01434178193228 = "0:0.0143"
40967      0.01434178193228-0.02868356386457 = "0.0143:0.0287"
40968      0.02868356386457-0.04302534579685 = "0.0287:0.043"
40969      0.04302534579685-0.05736712772914 = "0.043:0.0574"
40970      0.05736712772914-0.07170890966143 = "0.0574:0.0717"
40971      0.07170890966143-0.08605069159371 = "0.0717:0.0861"
40972      0.08605069159371-0.100392473526 = "0.0861:0.1004"
40973      0.100392473526-0.11473425545828 = "0.1004:0.1147"
40974      ;
MPRINT(EM_DIAGRAM):   value F25_ 0-0.01434178193228 = "0:0.0143" 0.01434178193228-0.02868356386457 = "0.0143:0.0287" 0.02868356386457-0.04302534579685 = "0.0287:0.043" 0.04302534579685-0.05736712772914 = "0.043:0.0574" 0.05736712772914-0.07170890966143 = 
"0.0574:0.0717" 0.07170890966143-0.08605069159371 = "0.0717:0.0861" 0.08605069159371-0.100392473526 = "0.0861:0.1004" 0.100392473526-0.11473425545828 = "0.1004:0.1147" ;
NOTE: Format F25_ has been output.
40975      value F26_
40976      0-0.01109959226083 = "0:0.0111"
40977      0.01109959226083-0.02219918452166 = "0.0111:0.0222"
40978      0.02219918452166-0.0332987767825 = "0.0222:0.0333"
40979      0.0332987767825-0.04439836904333 = "0.0333:0.0444"
40980      0.04439836904333-0.05549796130417 = "0.0444:0.0555"
40981      0.05549796130417-0.066597553565 = "0.0555:0.0666"
40982      0.066597553565-0.07769714582583 = "0.0666:0.0777"
40983      0.07769714582583-0.08879673808667 = "0.0777:0.0888"
40984      ;
MPRINT(EM_DIAGRAM):   value F26_ 0-0.01109959226083 = "0:0.0111" 0.01109959226083-0.02219918452166 = "0.0111:0.0222" 0.02219918452166-0.0332987767825 = "0.0222:0.0333" 0.0332987767825-0.04439836904333 = "0.0333:0.0444" 0.04439836904333-0.05549796130417 = 
"0.0444:0.0555" 0.05549796130417-0.066597553565 = "0.0555:0.0666" 0.066597553565-0.07769714582583 = "0.0666:0.0777" 0.07769714582583-0.08879673808667 = "0.0777:0.0888" ;
NOTE: Format F26_ has been output.
40985      value F27_
40986      0-0.05952747737836 = "0:0.0595"
40987      0.05952747737836-0.11905495475672 = "0.0595:0.1191"
40988      0.11905495475672-0.17858243213508 = "0.1191:0.1786"
40989      0.17858243213508-0.23810990951345 = "0.1786:0.2381"
40990      0.23810990951345-0.29763738689181 = "0.2381:0.2976"
40991      0.29763738689181-0.35716486427017 = "0.2976:0.3572"
40992      0.35716486427017-0.41669234164854 = "0.3572:0.4167"
40993      0.41669234164854-0.4762198190269 = "0.4167:0.4762"
40994      ;
MPRINT(EM_DIAGRAM):   value F27_ 0-0.05952747737836 = "0:0.0595" 0.05952747737836-0.11905495475672 = "0.0595:0.1191" 0.11905495475672-0.17858243213508 = "0.1191:0.1786" 0.17858243213508-0.23810990951345 = "0.1786:0.2381" 0.23810990951345-0.29763738689181 
= "0.2381:0.2976" 0.29763738689181-0.35716486427017 = "0.2976:0.3572" 0.35716486427017-0.41669234164854 = "0.3572:0.4167" 0.41669234164854-0.4762198190269 = "0.4167:0.4762" ;
NOTE: Format F27_ has been output.
40995      value F28_
40996      0-0.01328592727211 = "0:0.0133"
40997      0.01328592727211-0.02657185454423 = "0.0133:0.0266"
40998      0.02657185454423-0.03985778181635 = "0.0266:0.0399"
40999      0.03985778181635-0.05314370908847 = "0.0399:0.0531"
41000      0.05314370908847-0.06642963636058 = "0.0531:0.0664"
41001      0.06642963636058-0.0797155636327 = "0.0664:0.0797"
41002      0.0797155636327-0.09300149090482 = "0.0797:0.093"
41003      0.09300149090482-0.10628741817694 = "0.093:0.1063"
41004      ;
MPRINT(EM_DIAGRAM):   value F28_ 0-0.01328592727211 = "0:0.0133" 0.01328592727211-0.02657185454423 = "0.0133:0.0266" 0.02657185454423-0.03985778181635 = "0.0266:0.0399" 0.03985778181635-0.05314370908847 = "0.0399:0.0531" 0.05314370908847-0.06642963636058 
= "0.0531:0.0664" 0.06642963636058-0.0797155636327 = "0.0664:0.0797" 0.0797155636327-0.09300149090482 = "0.0797:0.093" 0.09300149090482-0.10628741817694 = "0.093:0.1063" ;
NOTE: Format F28_ has been output.
41005      value F29_
41006      0-0.03758216671819 = "0:0.0376"
41007      0.03758216671819-0.07516433343639 = "0.0376:0.0752"
41008      0.07516433343639-0.11274650015459 = "0.0752:0.1127"
41009      0.11274650015459-0.15032866687279 = "0.1127:0.1503"
41010      0.15032866687279-0.18791083359099 = "0.1503:0.1879"
41011      0.18791083359099-0.22549300030918 = "0.1879:0.2255"
41012      0.22549300030918-0.26307516702738 = "0.2255:0.2631"
41013      0.26307516702738-0.30065733374558 = "0.2631:0.3007"
41014      ;
MPRINT(EM_DIAGRAM):   value F29_ 0-0.03758216671819 = "0:0.0376" 0.03758216671819-0.07516433343639 = "0.0376:0.0752" 0.07516433343639-0.11274650015459 = "0.0752:0.1127" 0.11274650015459-0.15032866687279 = "0.1127:0.1503" 0.15032866687279-0.18791083359099 
= "0.1503:0.1879" 0.18791083359099-0.22549300030918 = "0.1879:0.2255" 0.22549300030918-0.26307516702738 = "0.2255:0.2631" 0.26307516702738-0.30065733374558 = "0.2631:0.3007" ;
NOTE: Format F29_ has been output.
41015      value F30_
41016      0-0.01822669887042 = "0:0.0182"
41017      0.01822669887042-0.03645339774084 = "0.0182:0.0365"
41018      0.03645339774084-0.05468009661126 = "0.0365:0.0547"
41019      0.05468009661126-0.07290679548168 = "0.0547:0.0729"
41020      0.07290679548168-0.09113349435211 = "0.0729:0.0911"
41021      0.09113349435211-0.10936019322253 = "0.0911:0.1094"
41022      0.10936019322253-0.12758689209295 = "0.1094:0.1276"
41023      0.12758689209295-0.14581359096337 = "0.1276:0.1458"
41024      ;
MPRINT(EM_DIAGRAM):   value F30_ 0-0.01822669887042 = "0:0.0182" 0.01822669887042-0.03645339774084 = "0.0182:0.0365" 0.03645339774084-0.05468009661126 = "0.0365:0.0547" 0.05468009661126-0.07290679548168 = "0.0547:0.0729" 0.07290679548168-0.09113349435211 
= "0.0729:0.0911" 0.09113349435211-0.10936019322253 = "0.0911:0.1094" 0.10936019322253-0.12758689209295 = "0.1094:0.1276" 0.12758689209295-0.14581359096337 = "0.1276:0.1458" ;
NOTE: Format F30_ has been output.
41025      value F31_
41026      0-0.01931067638602 = "0:0.0193"
41027      0.01931067638602-0.03862135277205 = "0.0193:0.0386"
41028      0.03862135277205-0.05793202915808 = "0.0386:0.0579"
41029      0.05793202915808-0.0772427055441 = "0.0579:0.0772"
41030      0.0772427055441-0.09655338193013 = "0.0772:0.0966"
41031      0.09655338193013-0.11586405831616 = "0.0966:0.1159"
41032      0.11586405831616-0.13517473470218 = "0.1159:0.1352"
41033      0.13517473470218-0.15448541108821 = "0.1352:0.1545"
41034      ;
MPRINT(EM_DIAGRAM):   value F31_ 0-0.01931067638602 = "0:0.0193" 0.01931067638602-0.03862135277205 = "0.0193:0.0386" 0.03862135277205-0.05793202915808 = "0.0386:0.0579" 0.05793202915808-0.0772427055441 = "0.0579:0.0772" 0.0772427055441-0.09655338193013 = 
"0.0772:0.0966" 0.09655338193013-0.11586405831616 = "0.0966:0.1159" 0.11586405831616-0.13517473470218 = "0.1159:0.1352" 0.13517473470218-0.15448541108821 = "0.1352:0.1545" ;
NOTE: Format F31_ has been output.
41035      value F32_
41036      0-0.01382991972263 = "0:0.0138"
41037      0.01382991972263-0.02765983944527 = "0.0138:0.0277"
41038      0.02765983944527-0.04148975916791 = "0.0277:0.0415"
41039      0.04148975916791-0.05531967889055 = "0.0415:0.0553"
41040      0.05531967889055-0.06914959861319 = "0.0553:0.0691"
41041      0.06914959861319-0.08297951833583 = "0.0691:0.083"
41042      0.08297951833583-0.09680943805847 = "0.083:0.0968"
41043      0.09680943805847-0.11063935778111 = "0.0968:0.1106"
41044      ;
MPRINT(EM_DIAGRAM):   value F32_ 0-0.01382991972263 = "0:0.0138" 0.01382991972263-0.02765983944527 = "0.0138:0.0277" 0.02765983944527-0.04148975916791 = "0.0277:0.0415" 0.04148975916791-0.05531967889055 = "0.0415:0.0553" 0.05531967889055-0.06914959861319 
= "0.0553:0.0691" 0.06914959861319-0.08297951833583 = "0.0691:0.083" 0.08297951833583-0.09680943805847 = "0.083:0.0968" 0.09680943805847-0.11063935778111 = "0.0968:0.1106" ;
NOTE: Format F32_ has been output.
41045      value F33_
41046      0-0.01225143674073 = "0:0.0123"
41047      0.01225143674073-0.02450287348146 = "0.0123:0.0245"
41048      0.02450287348146-0.03675431022219 = "0.0245:0.0368"
41049      0.03675431022219-0.04900574696292 = "0.0368:0.049"
41050      0.04900574696292-0.06125718370365 = "0.049:0.0613"
41051      0.06125718370365-0.07350862044439 = "0.0613:0.0735"
41052      0.07350862044439-0.08576005718512 = "0.0735:0.0858"
41053      0.08576005718512-0.09801149392585 = "0.0858:0.098"
41054      ;
MPRINT(EM_DIAGRAM):   value F33_ 0-0.01225143674073 = "0:0.0123" 0.01225143674073-0.02450287348146 = "0.0123:0.0245" 0.02450287348146-0.03675431022219 = "0.0245:0.0368" 0.03675431022219-0.04900574696292 = "0.0368:0.049" 0.04900574696292-0.06125718370365 = 
"0.049:0.0613" 0.06125718370365-0.07350862044439 = "0.0613:0.0735" 0.07350862044439-0.08576005718512 = "0.0735:0.0858" 0.08576005718512-0.09801149392585 = "0.0858:0.098" ;
NOTE: Format F33_ has been output.
MPRINT(EM_DIAGRAM):   run;
41055      run;

NOTE: PROCEDURE FORMAT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41056      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
41057      ods output crosstabfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output crosstabfreqs=WORK.TEMPFREQ;
41058      proc freq data = EMWS3.Clus_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS3.Clus_TRAIN order=formatted addnames;
41059      table ANTI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table ANTI * _SEGMENT_ / missing;
41060      table ARGIC * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table ARGIC * _SEGMENT_ / missing;
41061      table ARMENIAN * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table ARMENIAN * _SEGMENT_ / missing;
41062      table BIRTHDAI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BIRTHDAI * _SEGMENT_ / missing;
41063      table BRAD * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BRAD * _SEGMENT_ / missing;
41064      table BUSH * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BUSH * _SEGMENT_ / missing;
41065      table CARTER * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table CARTER * _SEGMENT_ / missing;
41066      table CHASTITI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table CHASTITI * _SEGMENT_ / missing;
41067      table CIVILIAN * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table CIVILIAN * _SEGMENT_ / missing;
41068      table EXTERMIN * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table EXTERMIN * _SEGMENT_ / missing;
41069      table GENOCID * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table GENOCID * _SEGMENT_ / missing;
41070      table GORDON * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table GORDON * _SEGMENT_ / missing;
41071      table HAMID * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HAMID * _SEGMENT_ / missing;
41072      table HAPPI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HAPPI * _SEGMENT_ / missing;
41073      table HERNLEM * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HERNLEM * _SEGMENT_ / missing;
41074      table HEZBOLLAH * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HEZBOLLAH * _SEGMENT_ / missing;
41075      table INTELLECT * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table INTELLECT * _SEGMENT_ / missing;
41076      table ISRAEL * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table ISRAEL * _SEGMENT_ / missing;
41077      table JAKE * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table JAKE * _SEGMENT_ / missing;
41078      table JIMMI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table JIMMI * _SEGMENT_ / missing;
41079      table LEBANES * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table LEBANES * _SEGMENT_ / missing;
41080      table LEBANON * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table LEBANON * _SEGMENT_ / missing;
41081      table LIVNI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table LIVNI * _SEGMENT_ / missing;
41082      table OCCUPI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table OCCUPI * _SEGMENT_ / missing;
41083      table REDUND * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table REDUND * _SEGMENT_ / missing;
41084      table SERA * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SERA * _SEGMENT_ / missing;
41085      table SERDAR * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SERDAR * _SEGMENT_ / missing;
41086      table SHAME * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SHAME * _SEGMENT_ / missing;
41087      table SHNEKENDORF * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SHNEKENDORF * _SEGMENT_ / missing;
41088      table SKEPTIC * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SKEPTIC * _SEGMENT_ / missing;
41089      table SOVIET * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SOVIET * _SEGMENT_ / missing;
41090      table SURREND * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SURREND * _SEGMENT_ / missing;
41091      table ZUMA * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table ZUMA * _SEGMENT_ / missing;
41092      format ANTI F1_.;
MPRINT(EM_DIAGRAM):   format ANTI F1_.;
41093      format ARGIC F2_.;
MPRINT(EM_DIAGRAM):   format ARGIC F2_.;
41094      format ARMENIAN F3_.;
MPRINT(EM_DIAGRAM):   format ARMENIAN F3_.;
41095      format BIRTHDAI F4_.;
MPRINT(EM_DIAGRAM):   format BIRTHDAI F4_.;
41096      format BRAD F5_.;
MPRINT(EM_DIAGRAM):   format BRAD F5_.;
41097      format BUSH F6_.;
MPRINT(EM_DIAGRAM):   format BUSH F6_.;
41098      format CARTER F7_.;
MPRINT(EM_DIAGRAM):   format CARTER F7_.;
41099      format CHASTITI F8_.;
MPRINT(EM_DIAGRAM):   format CHASTITI F8_.;
41100      format CIVILIAN F9_.;
MPRINT(EM_DIAGRAM):   format CIVILIAN F9_.;
41101      format EXTERMIN F10_.;
MPRINT(EM_DIAGRAM):   format EXTERMIN F10_.;
41102      format GENOCID F11_.;
MPRINT(EM_DIAGRAM):   format GENOCID F11_.;
41103      format GORDON F12_.;
MPRINT(EM_DIAGRAM):   format GORDON F12_.;
41104      format HAMID F13_.;
MPRINT(EM_DIAGRAM):   format HAMID F13_.;
41105      format HAPPI F14_.;
MPRINT(EM_DIAGRAM):   format HAPPI F14_.;
41106      format HERNLEM F15_.;
MPRINT(EM_DIAGRAM):   format HERNLEM F15_.;
41107      format HEZBOLLAH F16_.;
MPRINT(EM_DIAGRAM):   format HEZBOLLAH F16_.;
41108      format INTELLECT F17_.;
MPRINT(EM_DIAGRAM):   format INTELLECT F17_.;
41109      format ISRAEL F18_.;
MPRINT(EM_DIAGRAM):   format ISRAEL F18_.;
41110      format JAKE F19_.;
MPRINT(EM_DIAGRAM):   format JAKE F19_.;
41111      format JIMMI F20_.;
MPRINT(EM_DIAGRAM):   format JIMMI F20_.;
41112      format LEBANES F21_.;
MPRINT(EM_DIAGRAM):   format LEBANES F21_.;
41113      format LEBANON F22_.;
MPRINT(EM_DIAGRAM):   format LEBANON F22_.;
41114      format LIVNI F23_.;
MPRINT(EM_DIAGRAM):   format LIVNI F23_.;
41115      format OCCUPI F24_.;
MPRINT(EM_DIAGRAM):   format OCCUPI F24_.;
41116      format REDUND F25_.;
MPRINT(EM_DIAGRAM):   format REDUND F25_.;
41117      format SERA F26_.;
MPRINT(EM_DIAGRAM):   format SERA F26_.;
41118      format SERDAR F27_.;
MPRINT(EM_DIAGRAM):   format SERDAR F27_.;
41119      format SHAME F28_.;
MPRINT(EM_DIAGRAM):   format SHAME F28_.;
41120      format SHNEKENDORF F29_.;
MPRINT(EM_DIAGRAM):   format SHNEKENDORF F29_.;
41121      format SKEPTIC F30_.;
MPRINT(EM_DIAGRAM):   format SKEPTIC F30_.;
41122      format SOVIET F31_.;
MPRINT(EM_DIAGRAM):   format SOVIET F31_.;
41123      format SURREND F32_.;
MPRINT(EM_DIAGRAM):   format SURREND F32_.;
41124      format ZUMA F33_.;
MPRINT(EM_DIAGRAM):   format ZUMA F33_.;
41125      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: Vista EMWS3.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           1.82 seconds
      cpu time            1.82 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.IDS_DATA.
NOTE: The data set WORK.TEMPFREQ has 1925 observations and 44 variables.
NOTE: There were 3000 observations read from the data set EMWS3.CLUS_TRAIN.
NOTE: PROCEDURE FREQ ha utilizado (Tiempo de proceso total):
      real time           1.87 seconds
      cpu time            1.89 seconds
      

MPRINT(EM_DIAGRAM):   quit;
41126      quit;
41127      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
41128      data EMWS3.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data EMWS3.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
41129      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" _SEGMENT_ = "Segment Variable" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ =
41130         "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT =
41131         "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" _SEGMENT_ = "Segment Variable" Type = "Tipo" _X_ = "Valor numérico" _XLABEL_ = "Valor formateado" COUNT = "Número de ocurrencias" PERCENT = "Porcentaje";
41132      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
41133      varnum = varnum(dsid, 'ROWVARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'ROWVARIABLE');
41134      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
41135      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
41136      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
41137      bynum = varnum(dsid, "_SEGMENT_");
MPRINT(EM_DIAGRAM):   bynum = varnum(dsid, "_SEGMENT_");
41138      length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
MPRINT(EM_DIAGRAM):   length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
41139      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
41140      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
41141      percent = getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent = getvarn(dsid, pvarnum);
41142      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
41143      varblnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   varblnum = varnum(dsid, _VARIABLE_);
41144      _SEGMENT_ = getvarn(dsid, bynum);
MPRINT(EM_DIAGRAM):   _SEGMENT_ = getvarn(dsid, bynum);
41145      type = vartype(dsid, varblnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, varblnum);
41146      varformat = varfmt(dsid, varblnum);
MPRINT(EM_DIAGRAM):   varformat = varfmt(dsid, varblnum);
41147      if varformat eq '' then varformat = 'best12.';
MPRINT(EM_DIAGRAM):   if varformat eq '' then varformat = 'best12.';
41148      _X_=.;
MPRINT(EM_DIAGRAM):   _X_=.;
41149      if type = 'N' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
41150      _X_ = getvarn(dsid, varblnum);
MPRINT(EM_DIAGRAM):   _X_ = getvarn(dsid, varblnum);
41151      _XLABEL_ = left(putn(_X_, varformat));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(putn(_X_, varformat));
41152      end;
MPRINT(EM_DIAGRAM):   end;
Sistema SAS

41153      else _XLABEL_ = getvarc(dsid, varblnum);
MPRINT(EM_DIAGRAM):   else _XLABEL_ = getvarc(dsid, varblnum);
41154      if getvarc(dsid, typenum) = '11' then output;
MPRINT(EM_DIAGRAM):   if getvarc(dsid, typenum) = '11' then output;
41155      end;
MPRINT(EM_DIAGRAM):   end;
41156      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
41157      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set EMWS3.CLUS_PROFILE has 1452 observations and 7 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

41158      proc sort data=EMWS3.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_PROFILE NOTHREADS;
41159      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
41160      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1452 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set EMWS3.CLUS_PROFILE has 1452 observations and 7 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41161      proc means data=EMWS3.Clus_PROFILE noprint missing NWAY;
MPRINT(EM_DIAGRAM):   proc means data=EMWS3.Clus_PROFILE noprint missing NWAY;
41162      class _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   class _VARIABLE_ _SEGMENT_;
41163      var COUNT;
MPRINT(EM_DIAGRAM):   var COUNT;
41164      output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
MPRINT(EM_DIAGRAM):   output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
41165      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1452 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set WORK.CLUS_STATCOUNT has 198 observations and 3 variables.
NOTE: PROCEDURE MEANS ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41166      proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
41167      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
41168      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 198 observations read from the data set WORK.CLUS_STATCOUNT.
NOTE: The data set WORK.CLUS_STATCOUNT has 198 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41169      data EMWS3.Clus_PROFILE(drop=SUM);
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_PROFILE(drop=SUM);
41170      label BYPERCENT= "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel, NOQUOTE, _SEGMENT_))";
MPRINT(EM_DIAGRAM):   label BYPERCENT= "Porcentaje";
41171      merge EMWS3.Clus_PROFILE WORK.Clus_STATCOUNT;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_PROFILE WORK.Clus_STATCOUNT;
41172      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
41173      if SUM ne . then BYPERCENT = 100*COUNT/SUM;
MPRINT(EM_DIAGRAM):   if SUM ne . then BYPERCENT = 100*COUNT/SUM;
41174      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1452 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: There were 198 observations read from the data set WORK.CLUS_STATCOUNT.
NOTE: The data set EMWS3.CLUS_PROFILE has 1452 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41175      proc sort data=EMWS3.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Clus_PROFILE NOTHREADS;
41176      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
41177      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1452 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set EMWS3.CLUS_PROFILE has 1452 observations and 8 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41178      proc sort data=WORK.M1L4IL7U;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M1L4IL7U;
41179      by Name;
MPRINT(EM_DIAGRAM):   by Name;
41180      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 34 observations read from the data set WORK.M1L4IL7U.
NOTE: The data set WORK.M1L4IL7U has 34 observations and 21 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41181      data EMWS3.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_PROFILE;
41182      merge EMWS3.Clus_PROFILE(in=_a) WORK.M1L4IL7U(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_PROFILE(in=_a) WORK.M1L4IL7U(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
41183      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
41184      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Rol";
41185      label Label = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Etiqueta";
41186      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
41187      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable Label is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _VARIABLE_ by input data sets. This might cause unexpected results.
NOTE: There were 1452 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: There were 34 observations read from the data set WORK.M1L4IL7U.
NOTE: The data set EMWS3.CLUS_PROFILE has 1452 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41188      proc sort data=EMWS3.Clus_PROFILE;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Clus_PROFILE;
41189      by _SEGMENT_ _VARIABLE_ _X_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_ _X_;
41190      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1452 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set EMWS3.CLUS_PROFILE has 1452 observations and 10 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41191      data EMWS3.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
41192      set EMWS3.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_PROFILE;
41193      retain orderedValue 0;
MPRINT(EM_DIAGRAM):   retain orderedValue 0;
41194      label OrderedValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_OrderedValue_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label OrderedValue = "Valores ordenados";
41195      by _SEGMENT_ _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_;
41196      if first._variable_ then orderedValue=1;
MPRINT(EM_DIAGRAM):   if first._variable_ then orderedValue=1;
41197      else orderedValue+1;
MPRINT(EM_DIAGRAM):   else orderedValue+1;
41198      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1452 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set EMWS3.CLUS_PROFILE has 1452 observations and 11 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

41199      proc transpose data=EMWS3.Clus_OUTVAR out=WORK.Clus_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS3.Clus_OUTVAR out=WORK.Clus_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
41200      var ABSOLUT--ZUMA;
MPRINT(EM_DIAGRAM):   var ABSOLUT--ZUMA;
41201      where _TYPE_ in('TYPE' 'VARIABLE');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('TYPE' 'VARIABLE');
41202      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS3.CLUS_OUTVAR.
      WHERE _TYPE_ in ('TYPE', 'VARIABLE');
NOTE: The data set WORK.CLUS_OUTVAR has 1204 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41203      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
41204      * Clus: variables DMVQ;
MPRINT(EM_DIAGRAM):   * Clus: variables DMVQ;
41205      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
41206      %macro dmvqvars;
41207          ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT
41208         ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI
41209         ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW
41210         ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI
41211         APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA
41212         ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN
41213         ATHENA ATTACH ATTACK ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI
41214         BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER
41215         BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON
41216         BOUGHT BOULDER BOX BRAD BRAIN BRAND BREAK BRIAN BRING BRITISH BROWN BTW BUFFER
41217         BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN
41218         CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER
41219         CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL CHARACT CHARG CHASTITI
41220         CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI
41221         CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR
41222         CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN
41223         COLOR COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON
41224         COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET
41225         CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT
41226         CONTACT CONTENT CONTEXT CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP
41227         CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN
41228         CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL
41229         DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD DEAL DEAR DEATH DECID DECOD DEFAULT
41230         DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL
41231         DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO
41232         DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG DISCLAIM DISCUSS DISEAS
41233         DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON
41234         DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI
41235         EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL
41236         ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP
41237         ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT
41238         EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE
41239         FACT FAIL FALS FAMILI FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT
41240         FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU
41241         FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE
41242         FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND FULL FUNCTION FUTUR GAIN GAME
41243         GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI
41244         GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG
41245         GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD
41246         HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT
41247         HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER
41248         HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD
41249         HUMAN HUNTSVIL ICON IDEA IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT
41250         IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT
41251         INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC
41252         INTERGRAPH INTERN INTERNET INTERVIEW INVENT INVOLV IRAN IRVIN ISLAM ISLAND ISN
41253         ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH
41254         JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD
41255         KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB LABEL
41256         LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV
41257         LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT
41258         LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG
41259         LONGER LOOK LOOP LOST LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN
41260         MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR
41261         MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON
41262         MEMBER MEMORI MENTION MENU MESSAG METAL METHOD METHODOLOG MICHAEL MIDDL MIGRAIN
41263         MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL
41264         MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG
41265         MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR NAZI
41266         NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW
41267         NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER
41268         OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM
41269         OMRAN OPEN OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL
41270         OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN
41271         PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD
41272         PERSIAN PERSON PETER PHONE PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL
41273         PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT
41274         POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER
41275         POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID PRESS PRETTI PREVENT PREVIOU
41276         PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM
41277         PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC
41278         PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST RADAR
41279         RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV
41280         RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL
41281         RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR
41282         RESEARCH RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN
41283         REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST
41284         RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE
41285         SCHEMAT SCHOOL SCHWARTZ SCI SCIENC SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU
41286         SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT
41287         SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME
41288         SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT SHOULDN SHOW SICK SIDE SIGN
41289         SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN
41290         SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC
41291         SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK SPOT STAI
41292         STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN
41293         STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB
41294         SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS
41295         SURGERI SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL
41296         TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL
41297         TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE
41298         THEORI THERAPI THERE THEY THINK THOMA THOUGHT THREAD THROW THU TIM TIME TIMER
41299         TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE
41300         TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE
41301         TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN UNDERSTAND UNIT UNIV
41302         UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL
41303         VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG
41304         WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK
41305         WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON
41306         WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG
41307         XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG
41308         ZIONISM ZIONIST ZUMA
41309      %mend ;
41310      
41311      

41312      data WORK.Clus_temp;
MPRINT(EM_DIAGRAM):    data WORK.Clus_temp;
41313      set EMWS3.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTMEAN;
41314      _idvar_=left(put(_SEGMENT_,4.));
MPRINT(EM_DIAGRAM):   _idvar_=left(put(_SEGMENT_,4.));
41315      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS3.CLUS_OUTMEAN.
NOTE: The data set WORK.CLUS_TEMP has 6 observations and 1214 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41316      proc distance data=WORK.Clus_temp out=EMWS3.Clus_DISTANCE method=l(2) shape=square;
MPRINT(EM_DIAGRAM):   proc distance data=WORK.Clus_temp out=EMWS3.Clus_DISTANCE method=l(2) shape=square;
41317      id _idvar_;
MPRINT(EM_DIAGRAM):   id _idvar_;
41318      var interval(%dmvqvars);
MPRINT(EM_DIAGRAM):   var interval(
MPRINT(DMVQVARS):  ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW 
ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN ATHENA ATTACH ATTACK 
ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND 
BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL 
CHARACT CHARG CHASTITI CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN COLOR 
COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT 
CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD 
DEAL DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG 
DISCLAIM DISCUSS DISEAS DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL 
ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FACT FAIL FALS FAMILI 
FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND 
FULL FUNCTION FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD 
HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD HUMAN HUNTSVIL ICON IDEA 
IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC INTERGRAPH INTERN INTERNET INTERVIEW INVENT 
INVOLV IRAN IRVIN ISLAM ISLAND ISN ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB 
LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG LONGER LOOK LOOP LOST 
LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON MEMBER MEMORI MENTION MENU MESSAG METAL METHOD 
METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR 
NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM OMRAN OPEN 
OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PERSON PETER PHONE 
PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID 
PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST 
RADAR RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR RESEARCH 
RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE SCHEMAT SCHOOL SCHWARTZ SCI SCIENC 
SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT 
SHOULDN SHOW SICK SIDE SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK 
SPOT STAI STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS SURGERI 
SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE THEORI THERAPI THERE THEY THINK 
THOMA THOUGHT THREAD THROW THU TIM TIME TIMER TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN 
UNDERSTAND UNIT UNIV UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK 
WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG ZIONISM ZIONIST 
ZUMA
MPRINT(EM_DIAGRAM):  );
41319      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set EMWS3.CLUS_DISTANCE has 6 observations and 7 variables.
NOTE: PROCEDURE DISTANCE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41320      proc mds data=EMWS3.Clus_DISTANCE out=WORK.Clus_mds level=absolute nohist shape=square dim=3;
MPRINT(EM_DIAGRAM):    proc mds data=EMWS3.Clus_DISTANCE out=WORK.Clus_mds level=absolute nohist shape=square dim=3;
41321      object _idvar_;
MPRINT(EM_DIAGRAM):   object _idvar_;
41322      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Convergence reached in 13 iterations.
NOTE: The data set WORK.CLUS_MDS has 7 observations and 8 variables.
NOTE: PROCEDURE MDS ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
41323      quit;
41324      data WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   data WORK.Clus_mds;
41325      set WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   set WORK.Clus_mds;
41326      if _type_ ne 'CONFIG' then delete;
MPRINT(EM_DIAGRAM):   if _type_ ne 'CONFIG' then delete;
41327      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set WORK.CLUS_MDS.
NOTE: The data set WORK.CLUS_MDS has 6 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41328      data WORK.Clus_mds(label="&label" keep=_idvar_ _radius_ dim1 dim2 dim3);
WARNING: Apparent symbolic reference LABEL not resolved.
MPRINT(EM_DIAGRAM):   data WORK.Clus_mds(label="&label" KEEP=_idvar_ _radius_ dim1 dim2 dim3);
41329      merge WORK.Clus_temp WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_temp WORK.Clus_mds;
41330      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set WORK.CLUS_TEMP.
NOTE: There were 6 observations read from the data set WORK.CLUS_MDS.
NOTE: The data set WORK.CLUS_MDS has 6 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41331      goptions reset=all device=PNG;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG;
41332      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
41333      title1 "%sysfunc(sasmsg(sashelp.dmine, rpt_ClusterDistance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title1 "Proximidades clúster";
41334      %plotit(data=WORK.Clus_mds, datatype=mds, radii=_radius_, labelvar=_idvar_, symtype=circle, symbols='*', gout=WORK.Clus, gname=DISTANCE, gopts2=nodisplay, gopts=device=GIF, gopplot=cback=white, titlecol=black, labelcol=black, tickcol=black,
MPRINT(EM_DIAGRAM):   *------debugging routine to dump out macro variables------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):  *=========================== Macro Start =============================;
41335         framecol=black, post=C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD14480_MIIKYMEDIA_\Prc2\plotit.ps);
MPRINT(PLOTIT):   options nonotes;
MPRINT(PLOTIT):   options missing='.';
MPRINT(PLOTIT):   options noserror;
MPRINT(PLOTIT):   options serror;
MPRINT(PLOTIT):   *------store starting time, initialize a few variables-------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length name $ 8 __debug value $ 500 glob $ 32767;
MPRINT(PLOTIT):   __time = datetime();
MPRINT(PLOTIT):   call symput('start',compress(put(__time,best15.)));
MPRINT(PLOTIT):   *------override parameters?-------;
MPRINT(PLOTIT):   glob = left(symget('plotitop'));
MPRINT(PLOTIT):   if glob ne ' ' then put 'Overridden Parameters:';
MPRINT(PLOTIT):   do while(glob ne ' ');
MPRINT(PLOTIT):   i = index(glob, '=');
MPRINT(PLOTIT):   name = substr(glob, 1, i - 1);
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   i = index(glob, ',');
MPRINT(PLOTIT):   if i = 0 then i = length(glob) + 1;
MPRINT(PLOTIT):   value = substr(glob, 1, i);
MPRINT(PLOTIT):   value = translate(value, ' ', ',');
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   put name +(-1) '=' value;
MPRINT(PLOTIT):   call symput(name, trim(value));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------debugging flags-------;
MPRINT(PLOTIT):   __debug = symget('debug');
MPRINT(PLOTIT):   call symput('dbyes' ,compress(put(index(__debug,'vars') ,3.)));
MPRINT(PLOTIT):   call symput('dbprint' ,compress(put(index(__debug,'dprint'),3.)));
MPRINT(PLOTIT):   call symput('dbtime' ,compress(put(index(__debug,'time') ,3.)));
MPRINT(PLOTIT):   call symput('dbmprint',compress(put(index(__debug,'mprint'),3.)));
MPRINT(PLOTIT):   if (sysprod('stat') + sysprod('graph')) ne 2 then do;
MPRINT(PLOTIT):   put 'ERROR: SAS/STAT and SAS/GRAPH must be licensed ' 'to run this macro.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('style') ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: STYLE= is not supported in this release of the macro.' / '       Use OPTIONS NOGSTYLE to get the old appearance.' / '       Typically, you should set a style ' 'on the ODS destination.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length s $ 20;
MPRINT(PLOTIT):   retain s ' ';
MPRINT(PLOTIT):   file print;
MPRINT(PLOTIT):   set sashelp.vdest;
MPRINT(PLOTIT):   notb = style ne ' ';
MPRINT(PLOTIT):   style = lowcase(style);
MPRINT(PLOTIT):   if style eq 'listing' and s eq ' ' then call symputx('style', style, 'L');
MPRINT(PLOTIT):   else if style ne 'listing' and notb then do;
MPRINT(PLOTIT):   if s eq ' ' then s = style;
MPRINT(PLOTIT):   else if style ne s then do;
MPRINT(PLOTIT):   file log;
MPRINT(PLOTIT):   put 'ERROR: Multiple non-listing destinations with ' 'multiple ' 'styles ' 'are ' 'open.';
MPRINT(PLOTIT):   call symput('abort', '2');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if s ne ' ' then call symputx('style', s, 'L');
MPRINT(PLOTIT):   if _error_ then call symput('abort', '1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   *------mention var names for ordinary SAS syntax check-------;
MPRINT(PLOTIT):   retain _idvar_ __junk 0;
MPRINT(PLOTIT):   array __1 _idvar_ __junk;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(symget('labelvar')) > 67 or length(symget('symvar')) > 67 or length(symget('typevar')) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store current linesize and pagesize to restore later------;
MPRINT(PLOTIT):   length __ls __ps __var sysscp $ 8 ;
MPRINT(PLOTIT):   __num = getoption('number');
MPRINT(PLOTIT):   __ls = getoption('linesize');
MPRINT(PLOTIT):   __ps = getoption('pagesize');
MPRINT(PLOTIT):   __lab = getoption('label');
MPRINT(PLOTIT):   __var = getoption('validvarname');
MPRINT(PLOTIT):   __page = input(__ps, 8.);
MPRINT(PLOTIT):   if __page < 200 then __logps = __page + 1;
MPRINT(PLOTIT):   else __logps = 200;
MPRINT(PLOTIT):   if __logps < 20 then __logps = 20;
MPRINT(PLOTIT):   call symput('v7' , put(index(__var, '6') eq 0, 1.));
MPRINT(PLOTIT):   call symput('restornum',compress(__num));
MPRINT(PLOTIT):   call symput('restorla', compress(__lab));
MPRINT(PLOTIT):   call symput('restorls', compress(__ls));
MPRINT(PLOTIT):   call symput('restorps', compress(__ps));
MPRINT(PLOTIT):   call symput('logps' , compress(put(__logps, best8.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options label;
MPRINT(PLOTIT):   *------start parameter checking, initialization------;
MPRINT(PLOTIT):   *------initialization------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length data f1-f11 $ 72 name $ 70 post opts datatype plotvars $ 500 filepref $ 32;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------change other options based on GSTYLE/NOGSTYLE------;
MPRINT(PLOTIT):   if upcase(symget('style')) ne ' ' then do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'none');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LBFh');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'swiss');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LRTBFlb');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   datatype = upcase(symget('datatype'));
MPRINT(PLOTIT):   *------start setting up background color, border------;
MPRINT(PLOTIT):   opts = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('noback', put(index(opts, 'noback') ge 1, 1.));
MPRINT(PLOTIT):   if symget('noback') eq '1' then call symput('cframe', ' ');
MPRINT(PLOTIT):   if index(opts, 'noborder') then b = '0';
MPRINT(PLOTIT):   else if index(opts, 'border') then b = '1';
MPRINT(PLOTIT):   else if upcase(symget('style')) eq ' ' then b = '0';
MPRINT(PLOTIT):   else b = '1';
MPRINT(PLOTIT):   call symput('border', b);
MPRINT(PLOTIT):   *------initialize some macro variables------;
MPRINT(PLOTIT):   call symput('onetype','1');
MPRINT(PLOTIT):   call symput('singular','1e-8');
MPRINT(PLOTIT):   call symput('allblank','1');
MPRINT(PLOTIT):   call symput('botblank','0');
MPRINT(PLOTIT):   call symput('nlines' ,'0');
MPRINT(PLOTIT):   call symput('symnumer','0');
MPRINT(PLOTIT):   call symput('typenum' ,'0');
MPRINT(PLOTIT):   call symput('search' ,' ');
MPRINT(PLOTIT):   call symput('actualls','-1');
MPRINT(PLOTIT):   call symput('symdummy','#');
MPRINT(PLOTIT):   call symput('paintcol',' ');
MPRINT(PLOTIT):   call symput('paintmin','.');
MPRINT(PLOTIT):   call symput('paintmax','.');
MPRINT(PLOTIT):   call symput('paintnum','0');
MPRINT(PLOTIT):   call symput('ncontour','0');
MPRINT(PLOTIT):   call symput('hcontour','0');
MPRINT(PLOTIT):   call symput('vcontour','0');
MPRINT(PLOTIT):   call symput('hcondir ','0');
MPRINT(PLOTIT):   call symput('vcondir ','0');
MPRINT(PLOTIT):   call symput('looklist','0');
MPRINT(PLOTIT):   call symput('sizsquar','1');
MPRINT(PLOTIT):   call symput('ntitles' ,'0');
MPRINT(PLOTIT):   call symput('device' ,symget('sysdevic'));
MPRINT(PLOTIT):   call symput('datatype',trim(datatype));
MPRINT(PLOTIT):   call symput('listtitl','*** Wrapped Listing of Point Locations ***');
MPRINT(PLOTIT):   *------set vector scale factor------;
MPRINT(PLOTIT):   name = ' ';
MPRINT(PLOTIT):   do i = 5 to 2 by -1;
MPRINT(PLOTIT):   if name = ' ' then name = scan(datatype,i,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if name = ' ' or nmiss(input(name,?? 32.)) then name = '1';
MPRINT(PLOTIT):   call symput('biplot',trim(name));
MPRINT(PLOTIT):   *------make sure there are input data------;
MPRINT(PLOTIT):   data = left(upcase(symget('data')));
MPRINT(PLOTIT):   if data in (' ' '_LAST_') then do;
MPRINT(PLOTIT):   data = symget('syslast');
MPRINT(PLOTIT):   call symput('data',trim(data));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if data = '_NULL_' then do;
MPRINT(PLOTIT):   put 'ERROR: No input data set.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default file name------;
MPRINT(PLOTIT):   post = symget('post');
MPRINT(PLOTIT):   if post = ' ' then do;
MPRINT(PLOTIT):   sysscp = symget('sysscp');
MPRINT(PLOTIT):   filepref = symget('filepref');
MPRINT(PLOTIT):   if filepref = ' ' then filepref = 'sasplot';
MPRINT(PLOTIT):   if sysscp = 'CMS' then post = trim(filepref) || ' ' || 'ps';
MPRINT(PLOTIT):   else if sysscp =: 'VMS' or sysscp = 'WIN' or sysscp = 'OS2' then post = trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   else post = '.' || trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('post', trim(post));
MPRINT(PLOTIT):   *------some options cannot have null values------;
MPRINT(PLOTIT):   if symget('out') = ' ' then call symput('out' ,'anno');
MPRINT(PLOTIT):   if symget('tempdat1') = ' ' then call symput('tempdat1','tempdat1');
MPRINT(PLOTIT):   if symget('tempdat2') = ' ' then call symput('tempdat2','tempdat2');
MPRINT(PLOTIT):   if symget('tempdat3') = ' ' then call symput('tempdat3','tempdat3');
MPRINT(PLOTIT):   if symget('tempdat4') = ' ' then call symput('tempdat4','tempdat4');
MPRINT(PLOTIT):   if symget('tempdat5') = ' ' then call symput('tempdat5','tempdat5');
MPRINT(PLOTIT):   if symget('tempdat6') = ' ' then call symput('tempdat6','tempdat6');
MPRINT(PLOTIT):   if symget('regdat') = ' ' then call symput('regdat' ,'regdat');
MPRINT(PLOTIT):   if symget('preproc') = ' ' then call symput('preproc' ,'preproc');
MPRINT(PLOTIT):   if symget('extraobs') = ' ' then call symput('extraobs','extraobs');
MPRINT(PLOTIT):   if symget('radii') = ' ' then call symput('radii' ,'1, 2');
MPRINT(PLOTIT):   if symget('cirsegs') = ' ' then call symput('cirsegs' ,'.1');
MPRINT(PLOTIT):   if symget('cursegs') = ' ' then call symput('cursegs' ,'200');
MPRINT(PLOTIT):   if symget('maxiter') = ' ' then call symput('maxiter' ,'15');
MPRINT(PLOTIT):   if symget('lsinc') = ' ' then call symput('lsinc' ,'15');
MPRINT(PLOTIT):   if symget('place') = ' ' then call symput('place' ,'2 search');
MPRINT(PLOTIT):   if symget('symlen') = ' ' then call symput('symlen' ,'1');
MPRINT(PLOTIT):   if symget('ls') = ' ' then call symput('ls','compute search');
MPRINT(PLOTIT):   if symget('maxokpen') = ' ' then call symput('maxokpen','0');
MPRINT(PLOTIT):   if symget('ticklen') = ' ' then call symput('ticklen' ,'1.5');
MPRINT(PLOTIT):   if symget('tickfor') = ' ' then call symput('tickfor' ,'32.');
MPRINT(PLOTIT):   if symget('hnobs') = ' ' then call symput('hnobs' ,'0');
MPRINT(PLOTIT):   if symget('vnobs') = ' ' then call symput('vnobs' ,'0');
MPRINT(PLOTIT):   *------is radii a variable name?------;
MPRINT(PLOTIT):   name = upcase(substr(left(symget('radii')),1,1));
MPRINT(PLOTIT):   call symput('radname', put('A' <= name <= 'Z' or name = '_' or name = '"' or name = "'", 1.));
MPRINT(PLOTIT):   *------always use a formchar------;
MPRINT(PLOTIT):   call symput('procopts', trim(symget('procopts')) || " formchar='|----|+|---'");
MPRINT(PLOTIT):   *------was TYPES= specified?------;
MPRINT(PLOTIT):   call symput('typespec', put(symget('types') ne ' ',1.));
MPRINT(PLOTIT):   *------set default plotvars------;
MPRINT(PLOTIT):   plotvars = symget('plotvars');
MPRINT(PLOTIT):   if plotvars = ' ' then do;
MPRINT(PLOTIT):   if index(datatype,'MDS') or index(datatype,'MCA') or index(datatype,'ROW') or index(datatype,'COLUMN') or index(datatype,'CORRESP') then plotvars = 'Dim2 Dim1';
MPRINT(PLOTIT):   else if index(datatype,'MDPREF') or index(datatype,'VECTOR') or index(datatype,'IDEAL') then plotvars = 'Prin2 Prin1';
MPRINT(PLOTIT):   call symput('plotvars',trim(plotvars));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for conflicting data set names------;
MPRINT(PLOTIT):   f1 = left(upcase(symget('data')));
MPRINT(PLOTIT):   f2 = left(upcase(symget('out')));
MPRINT(PLOTIT):   f3 = left(upcase(symget('tempdat1')));
MPRINT(PLOTIT):   f4 = left(upcase(symget('tempdat2')));
MPRINT(PLOTIT):   f5 = left(upcase(symget('tempdat3')));
MPRINT(PLOTIT):   f6 = left(upcase(symget('tempdat4')));
MPRINT(PLOTIT):   f7 = left(upcase(symget('tempdat5')));
MPRINT(PLOTIT):   f8 = left(upcase(symget('tempdat6')));
MPRINT(PLOTIT):   f9 = left(upcase(symget('preproc')));
MPRINT(PLOTIT):   f10 = left(upcase(symget('extraobs')));
MPRINT(PLOTIT):   f11 = left(upcase(symget('regdat')));
MPRINT(PLOTIT):   opts = 'DATA OUT TEMPDAT1 TEMPDAT2 TEMPDAT3 TEMPDAT4 TEMPDAT5 ' || 'TEMPDAT6 PREPROC EXTRAOBS REGDAT';
MPRINT(PLOTIT):   array f[11] f1-f11;
MPRINT(PLOTIT):   do i = 1 to 11;
MPRINT(PLOTIT):   if f[i] =: 'WORK.' then f[i] = substr(f[i],6);
MPRINT(PLOTIT):   __name = f[i];
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   f[i] = __name;
MPRINT(PLOTIT):   do j = 1 to (i - 1);
MPRINT(PLOTIT):   if f[i] = f[j] then do;
MPRINT(PLOTIT):   oi = scan(opts,i,' ');
MPRINT(PLOTIT):   oj = scan(opts,j,' ');
MPRINT(PLOTIT):   put 'ERROR: Data sets ' oi +(-1) '=' f[i] 'and ' oj +(-1) '=' f[j] 'must be different.';
MPRINT(PLOTIT):   if oj = 'DATA' then put 'WARNING: You may have not specified DATA=.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------store input data set variable names------;
MPRINT(PLOTIT):   proc contents data=WORK.Clus_mds noprint out=tempdat1;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort data=tempdat1(keep=varnum type name);
MPRINT(PLOTIT):   by varnum;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------look for the type variable, plot variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length tvname vplotvar hplotvar upname vnormvar hnormvar pnormvar snormvar $ 70 __list plotvars __name $ 500 __c $ 1;
MPRINT(PLOTIT):   retain tvname vplotvar hplotvar hnormvar vnormvar pnormvar snormvar ' ' ok 1 vfound hfound pfound sfound 0;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   f = (index(symget('datatype'), 'FUNCTION') or index(upcase(symget('symtype')), 'FUNCTION'));
MPRINT(PLOTIT):   call symput('functype', put(f, 1.));
MPRINT(PLOTIT):   __name = symget('typevar');
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   tvname = __name;
MPRINT(PLOTIT):   __list = symget('plotvars');
MPRINT(PLOTIT):   __n = 1;
MPRINT(PLOTIT):   plotvars = __list;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   vnormvar = __name;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   hnormvar = __name;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   pfound = (lowcase(__name) eq '_blank_' or __name eq ' ');
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   pnormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   sfound = (lowcase(__name) eq '_symbol_' or __name eq ' ' or lowcase(__name) eq "'00'x" or lowcase(__name) eq '"00"x');
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   snormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __list = symget('paint');
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   call symput('paintvar',trim(__name));
MPRINT(PLOTIT):   call symput('paint' ,trim(__list));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   if upname = tvname or (tvname = ' ' and upname = '_TYPE_') then do;
MPRINT(PLOTIT):   if tvname = ' ' then call symput('typevar','_type_');
MPRINT(PLOTIT):   if (type = 1) then call symput('typenum','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------plotting variables must be numeric------;
MPRINT(PLOTIT):   if (upname = hnormvar or upname = vnormvar) and type = 2 then do;
MPRINT(PLOTIT):   put 'ERROR: PLOTVARS=' plotvars 'must be numeric.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default plotting variables if not set yet------;
MPRINT(PLOTIT):   if type = 1 then do;
MPRINT(PLOTIT):   if hplotvar = ' ' then do;
MPRINT(PLOTIT):   hplotvar = name;
MPRINT(PLOTIT):   hnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if vplotvar = ' ' then do;
MPRINT(PLOTIT):   vplotvar = name;
MPRINT(PLOTIT):   vnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------make sure axis variables are found------;
MPRINT(PLOTIT):   if upname = hnormvar then do;
MPRINT(PLOTIT):   hfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = vnormvar then do;
MPRINT(PLOTIT):   vfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = pnormvar then pfound = 1;
MPRINT(PLOTIT):   if upname = snormvar then sfound = 1;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   call symput('vplotvar',trim(vplotvar));
MPRINT(PLOTIT):   call symput('hplotvar',trim(hplotvar));
MPRINT(PLOTIT):   __list = trim(hplotvar) || ' ' || trim(vplotvar);
MPRINT(PLOTIT):   call symput('plotvars',trim(hplotvar) || ' ' || trim(vplotvar));
MPRINT(PLOTIT):   name = 'A' || vplotvar;
MPRINT(PLOTIT):   call symput('appvar1',trim(name));
MPRINT(PLOTIT):   if vplotvar = ' ' or hplotvar = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Not enough variables to plot.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not hfound then do;
MPRINT(PLOTIT):   put 'ERROR: Horizontal axis variable ' hplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not vfound then do;
MPRINT(PLOTIT):   put 'ERROR: Vertical axis variable ' vplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   put 'ERROR: Label variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   put 'ERROR: Symbol variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if hnormvar = '_TYPE_' or vnormvar = '_TYPE_' then put 'WARNING: _TYPE_ is one of the axis variables.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to length(__name);
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   namescan: * Returns nth name from a list. * Input: __list, __n * Output: __list, (trashed) * __name * Sample usage: * __list = 'a "b"n "C d"N d';
MPRINT(PLOTIT):   * __n = 2;
MPRINT(PLOTIT):   * link namescan;
MPRINT(PLOTIT):   * Creates: __name = '"b"n' * Notes: __name must have a length of at least 67. * a much longer length (say > 256) helps guard * against long, blank padded n-literals.;
MPRINT(PLOTIT):   __list = left(__list);
MPRINT(PLOTIT):   do __i = 1 to __n;
MPRINT(PLOTIT):   __c = substr(__list, 1, 1);
MPRINT(PLOTIT):   if trim(__c) in ("'", '"') then do;
MPRINT(PLOTIT):   __e = 0;
MPRINT(PLOTIT):   __len = length(__list);
MPRINT(PLOTIT):   do __k = 2 to __len until(__e);
MPRINT(PLOTIT):   if upcase(substr(__list, __k, 2)) in ("''", '""') then __k + 1;
MPRINT(PLOTIT):   else if upcase(substr(__list, __k, 2)) = compress(__c || 'N') then __e = __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else __e = index(__list, ' ') - 1;
MPRINT(PLOTIT):   if __e < 1 then __e = length(__list);
MPRINT(PLOTIT):   __name = substr(__list, 1, __e);
MPRINT(PLOTIT):   __list = left(substr(__list, __e + 2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(__name) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __list __n __i __k __len __name __c __e;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------generate TYPES= list from data?------;
MPRINT(PLOTIT):   *------preliminary preprocessing that changes the data------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   set WORK.Clus_mds;
MPRINT(PLOTIT):   if n(Dim2,Dim1) = 2;
MPRINT(PLOTIT):   *------eliminate anti-ideal points------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------get colors from style------;
MPRINT(PLOTIT):   data tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   length w c $ 20 n 8;
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Set defaults based on options (from the pre-style days);
MPRINT(PLOTIT):   data tempdat6;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   w = 'parent      ';
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   c = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gaxis       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('framecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gborderlines';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcfit       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('curvecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'glabel      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('labelcol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gtext       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('titlecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gwalls      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('cframe');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata1     ';
MPRINT(PLOTIT):   n = 1;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata2     ';
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata3     ';
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata4     ';
MPRINT(PLOTIT):   n = 4;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata5     ';
MPRINT(PLOTIT):   n = 5;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata6     ';
MPRINT(PLOTIT):   n = 6;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata7     ';
MPRINT(PLOTIT):   n = 7;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata8     ';
MPRINT(PLOTIT):   n = 8;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata9     ';
MPRINT(PLOTIT):   n = 9;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata10    ';
MPRINT(PLOTIT):   n = 10;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata11    ';
MPRINT(PLOTIT):   n = 11;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata12    ';
MPRINT(PLOTIT):   n = 12;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Get values from style and style parents up to four levels;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.listing / file="C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD14480_MIIKYMEDIA_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat2(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD14480_MIIKYMEDIA_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and 
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.default / file="C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD14480_MIIKYMEDIA_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD14480_MIIKYMEDIA_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and 
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   merge tempdat6 tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length list $ 200;
MPRINT(PLOTIT):   retain list ' ';
MPRINT(PLOTIT):   set tempdat3 end=eof;
MPRINT(PLOTIT):   if w eq 'gaxis' then do;
MPRINT(PLOTIT):   if symget('framecol') eq ' ' then call symputx('framecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gtext' then do;
MPRINT(PLOTIT):   if symget('titlecol') eq ' ' then call symputx('titlecol', c, 'L');
MPRINT(PLOTIT):   if symget('tickcol') eq ' ' then call symputx('tickcol' , c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'glabel' then do;
MPRINT(PLOTIT):   if symget('labelcol') eq ' ' then call symputx('labelcol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gcfit' then do;
MPRINT(PLOTIT):   if symget('curvecol') eq ' ' then call symputx('curvecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not 0 and w eq 'gwalls' and symget('cframe') eq ' ' and c ne '_undef_' then call symputx('cframe', c, 'L');
MPRINT(PLOTIT):   else if 1 and w eq 'gborderlines' then call symput('border', c);
MPRINT(PLOTIT):   if 1 and w =: 'gcdata' then do;
MPRINT(PLOTIT):   if n = 1 then n = .;
MPRINT(PLOTIT):   else if n = . then n = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(n);
MPRINT(PLOTIT):   list = trim(list) || ' ' || c;
MPRINT(PLOTIT):   list = compbl(list);
MPRINT(PLOTIT):   if eof then call symput('colors', compbl(list));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------more initializations------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length name symvar $ 70 color framecol titlecol labelcol tickcol curvecol monochro font size name1-name2 tsize $ 12 anele anele2 $ 16 word $ 24 list list2 datatype types colors symbols symcol symtype symfont symsize labcol labfont 
labsize britypes rgbtypes exttypes $ 500;
MPRINT(PLOTIT):   *------finalize border, border color------;
MPRINT(PLOTIT):   word = symget('border');
MPRINT(PLOTIT):   if word eq '1' then word = "black";
MPRINT(PLOTIT):   else if word eq '0' then word = ' ';
MPRINT(PLOTIT):   call symput('border', trim(word));
MPRINT(PLOTIT):   *------set default symbol variable------;
MPRINT(PLOTIT):   symvar = symget('symvar');
MPRINT(PLOTIT):   *------list of valid DATATYPE= values------;
MPRINT(PLOTIT):   array dts[15] corresp mca row column mdpref mdpref2 vector ideal mds curve curve2 function contour square symbol;
MPRINT(PLOTIT):   *------22 lists, 10 lists of ntypes elements, 9 single-element lists 3 longer lists------;
MPRINT(PLOTIT):   listn = 22;
MPRINT(PLOTIT):   listm = 10;
MPRINT(PLOTIT):   listo = 19;
MPRINT(PLOTIT):   array vars[22] $ types colors symbols symcol symtype symfont symsize labcol labfont labsize color framecol titlecol labelcol tickcol curvecol monochro font cframe britypes rgbtypes exttypes;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------check method------;
MPRINT(PLOTIT):   name = symget('method');
MPRINT(PLOTIT):   word = lowcase(compress(name,' 2'));
MPRINT(PLOTIT):   if not (word in ('gplot' 'print' 'plot' 'none')) then do;
MPRINT(PLOTIT):   put 'ERROR: METHOD=' name 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   call symput('method',trim(word));
MPRINT(PLOTIT):   if word = 'plot' then call symput('looklist', '1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------convert binary options ------;
MPRINT(PLOTIT):   list = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('diag' ,put(index(list,'diag') > 0,1.));
MPRINT(PLOTIT):   call symput('expand' ,put(index(list,'expand') > 0,1.));
MPRINT(PLOTIT):   call symput('closebord',put(index(list,'close') > 0,1.));
MPRINT(PLOTIT):   call symput('center' ,put(index(list,'nocenter') = 0,1.));
MPRINT(PLOTIT):   call symput('clip' ,put(index(list,'noclip') = 0,1.));
MPRINT(PLOTIT):   call symput('delete' ,put(index(list,'nodelete') = 0,1.));
MPRINT(PLOTIT):   call symput('linetext' ,put(index(list,'textline') = 0,1.));
MPRINT(PLOTIT):   call symput('squarplt' ,put(index(list,'square') > 0,1.));
MPRINT(PLOTIT):   print = (index(list,'noprint') = 0);
MPRINT(PLOTIT):   call symput('legend' ,put(index(list,'nolegend') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('history',put(index(list,'nohistory') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('code' ,put(index(list,'nocode') = 0 and print,1.));
MPRINT(PLOTIT):   *------make sure all options are recognized------;
MPRINT(PLOTIT):   list2 = 'noborder border close diag expand noclip nocode nodelete ' || 'nocenter noback nohistory nolegend noprint square textline';
MPRINT(PLOTIT):   do i = 1 to 13;
MPRINT(PLOTIT):   word = scan(list2,i);
MPRINT(PLOTIT):   j = index(list,trim(word));
MPRINT(PLOTIT):   if j then substr(list,j,length(word)) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: The following options are not recognized: ' list +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check INTERPOL=------;
MPRINT(PLOTIT):   list = lowcase(symget('interpol'));
MPRINT(PLOTIT):   call symput('intrtick',put((index(list,'tick') or not (index(list,'ls') or index(list,'no'))),1.));
MPRINT(PLOTIT):   call symput('intrls' ,put((index(list,'ls') or not index(list,'no')),1.));
MPRINT(PLOTIT):   call symput('hlogscal',put((index(list,'hlog') > 0),1.));
MPRINT(PLOTIT):   call symput('vlogscal',put((index(list,'vlog') > 0),1.));
MPRINT(PLOTIT):   *------parse the DATATYPE= option------;
MPRINT(PLOTIT):   datatype = symget('datatype');
MPRINT(PLOTIT):   list = datatype;
MPRINT(PLOTIT):   do i = 1 to 15;
MPRINT(PLOTIT):   call vname(dts[i],name);
MPRINT(PLOTIT):   j = index(datatype,trim(upcase(name)));
MPRINT(PLOTIT):   if j then substr(list,j,length(name)) = ' ';
MPRINT(PLOTIT):   dts[i] = (j ne 0);
MPRINT(PLOTIT):   call symput(name,compress(put(dts[i],1.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list = compress(list,'0123456789.e+-');
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid DATATYPE=' datatype +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------get the lists that must be quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   vars[i] = symget(name);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symtype = lowcase(symtype);
MPRINT(PLOTIT):   britypes = lowcase(britypes);
MPRINT(PLOTIT):   rgbtypes = lowcase(rgbtypes);
MPRINT(PLOTIT):   exttypes = lowcase(exttypes);
MPRINT(PLOTIT):   *-----make sure these are set------;
MPRINT(PLOTIT):   if font = ' ' then font = 'swiss';
MPRINT(PLOTIT):   tsize = symget('tsize');
MPRINT(PLOTIT):   if tsize = ' ' then do;
MPRINT(PLOTIT):   tsize = '1';
MPRINT(PLOTIT):   call symput('tsize','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------process DATATYPE= option------;
MPRINT(PLOTIT):   if datatype ne ' ' then do;
MPRINT(PLOTIT):   if contour then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' contour';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' solid';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' contour';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' contour';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if square then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' U';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' square';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' marker';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' square';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' square';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if function then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' function';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' function';
MPRINT(PLOTIT):   name = symget('labelvar');
MPRINT(PLOTIT):   if name = ' ' then call symput('labelvar','_blank_');
MPRINT(PLOTIT):   if symvar = ' ' then put 'WARNING: Null symbol variable ' 'specified with ' 'DATATYPE=function.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref or vector or ideal then types = trim(types) || ' SCORE';
MPRINT(PLOTIT):   if mdpref or vector or ideal or symbol then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if corresp or row or mca or column then do;
MPRINT(PLOTIT):   types = trim(types) || ' VAR OBS SUPVAR SUPOBS';
MPRINT(PLOTIT):   if row then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " '' * * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if column then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol vector symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " * '' * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' * * * *';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symsize = trim(symsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   symfont = trim(symfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   labsize = trim(labsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   labfont = trim(labfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref then do;
MPRINT(PLOTIT):   types = trim(types) || ' CORR';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref2 then labsize = trim(labsize) || ' ' || compress(put(input(tsize, ?? 32.) * 0.75, best8.));
MPRINT(PLOTIT):   else labsize = trim(labsize) || ' 0';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   size = compress(put(input(tsize,?? 32.) * 1.5, best8.));
MPRINT(PLOTIT):   if vector then do;
MPRINT(PLOTIT):   types = trim(types) || ' MCOEFFI';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ideal then do;
MPRINT(PLOTIT):   types = trim(types) || ' MPOINT';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' +';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' circle';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mds then do;
MPRINT(PLOTIT):   types = trim(types) || ' CONFIG';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (mds or corresp or mca or row or column or mdpref or mdpref2 or vector or ideal) and symget('label') = ' ' then call symput('label','typical');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ in case these were only specified in the symtype------;
MPRINT(PLOTIT):   if index(symtype, 'contour' ) then call symput('contour' , '1');
MPRINT(PLOTIT):   if index(symtype, 'square' ) then call symput('square' , '1');
MPRINT(PLOTIT):   *------set colors, other defaults------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   if colors = ' ' then colors = color;
MPRINT(PLOTIT):   if framecol = ' ' then framecol = color;
MPRINT(PLOTIT):   if titlecol = ' ' then titlecol = color;
MPRINT(PLOTIT):   if labelcol = ' ' then labelcol = color;
MPRINT(PLOTIT):   if tickcol = ' ' then tickcol = color;
MPRINT(PLOTIT):   if curvecol = ' ' then curvecol = color;
MPRINT(PLOTIT):   if symtype = ' ' then symtype = 'symbol';
MPRINT(PLOTIT):   if symsize = ' ' then symsize = tsize;
MPRINT(PLOTIT):   if symfont = ' ' then symfont = font;
MPRINT(PLOTIT):   if labsize = ' ' then labsize = tsize;
MPRINT(PLOTIT):   if labfont = ' ' then labfont = font;
MPRINT(PLOTIT):   if exttypes = ' ' then exttypes = "''";
MPRINT(PLOTIT):   if rgbtypes = ' ' then rgbtypes = "''";
MPRINT(PLOTIT):   labcol = trim(labcol) || ' ' || colors;
MPRINT(PLOTIT):   symcol = trim(symcol) || ' ' || colors;
MPRINT(PLOTIT):   *------default symbols when unspecified------;
MPRINT(PLOTIT):   if index(symtype, 'symbol') and symvar eq '_symbol_' and symbols = ' ' then do;
MPRINT(PLOTIT):   word = scan(symtype, 1, ' ');
MPRINT(PLOTIT):   do i = 1 to 500 while(word ne ' ');
MPRINT(PLOTIT):   if index(word, 'symbol') then symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   else symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   word = scan(symtype, i + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symbols = ' ' then symbols = "''";
MPRINT(PLOTIT):   *------count the number of types------;
MPRINT(PLOTIT):   if types = ' ' then types = "''";
MPRINT(PLOTIT):   do until(word eq ' ');
MPRINT(PLOTIT):   ntypes + 1;
MPRINT(PLOTIT):   word = scan(types, ntypes + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   holdntyp = ntypes;
MPRINT(PLOTIT):   *------output number of observation types------;
MPRINT(PLOTIT):   call symput('ntypes',compress(put(ntypes,3.)));
MPRINT(PLOTIT):   *------output lists, make sure they are quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   if i > listm then ntypes = 1;
MPRINT(PLOTIT):   if i > listo then ntypes = 200;
MPRINT(PLOTIT):   link qlist;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   ntypes = holdntyp;
MPRINT(PLOTIT):   *------output sizes for squares------;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   word = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(word, 'square') then call symput('sizsquar', compress(scan(symsize, i, ' '), " '"||'"'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for constant symvar with vectors------;
MPRINT(PLOTIT):   symcon = (symvar = ' ' or (compress(symvar,"'"||'"') ne symvar));
MPRINT(PLOTIT):   if symcon then do;
MPRINT(PLOTIT):   i = length(symvar);
MPRINT(PLOTIT):   if i > 3 then do;
MPRINT(PLOTIT):   word = upcase(substr(symvar, i - 1));
MPRINT(PLOTIT):   if word in ('"N', "'N") then symcon = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('symcon',put(symcon,1.));
MPRINT(PLOTIT):   if symcon and index(symtype,'vector') then do;
MPRINT(PLOTIT):   put 'ERROR: Constant SYMVAR= is not allowed with vectors.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse RGBROUND= option------;
MPRINT(PLOTIT):   list = symget('rgbround');
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   do i = 1 to 4;
MPRINT(PLOTIT):   name = scan(list, i, ' ');
MPRINT(PLOTIT):   num = input(name, ?? 32.);
MPRINT(PLOTIT):   if nmiss(num) then num = .;
MPRINT(PLOTIT):   if i > 1 and num <= 0 then num = 1;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || compress(put(num,best8.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('rgbround',trim(left(list2)));
MPRINT(PLOTIT):   *------anything specified for the BRIGHT= option?------;
MPRINT(PLOTIT):   if symget('bright') = ' ' then do;
MPRINT(PLOTIT):   britypes = ' ';
MPRINT(PLOTIT):   call symput('britypes', compress(britypes));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------anything specified for the PAINT= option?------;
MPRINT(PLOTIT):   list = left(symget('paint'));
MPRINT(PLOTIT):   if symget('paintvar') = ' ' then do;
MPRINT(PLOTIT):   rgbtypes = ' ';
MPRINT(PLOTIT):   call symput('rgbtypes', compress(rgbtypes));
MPRINT(PLOTIT):   if contour then put 'WARNING: PAINT= was not specified ' 'with a contour plot.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse PAINT= option------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------count list elements------;
MPRINT(PLOTIT):   do n = 1 to 500 until(name2 = ' ');
MPRINT(PLOTIT):   name2 = scan(list,n,' ');
MPRINT(PLOTIT):   if n(input(name2,?? 32.)) then name2 = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   n = n - 1;
MPRINT(PLOTIT):   *------set default, when only a variable name is specified------;
MPRINT(PLOTIT):   if n < 1 then do;
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   list = 'blue magenta red';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if n < 2 then do;
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   name2 = scan(list,1,' ');
MPRINT(PLOTIT):   list = compress(name2) || ' ' || compress(name2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('paintcol', trim(list));
MPRINT(PLOTIT):   *------store, check number of list elements------;
MPRINT(PLOTIT):   call symput('paintnum',compress(put(n,3.)));
MPRINT(PLOTIT):   *------table of recognized colors and their hex rgb------;
MPRINT(PLOTIT):   allcols = 'BLACK--BLUE---BROWN--GRAY---GREEN--OLIVE--ORANGE-' || 'PINK---PURPLE-RED----VIOLET-WHITE--YELLOW-MAGENTA' || 'CYAN---';
MPRINT(PLOTIT):   hexcols = '000000 0000ff a05000 808080 00ff00 2a8307 ff8000 ' || 'ff0080 703070 ff0000 b090d0 ffffff ffff00 ff00ff ' || '00ffff ';
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   *------construct list of (decimal) RGB values------;
MPRINT(PLOTIT):   do j = 1 to 3;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   color = upcase(scan(list, i, ' '));
MPRINT(PLOTIT):   k = index(allcols,trim(color));
MPRINT(PLOTIT):   *------grab hex code for name, or parse CXrrggbb------;
MPRINT(PLOTIT):   if k then name1 = substr(hexcols,k + (j - 1) * 2,2);
MPRINT(PLOTIT):   else name1 = substr(color ,(j - 1) * 2 + 3,2);
MPRINT(PLOTIT):   *------check for validity------;
MPRINT(PLOTIT):   num = input(name1,?? hex2.);
MPRINT(PLOTIT):   if nmiss(num) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= color of ' color 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 4;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = compress(put(num,3.));
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 3;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------build list------;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || trim(name1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store line segment end points in list if specified------;
MPRINT(PLOTIT):   list2 = left(list2);
MPRINT(PLOTIT):   name1 = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   name1 = scan(list,n + i,' ');
MPRINT(PLOTIT):   if nmiss(input(name1,?? 32.)) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value of ' name1 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || name1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = scan(list,2 * n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store processed PAINT= list------;
MPRINT(PLOTIT):   call symput('paint',trim(list2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if input(symget('legend'), ?? 32.) then do;
MPRINT(PLOTIT):   awidth = 9;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = scan(types, i, ' ');
MPRINT(PLOTIT):   awidth = max(awidth, length(anele) + 1);
MPRINT(PLOTIT):   awidth = max(awidth, length(scan(symbols, i, ' ')) + 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   cols = min(15 + awidth * ntypes, 256);
MPRINT(PLOTIT):   cols = 15 + floor((cols - 15) / awidth) * awidth;
MPRINT(PLOTIT):   m = floor((256 - cols) / 2);
MPRINT(PLOTIT):   cols = cols - 1;
MPRINT(PLOTIT):   put / +m 'Types Legend  |' @@;
MPRINT(PLOTIT):   list = types;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   substr(list, 15, 1) = '+';
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   put +m 'Symbol Types  |' @@;
MPRINT(PLOTIT):   list = symtype;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbols       |' @@;
MPRINT(PLOTIT):   list = symbols;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Colors |' @@;
MPRINT(PLOTIT):   list = symcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Label  Colors |' @@;
MPRINT(PLOTIT):   list = labcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Symbol Sizes  |' @@;
MPRINT(PLOTIT):   list = symsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Sizes  |' @@;
MPRINT(PLOTIT):   list = labsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Fonts  |' @@;
MPRINT(PLOTIT):   list = symfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Fonts  |' @@;
MPRINT(PLOTIT):   list = labfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legend: *------print legend------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legendc: *------print legend for colors------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele2 = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(rgbtypes, trim(anele2)) or index(britypes, trim(anele2)) then anele = ' ';
MPRINT(PLOTIT):   else anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   printele: *------print one table element------;
MPRINT(PLOTIT):   j = j + 1;
MPRINT(PLOTIT):   if (15 + awidth * j) > 256 then do;
MPRINT(PLOTIT):   put / +(m+14) '|' @@;
MPRINT(PLOTIT):   j = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put @(m + 17 + (j - 1) * awidth) anele $ @@;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   qlist: *------quote the elements of a list------;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   list = vars[i];
MPRINT(PLOTIT):   charv = not index(upcase(name),'SIZE');
MPRINT(PLOTIT):   word = scan(list,1,' ');
MPRINT(PLOTIT):   do n = 1 to ntypes while(word ne ' ');
MPRINT(PLOTIT):   if charv then do;
MPRINT(PLOTIT):   word = compress("'" || compress(word,"'"||'"') || "'");
MPRINT(PLOTIT):   if not index(substr(word,2),"'") then do;
MPRINT(PLOTIT):   put 'ERROR: The list element ' name +(-1) '=' word 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (length(list2) + length(word)) >= 500 then do;
MPRINT(PLOTIT):   put 'ERROR: The list ' name +(-1) '=' list2 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || word;
MPRINT(PLOTIT):   word = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if word = ' ' and i <= listm then word = scan(list2,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput(name,trim(left(list2)));
MPRINT(PLOTIT):   vars[i] = list2;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;

                                                                                                                    Types Legend  | CONFIG
                                                                                                                    --------------+---------
                                                                                                                    Symbol Types  | circle
                                                                                                                    Symbols       | *
                                                                                                                    Symbol Colors | cx000000
                                                                                                                    Label  Colors | cx000000
                                                                                                                    Symbol Sizes  | 1
                                                                                                                    Label  Sizes  | 1
                                                                                                                    Symbol Fonts  | none
                                                                                                                    Label  Fonts  | none
                                                                                                                    ------------------------
MPRINT(PLOTIT):   *------inertias for correspondence analysis variable labels------;
MPRINT(PLOTIT):   *------check, set remaining variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   length __name setl labelvar tvname symvar paintvar upname $ 70;
MPRINT(PLOTIT):   retain setl labelvar tvname symvar paintvar ' ' paintfou typefoun 0 ok 1;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   *------get current names------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   tvname = dequote(symget('typevar'));
MPRINT(PLOTIT):   labelvar = dequote(symget('labelvar'));
MPRINT(PLOTIT):   paintvar = dequote(symget('paintvar'));
MPRINT(PLOTIT):   if 0 then symvar = _symbol_;
MPRINT(PLOTIT):   else symvar = dequote(symget('symvar'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------is the symbol variable numeric or character?------;
MPRINT(PLOTIT):   if not 0 and upname = upcase(symvar) and type = 1 then call symput('symnumer','1');
MPRINT(PLOTIT):   *------find _type_ variable------;
MPRINT(PLOTIT):   if upname = upcase(tvname) then typefoun = 1;
MPRINT(PLOTIT):   *------find PAINT= variable------;
MPRINT(PLOTIT):   if upname = upcase(paintvar) and type = 1 then paintfou = 1;
MPRINT(PLOTIT):   *------find default label variable name------;
MPRINT(PLOTIT):   else if type = 2 and (setl = ' ' or upname ne '_TYPE_') then setl = name;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   if labelvar = ' ' and setl ne ' ' then labelvar = setl;
MPRINT(PLOTIT):   if labelvar = ' ' then labelvar = '_blank_';
MPRINT(PLOTIT):   __name = labelvar;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   call symput('labelvar', trim(__name));
MPRINT(PLOTIT):   *------assorted error checking------;
MPRINT(PLOTIT):   if not typefoun and tvname ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: TYPEVAR=' tvname 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not typefoun and input(symget('typespec'), ?? 32.) then do;
MPRINT(PLOTIT):   put 'ERROR: A type variable must be available ' 'when TYPES= ' 'is specified.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (paintvar = ' ' or paintfou) then do;
MPRINT(PLOTIT):   put 'ERROR: A numeric PAINT=' paintvar 'variable was not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to __len;
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find minima, maxima------;
MPRINT(PLOTIT):   proc means data=preproc noprint;
MPRINT(PLOTIT):   output out=tempdat1 max(Dim2 Dim1 )=vmax hmax min(Dim2 Dim1 )=vmin hmin;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set goptions------;
MPRINT(PLOTIT):   goptions nodisplay device=PNG cback=white device=GIF;
MPRINT(PLOTIT):   *------check some parameters for valid values, set up others------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length c $ 1 vplotvar hplotvar labelvar $ 70 opt $ 8 str place vecheadr vecheadw tinc device $ 12 outward search vechead ls $ 32 label plotreq plotopts upopts pl list labely labelx label $ 500 ind1 ind2 $ 35;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   call symput('somedata','0');
MPRINT(PLOTIT):   set tempdat1(drop=_type_);
MPRINT(PLOTIT):   call symput('somedata','1');
MPRINT(PLOTIT):   call symput('vinter', '.');
MPRINT(PLOTIT):   call symput('hinter', '.');
MPRINT(PLOTIT):   call symput('hslope', '.');
MPRINT(PLOTIT):   call symput('vslope', '.');
MPRINT(PLOTIT):   *------check missings------;
MPRINT(PLOTIT):   if n(vmin,hmin,vmax,hmax) < 4 then do;
MPRINT(PLOTIT):   put 'ERROR: At least one variable is all missing.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for nonpositive data with log scales------;
MPRINT(PLOTIT):   if (vmin <= 0 and 0) or (hmin <= 0 and 0) then do;
MPRINT(PLOTIT):   put "ERROR: Nonpositive data with INTERPOL=yes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store extend values------;
MPRINT(PLOTIT):   list = symget('extend');
MPRINT(PLOTIT):   call symput('close',compress(put(index(list,'close'),best3.)));
MPRINT(PLOTIT):   if nmiss(input(scan(list,1,' '),?? 32.)) then call symput('extendl',' ');
MPRINT(PLOTIT):   else call symput('extendl',scan(list,1,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,2,' '),?? 32.)) then call symput('extendr',' ');
MPRINT(PLOTIT):   else call symput('extendr',scan(list,2,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,3,' '),?? 32.)) then call symput('extendt',' ');
MPRINT(PLOTIT):   else call symput('extendt',scan(list,3,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,4,' '),?? 32.)) then call symput('extendb',' ');
MPRINT(PLOTIT):   else call symput('extendb',scan(list,4,' '));
MPRINT(PLOTIT):   *------make sure PAINT= minimum, maximum are stored------;
MPRINT(PLOTIT):   call symput('rgbround', trim(symget('rgbround')) || ' .');
MPRINT(PLOTIT):   *------compute (possibly adjusted) range------;
MPRINT(PLOTIT):   isavec = index(symget('symtype'),'vector');
MPRINT(PLOTIT):   if isavec then do;
MPRINT(PLOTIT):   vmin = min(0,vmin);
MPRINT(PLOTIT):   hmin = min(0,hmin);
MPRINT(PLOTIT):   vmax = max(0,vmax);
MPRINT(PLOTIT):   hmax = max(0,hmax);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   vmax = max(vmax,hmax);
MPRINT(PLOTIT):   hmax = vmax;
MPRINT(PLOTIT):   vmin = min(vmin,hmin);
MPRINT(PLOTIT):   hmin = vmin;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 and not 0 then range = vmax - vmin;
MPRINT(PLOTIT):   else if 0 and not 0 then range = hmax - hmin;
MPRINT(PLOTIT):   else range = max(vmax - vmin, hmax - hmin);
MPRINT(PLOTIT):   range = max(1e4 * 1e-8,range);
MPRINT(PLOTIT):   *------default increment, minima, maxima------;
MPRINT(PLOTIT):   inc = input(symget('inc'),?? 32.);
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   inc = 10 ** ceil(log10(range) - 1.0);
MPRINT(PLOTIT):   if range / inc >= 7.5 then inc = inc * 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   tinc = compress(put(inc,best12.));
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   put 'ERROR: Input data set is empty, constant, or corrupt.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('inc' ,trim(tinc));
MPRINT(PLOTIT):   call symput('hmax',compress(put(hmax,best15.)));
MPRINT(PLOTIT):   call symput('hmin',compress(put(hmin,best15.)));
MPRINT(PLOTIT):   call symput('vmax',compress(put(vmax,best15.)));
MPRINT(PLOTIT):   call symput('vmin',compress(put(vmin,best15.)));
MPRINT(PLOTIT):   *------construct plot request------;
MPRINT(PLOTIT):   vplotvar = symget('vplotvar');
MPRINT(PLOTIT):   hplotvar = symget('hplotvar');
MPRINT(PLOTIT):   plotopts = symget('plotopts');
MPRINT(PLOTIT):   labelvar = symget('labelvar');
MPRINT(PLOTIT):   upopts = upcase(plotopts);
MPRINT(PLOTIT):   plotreq = trim(vplotvar) || ' * ' || trim(hplotvar) || ' $ ' || trim(labelvar) || ' = _symbol_';
MPRINT(PLOTIT):   *------check for HREF= VREF= options------;
MPRINT(PLOTIT):   if index(upopts,'HREF') or index(upopts,'VREF') then put 'WARNING: HREF= and VREF= PLOT options are ignored.  ' 'Specify ' 'them as ' 'macro options ' 'instead.';
MPRINT(PLOTIT):   *------see if we need to generate a placement list------;
MPRINT(PLOTIT):   pl = ' ';
MPRINT(PLOTIT):   i = index(upopts,'PLACE');
MPRINT(PLOTIT):   if i then do;
MPRINT(PLOTIT):   pl = substr(plotopts,i);
MPRINT(PLOTIT):   if i > 1 then plotopts = substr(plotopts,1,i - 1);
MPRINT(PLOTIT):   else plotopts = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle horizontal ticks if not already specified------;
MPRINT(PLOTIT):   c = 'h';
MPRINT(PLOTIT):   maxim = hmax;
MPRINT(PLOTIT):   minim = hmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------handle vertical ticks if not already specified------;
MPRINT(PLOTIT):   c = 'v';
MPRINT(PLOTIT):   maxim = vmax;
MPRINT(PLOTIT):   minim = vmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------outward option------;
MPRINT(PLOTIT):   outward = symget('outward');
MPRINT(PLOTIT):   if outward ne 'none' then do;
MPRINT(PLOTIT):   if outward = ' ' and isavec then outward = symget('symdummy');
MPRINT(PLOTIT):   if outward ne ' ' then plotopts = trim(plotopts) || ' outward="' || compress(outward,"'"||'" ') || '"';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------box option------;
MPRINT(PLOTIT):   plotopts = trim(left(plotopts)) || ' box';
MPRINT(PLOTIT):   *------reference lines------;
MPRINT(PLOTIT):   list = symget('href');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' href=' || list;
MPRINT(PLOTIT):   list = symget('vref');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' vref=' || list;
MPRINT(PLOTIT):   *------set up vector heads------;
MPRINT(PLOTIT):   vechead = symget('vechead');
MPRINT(PLOTIT):   vecheadr = scan(vechead,1,' ');
MPRINT(PLOTIT):   vecheadw = scan(vechead,2,' ');
MPRINT(PLOTIT):   if vecheadw = ' ' then vecheadr = ' ';
MPRINT(PLOTIT):   *------determine graphics area------;
MPRINT(PLOTIT):   rc1 = ginit();
MPRINT(PLOTIT):   call gask('maxdisp',units,xmax,ymax,xpix,ypix,rc2);
MPRINT(PLOTIT):   call gask('device',device,rc3);
MPRINT(PLOTIT):   rc4 = gterm();
MPRINT(PLOTIT):   if rc1 or rc2 or rc3 or rc4 then do;
MPRINT(PLOTIT):   put 'ERROR: GASK call for XMAX= and YMAX= failed.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = xmax * 100;
MPRINT(PLOTIT):   ymax = ymax * 100;
MPRINT(PLOTIT):   if symget('unit') = 'in' then do;
MPRINT(PLOTIT):   xmax = xmax / 2.54;
MPRINT(PLOTIT):   ymax = ymax / 2.54;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = floor(xmax * 100) / 100;
MPRINT(PLOTIT):   ymax = floor(ymax * 100) / 100;
MPRINT(PLOTIT):   *------max horizontal graph size------;
MPRINT(PLOTIT):   if symget('xmax') = ' ' then call symput('xmax',compress(put(xmax,9.2)));
MPRINT(PLOTIT):   *-------max vertical graph size------;
MPRINT(PLOTIT):   if symget('ymax') = ' ' then call symput('ymax',compress(put(ymax,9.2)));
MPRINT(PLOTIT):   *------construct typical label------;
MPRINT(PLOTIT):   label = symget('label');
MPRINT(PLOTIT):   if label = 'typical' then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar,length(vplotvar),1);
MPRINT(PLOTIT):   ind2 = substr(hplotvar,length(hplotvar),1);
MPRINT(PLOTIT):   if not ('1' <= ind1 <= '9' and '1' <= ind2 <= '9') then label = ' ';
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   do i = length(vplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(vplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   do i = length(hplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(hplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind2 = substr(hplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------for correspondence analysis, ------;
MPRINT(PLOTIT):   *------put inertia percentages in labels------;
MPRINT(PLOTIT):   if labelx = ' ' then do;
MPRINT(PLOTIT):   labely = "Dimension " || compress(ind1);
MPRINT(PLOTIT):   labelx = "Dimension " || compress(ind2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   label = 'label ' || symget('vplotvar') || " = '" || trim(labely) || "' " || symget('hplotvar') || " = '" || trim(labelx) || "'";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------simple, imperfect, label statement check------;
MPRINT(PLOTIT):   label = left(label);
MPRINT(PLOTIT):   if label ne ' ' and compress(label,"'"||'="') = label then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid LABEL statement, LABEL=' label +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   str = upcase(scan(label,1));
MPRINT(PLOTIT):   if str ne 'LABEL' and str ne ' ' then label = 'label ' || label;
MPRINT(PLOTIT):   call symput('label' ,trim(label));
MPRINT(PLOTIT):   *------make sure we have britypes with BRIGHT= specified------;
MPRINT(PLOTIT):   if symget('bright') ne ' ' and symget('britypes') = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Null BRITYPES= is not ' 'permitted ' 'with ' "BRIGHT=.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up search parameters------;
MPRINT(PLOTIT):   ls = symget('ls');
MPRINT(PLOTIT):   if index(ls,'search') then do;
MPRINT(PLOTIT):   ls = scan(ls,1,' ');
MPRINT(PLOTIT):   if ls = 'compute' then search = 'compute';
MPRINT(PLOTIT):   else search = 'ls';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ls = ' ' or ls = 'compute' then ls = '.';
MPRINT(PLOTIT):   if pl = ' ' then place = symget('place');
MPRINT(PLOTIT):   else place = '.';
MPRINT(PLOTIT):   if index(place,'search') then do;
MPRINT(PLOTIT):   search = trim(search) || ' place';
MPRINT(PLOTIT):   place = scan(place,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if place = ' ' then place = '.';
MPRINT(PLOTIT):   *------see if we should store device------;
MPRINT(PLOTIT):   list = upcase(symget('gopprint'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopplot'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts2'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   *------output generated macro variables------;
MPRINT(PLOTIT):   call symput('search' ,trim(search));
MPRINT(PLOTIT):   call symput('ls' ,trim(ls));
MPRINT(PLOTIT):   call symput('place' ,trim(place));
MPRINT(PLOTIT):   call symput('plotopts',trim(plotopts));
MPRINT(PLOTIT):   call symput('plotreq' ,trim(plotreq));
MPRINT(PLOTIT):   call symput('pl' ,trim(pl));
MPRINT(PLOTIT):   call symput('vecheadr',trim(vecheadr));
MPRINT(PLOTIT):   call symput('vecheadw',trim(vecheadw));
MPRINT(PLOTIT):   call symput('device' ,trim(device));
MPRINT(PLOTIT):   *------check some parameters for valid values------;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadr;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadw;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='INC';
MPRINT(PLOTIT):   str=tinc;
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BIPLOT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='SYMLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 22;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='OFFSET';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TICKLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='ANTIIDEA';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -2;
MPRINT(PLOTIT):   max= 2;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CIRSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-4;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CURSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 20;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VTOH';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 3;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAKEFIT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='XMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='YMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='PS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 15;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXITER';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXOKPEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1e9;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BRIGHT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 5;
MPRINT(PLOTIT):   max= 250;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDL';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDR';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDB';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LSINC';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LS';
MPRINT(PLOTIT):   str=ls;
MPRINT(PLOTIT):   min= 64;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   if ls ne '.' then link checkit;
MPRINT(PLOTIT):   opt='PLACE';
MPRINT(PLOTIT):   str=place;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 13;
MPRINT(PLOTIT):   if place ne '.' then link checkit;
MPRINT(PLOTIT):   list = compress(symget('tickaxes'));
MPRINT(PLOTIT):   call symput('tickaxes',trim(list));
MPRINT(PLOTIT):   if compress(list,'LRTBlrtbFh') ne ' ' then do;
MPRINT(PLOTIT):   put "ERROR: TICKAXES=LBFh is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('frame',put(indexc(list,'RTrtF') > 0,1.));
MPRINT(PLOTIT):   if not (symget('unit') in ('in' 'cm')) then do;
MPRINT(PLOTIT):   put "ERROR: UNIT=in is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if scan(symget('lsizes'),5,' ') = ' ' then do;
MPRINT(PLOTIT):   put "ERROR: LSIZES=1 1 1 1 1 must specify five sizes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   checkit: *------check parameter range------;
MPRINT(PLOTIT):   if str ne ' ' then do;
MPRINT(PLOTIT):   param = input(str,?? 32.);
MPRINT(PLOTIT):   if not (min <= param <= max) then do;
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   put 'ERROR: ' opt +(-1) '=' str 'is not valid.  ' 'The valid range is ' min '<= ' opt '<= ' max +(-1) '.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   maketick: *------handle ticks if not already specified------;
MPRINT(PLOTIT):   minor = input(symget(c ||'minor'),?? 32.);
MPRINT(PLOTIT):   if index(upopts,upcase(c) || 'AXIS') = 0 then do;
MPRINT(PLOTIT):   if maxim > 0 then logmax = ceil(log10(maxim));
MPRINT(PLOTIT):   else logmax = .;
MPRINT(PLOTIT):   if minim > 0 then logmin = floor(log10(minim));
MPRINT(PLOTIT):   else logmin = .;
MPRINT(PLOTIT):   *------major ticks for log scale------;
MPRINT(PLOTIT):   if logscal and n(logmin) then do;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || ' ' || c || 'axis=';
MPRINT(PLOTIT):   do i = logmin to logmax;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || '1e' || compress(put(i,4.)) || ',';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   plotopts = substr(plotopts,1,length(plotopts) - 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ordinary major ticks------;
MPRINT(PLOTIT):   else plotopts = trim(plotopts) || ' ' || c || 'axis=by ' || tinc;
MPRINT(PLOTIT):   *------minor ticks------;
MPRINT(PLOTIT):   if minor >= 1 then do;
MPRINT(PLOTIT):   if n(logmax) then do;
MPRINT(PLOTIT):   if logscal then do;
MPRINT(PLOTIT):   maxim = logmax;
MPRINT(PLOTIT):   minim = logmin;
MPRINT(PLOTIT):   i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else i = inc;
MPRINT(PLOTIT):   maxim = ceil(2 + maxim / i) * i;
MPRINT(PLOTIT):   minim = floor(minim / i - 2) * i;
MPRINT(PLOTIT):   call symput(c || 'minor', compress(put(minim,best12.)) || ' to ' || compress(put(maxim,best12.)) || ' by ' || compress(put(i / (minor + 1),best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------number of minor ticks only allowed with inc is known------;
MPRINT(PLOTIT):   else if n(minor) then do;
MPRINT(PLOTIT):   put 'WARNING: Minor ticks are suppressed when HAXIS= ' 'or VAXIS= ' 'is specified ' 'on PLOTOPTS=.';
MPRINT(PLOTIT):   call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *========================preprocessing of data========================;
MPRINT(PLOTIT):   *------preprocess the input data set------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length _symbol_ $ 1 __symbol $ 1 __lfont __lcolor __sfont __scolor __stype __color $ 12 __otype $ 16 __temp $ 60 __excols $ 64;
MPRINT(PLOTIT):   retain __nblank __bblank 0 __oldx __oldy . __color __excols ' ';
MPRINT(PLOTIT):   drop __nblank __bblank __dummy __mrkwrn __nconto __oldx __oldy __excols;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------set the variable labels------;
MPRINT(PLOTIT):   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
MPRINT(PLOTIT):   call label(Dim2, __temp);
MPRINT(PLOTIT):   call symput('labely',trim(__temp));
MPRINT(PLOTIT):   call label(Dim1, __temp);
MPRINT(PLOTIT):   call symput('labelx',trim(__temp));
MPRINT(PLOTIT):   drop __temp;
MPRINT(PLOTIT):   *------output x coordinates for the curve------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *------excluded colors------;
MPRINT(PLOTIT):   __excols = lowcase(symget('excolors'));
MPRINT(PLOTIT):   drop __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   retain __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   array __rou[5] __dummy __roured __rougre __roublu __roupai (-240 1 1 1 .);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up observation type variable------;
MPRINT(PLOTIT):   _type_ = repeat(' ',7);
MPRINT(PLOTIT):   *------preprocess raw data------;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   *------store label/symbol colors, sizes, fonts, types------;
MPRINT(PLOTIT):   array a__ty[1] $ 15 _temporary_ ('CONFIG');
MPRINT(PLOTIT):   __li = 1;
MPRINT(PLOTIT):   drop __li __i;
MPRINT(PLOTIT):   do __i = 1 to 1;
MPRINT(PLOTIT):   _type_ = compress(_type_);
MPRINT(PLOTIT):   __otype = _type_;
MPRINT(PLOTIT):   if _type_ = a__ty[__i] then do;
MPRINT(PLOTIT):   __li = __i;
MPRINT(PLOTIT):   __i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   array a__ls[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__ss[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__lf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__lc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__sf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__sc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__st[1] $ 12 _temporary_ ('circle');
MPRINT(PLOTIT):   array a__sy[1] $ 1 _temporary_ ('*');
MPRINT(PLOTIT):   __lsize = a__ls[__li];
MPRINT(PLOTIT):   __ssize = a__ss[__li];
MPRINT(PLOTIT):   __lfont = a__lf[__li];
MPRINT(PLOTIT):   __lcolor = a__lc[__li];
MPRINT(PLOTIT):   __sfont = a__sf[__li];
MPRINT(PLOTIT):   __scolor = a__sc[__li];
MPRINT(PLOTIT):   __stype = a__st[__li];
MPRINT(PLOTIT):   __symbol = a__sy[__li];
MPRINT(PLOTIT):   if upcase(__sfont) = 'MARKER' and upcase(__stype) = 'CONTOUR' then do;
MPRINT(PLOTIT):   __mrkwrn + 1;
MPRINT(PLOTIT):   __sfont = 'solid';
MPRINT(PLOTIT):   if __mrkwrn = 1 then put 'WARNING: The marker font is obsolete ' 'for contour ' 'plots.  The ' 'SOLID font ' 'will be ' 'used instead.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------assign specialized symbols------;
MPRINT(PLOTIT):   if symget('symvar') = '_symbol_' then do;
MPRINT(PLOTIT):   _symbol_ = __symbol;
MPRINT(PLOTIT):   if __stype in ('vector' 'circle') and _symbol_ = ' ' then _symbol_ = "#";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   _symbol_ = _symbol_;
MPRINT(PLOTIT):   __symbol = _symbol_;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------blank out labels?------;
MPRINT(PLOTIT):   if __lsize = 0 or symget('labelvar') = '_blank_' then _idvar_ = ' ';
MPRINT(PLOTIT):   *------stretch vectors------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *-------count contour observations, determine directions------;
MPRINT(PLOTIT):   if __stype = 'contour' then do;
MPRINT(PLOTIT):   __nconto + 1;
MPRINT(PLOTIT):   if __nconto = 1 then do;
MPRINT(PLOTIT):   __oldx = Dim1;
MPRINT(PLOTIT):   __oldy = Dim2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if __nconto = 2 then do;
MPRINT(PLOTIT):   call symput('hcondir',compress(put(Dim1-__oldx,best8.)));
MPRINT(PLOTIT):   call symput('vcondir',compress(put(Dim2-__oldy,best8.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('ncontour',compress(put(__nconto,best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if __color eq ' ' or index(__excols, trim(lowcase(__color))) = 0;
MPRINT(PLOTIT):   *------adjustments to preprocessed data------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   __xvar = Dim1;
MPRINT(PLOTIT):   __yvar = Dim2;
MPRINT(PLOTIT):   *------are labels all blank?------;
MPRINT(PLOTIT):   if not __nblank then do;
MPRINT(PLOTIT):   if _idvar_ ne ' ' then do;
MPRINT(PLOTIT):   __nblank = 1;
MPRINT(PLOTIT):   call symput('allblank','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------are there obs with both label and symbol blank?------;
MPRINT(PLOTIT):   if not __bblank then do;
MPRINT(PLOTIT):   if _idvar_ = ' ' and _symbol_ = ' ' then do;
MPRINT(PLOTIT):   __bblank = 1;
MPRINT(PLOTIT):   call symput('botblank','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   *------create regression data set for curve fitting------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------separate out obs that will not go through PROC PLOT------;
MPRINT(PLOTIT):   data preproc extraobs;
MPRINT(PLOTIT):   retain __listit 0;
MPRINT(PLOTIT):   length __stype $ 12;
MPRINT(PLOTIT):   *------make sure PROC PLOT scales axes based on min, max------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   __stype = 'dummy';
MPRINT(PLOTIT):   output extraobs;
MPRINT(PLOTIT):   do Dim1 = -0.150542558486, 0.2626236470642;
MPRINT(PLOTIT):   do Dim2 = -0.192007424537, 0.1303851485045;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __stype = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   if "gplot" = "plot" then output preproc;
MPRINT(PLOTIT):   else if _idvar_ = ' ' and __stype in ('vector') then output extraobs;
MPRINT(PLOTIT):   else if _idvar_ ne ' ' or not (0 or (0 and (_symbol_ = ' ' and _idvar_ = ' '))) then do;
MPRINT(PLOTIT):   if __listit = 0 then do;
MPRINT(PLOTIT):   call symput('looklist','1');
MPRINT(PLOTIT):   __listit = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else output extraobs;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find regression function------;
MPRINT(PLOTIT):   *------see if there is anything more than corners in preproc------;
MPRINT(PLOTIT):   *------initpen=0 when nothing to plot, otherwise missing ------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   if _n_ = 0 then set preproc nobs=__nobs;
MPRINT(PLOTIT):   call symput('initpen', scan('0 .', (__nobs > 4) + 1, ' '));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set up iteration parameters------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=========================create printer plot=========================;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length pl $ 200 search $ 24;
MPRINT(PLOTIT):   iternum = 0 + 1;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = .;
MPRINT(PLOTIT):   search = symget('search');
MPRINT(PLOTIT):   ispl = index(search,'place');
MPRINT(PLOTIT):   isls = index(search,'ls');
MPRINT(PLOTIT):   isco = index(search,'compute');
MPRINT(PLOTIT):   *------adjust placement list, line size------;
MPRINT(PLOTIT):   if iternum > 1 then do;
MPRINT(PLOTIT):   if ispl then place = place + 1;
MPRINT(PLOTIT):   if isls then ls = ls + 15;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if isco then ls = round(36 + 29 * iternum - 20 * log(iternum),5);
MPRINT(PLOTIT):   isls = (isls or isco);
MPRINT(PLOTIT):   *------last iteration if we cannot increment------;
MPRINT(PLOTIT):   *------the parameters any more. ------;
MPRINT(PLOTIT):   if (isls and ispl and ls >= 200 and place >= 13) or (isls and not ispl and ls >= 200) or (ispl and not isls and place >= 13) or (not ispl and not isls and not isco) then maxiter = iternum;
MPRINT(PLOTIT):   else maxiter = 15;
MPRINT(PLOTIT):   if ls > 200 then ls = 200;
MPRINT(PLOTIT):   if ls < 64 then ls = 64;
MPRINT(PLOTIT):   actualps = input(symget('ps'),?? 32.);
MPRINT(PLOTIT):   if n(actualps) = 0 then do;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then do;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if nmiss(hsize) then hsize = 8.33;
MPRINT(PLOTIT):   if nmiss(vsize) then vsize = 6.24;
MPRINT(PLOTIT):   actualps = round(ls * (vsize / (hsize * 2)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else actualps = round(10 + ls / vtoh,5);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if actualps > 200 then actualps = 200;
MPRINT(PLOTIT):   *------construct placement list------;
MPRINT(PLOTIT):   if n(place) then do;
MPRINT(PLOTIT):   if place > 13 then place = 13;
MPRINT(PLOTIT):   if place = 0 then pl = '(s=center)';
MPRINT(PLOTIT):   else pl = '(h=2 -2 : s=right left)';
MPRINT(PLOTIT):   if place = 1 then pl = trim(pl) || ' (v=1 * h=0 -1 to -2 by alt)';
MPRINT(PLOTIT):   else if place = 2 then pl = trim(pl) || ' (v=1 -1 * h=0 -1 to -5 by alt)';
MPRINT(PLOTIT):   else if place > 2 then pl = trim(pl) || ' (v=1 to 2 by alt * h=0 -1 to -10 by alt)';
MPRINT(PLOTIT):   if place > 3 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' (s=center right left * v=0 1 to ' || compress(put(place - 2,5.)) || ' by alt * h=0 -1 to ' || compress(put(-3 * (place - 2),5.)) || ' by alt * l= 1 to ' || compress(put(2 + (place - 3.5) / 3,5.)) || ')';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   pl = 'placement=(' || trim(pl) || ')';
MPRINT(PLOTIT):   if place > 4 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' penalty(7)=' || compress(put(1.5 * place,5.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('maxiter' ,compress(put(maxiter,5.)));
MPRINT(PLOTIT):   call symput('iternum' ,compress(put(iternum,5.)));
MPRINT(PLOTIT):   call symput('place' ,compress(put(place,5.)));
MPRINT(PLOTIT):   call symput('ls' ,compress(put(ls,5.)));
MPRINT(PLOTIT):   call symput('actualps',compress(put(actualps,5.)));
MPRINT(PLOTIT):   if pl ne ' ' then call symput('pl',trim(pl));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------initialize data sets because they might not be created------;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   value = .;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat4;
MPRINT(PLOTIT):   retain label symbol startposition ' ' vaxis haxis penalty lines vshift hshift length n vposition hposition 0;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options nonumber ls=65 ps=45;
Sistema SAS

MPRINT(PLOTIT):   ods exclude all;
MPRINT(PLOTIT):   proc plot nolegend formchar='|----|+|---' 
data=preproc vtoh=2;
MPRINT(PLOTIT):   ods output LocateFacts(nowarn)=tempdat3 
Locate(nowarn)=tempdat4 Plot=tempdat5;
MPRINT(PLOTIT):   plot Dim2 * Dim1 $ _idvar_ = _symbol_ / 
haxis=by 0.1 vaxis=by 0.1 box placement=((h=2 -2 : s=right left) 
(v=1 -1 * h=0 -1 to -5 by alt)) list=-1;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   label Dim2 = '#' Dim1 = '#';
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   ods exclude none;
MPRINT(PLOTIT):   ods output close;
MPRINT(PLOTIT):   options NONUMBER ls=256 ps=10000;
MPRINT(PLOTIT):   *------look at the total penalty------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   done = '0';
MPRINT(PLOTIT):   set tempdat3(obs=1 rename=(value=penalty));
MPRINT(PLOTIT):   if n(penalty) & penalty <= 0 then done = '1';
MPRINT(PLOTIT):   iternum = 1;
MPRINT(PLOTIT):   *------print iteration history line------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = 65;
MPRINT(PLOTIT):   actualps = 45;
MPRINT(PLOTIT):   m = floor((256 - 55) / 2);
MPRINT(PLOTIT):   if iternum = 1 then do;
MPRINT(PLOTIT):   put / +m +5 'Iterative Scatter Plot of Labeled Points Macro' /;
MPRINT(PLOTIT):   put +m 'Iteration' +4 'Place' +4 'Line Size' +4 'Page Size' +4 'Penalty';
MPRINT(PLOTIT):   put +m '-------------------------------------------------------';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   m = m - 4;
MPRINT(PLOTIT):   put +m iternum 9. place 11. ls 11. actualps 13. penalty 13.;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iternum >= 15 then done = '1';
MPRINT(PLOTIT):   call symput('done',compress(done));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;

                                                                                                         Iterative Scatter Plot of Labeled Points Macro

                                                                                                    Iteration    Place    Line Size    Page Size    Penalty
                                                                                                    -------------------------------------------------------
                                                                                                        1          2         65           45            0
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *======================post-process plot, step 1======================;
MPRINT(PLOTIT):   *------put titles, footnotes in plot------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sql;
MPRINT(PLOTIT):   create view tempdat6 as select * from dictionary.titles;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   set tempdat6 end=eof;
MPRINT(PLOTIT):   if type = 'T' then ntitles + 1;
MPRINT(PLOTIT):   if eof then call symput('ntitles', trim(put(ntitles, 2. -L)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat5(keep=batch);
MPRINT(PLOTIT):   length batch $ 256;
MPRINT(PLOTIT):   if 0 then set tempdat5;
MPRINT(PLOTIT):   set tempdat6(where=(type='T') rename=(text=batch)) tempdat5 tempdat6(where=(type='F') rename=(text=batch));
MPRINT(PLOTIT):   if type = 'F' or type = 'T' then do;
MPRINT(PLOTIT):   i = round((65 - length(batch)) / 2);
MPRINT(PLOTIT):   if i > 1 then do;
MPRINT(PLOTIT):   substr(batch, i) = batch;
MPRINT(PLOTIT):   substr(batch, 1, i - 1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (batch = ' ' and lag(batch) = ' ') then output;
MPRINT(PLOTIT):   if type = 'T' and number = 1 then do;
MPRINT(PLOTIT):   batch = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------start storing locations of lines------;
MPRINT(PLOTIT):   data anno(keep=tx ty comment);
MPRINT(PLOTIT):   length c $ 1 line title $ 256 comment $ 80;
MPRINT(PLOTIT):   retain coln top bottom afterbot nlines xlabline 0 topn botn topextra botextra past 0 vtick1 vtick2 htick1 htick2 . counttop 1 right left col1 labcolum 65 title ' ';
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if xlabline and _n_ > xlabline and not past then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > xlabline + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------initialize------;
MPRINT(PLOTIT):   length = length(line);
MPRINT(PLOTIT):   if line = ' ' then length = 0;
MPRINT(PLOTIT):   comment = 'frame, tick';
MPRINT(PLOTIT):   *------store first title line------;
MPRINT(PLOTIT):   if title = ' ' then title = line;
MPRINT(PLOTIT):   *------find frame location------;
MPRINT(PLOTIT):   if left(line) =: '-' and index(line,'-+-') and substr(line,length,1) = '-' then do;
MPRINT(PLOTIT):   bottom = _n_;
MPRINT(PLOTIT):   if top = 0 then do;
MPRINT(PLOTIT):   top = _n_;
MPRINT(PLOTIT):   left = index(line,'-');
MPRINT(PLOTIT):   right = length;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------flag lines after the bottom line of the plot------;
MPRINT(PLOTIT):   c = substr(line,left,1);
MPRINT(PLOTIT):   if _n_ > top and afterbot = 0 and c = '-' and substr(line,right,1) = '-' then afterbot = 1;
MPRINT(PLOTIT):   else if afterbot then afterbot = afterbot + 1;
MPRINT(PLOTIT):   *------can we drop extra top of the plot lines?------;
MPRINT(PLOTIT):   if top and _n_ > top and not afterbot then do;
MPRINT(PLOTIT):   botn = botn + 1;
MPRINT(PLOTIT):   if c = '+' then do;
MPRINT(PLOTIT):   counttop = 0;
MPRINT(PLOTIT):   botextra = 0;
MPRINT(PLOTIT):   botn = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if counttop then topn = topn + 1;
MPRINT(PLOTIT):   if compress(line,'| ') = ' ' then do;
MPRINT(PLOTIT):   if abs(_n_ - top - 1 - topextra) < 1e-8 then topextra = topextra + 1;
MPRINT(PLOTIT):   botextra = botextra + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output horizontal axis tick mark coordinates------;
MPRINT(PLOTIT):   if afterbot = 1 then do;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   do i = left to right;
MPRINT(PLOTIT):   if substr(line,i,1) = '+' then do;
MPRINT(PLOTIT):   tx = i;
MPRINT(PLOTIT):   if nmiss(htick1) then htick1 = tx;
MPRINT(PLOTIT):   else if nmiss(htick2) then htick2 = tx;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------find last line in plot region------;
MPRINT(PLOTIT):   if afterbot > 2 and not past then do;
MPRINT(PLOTIT):   past = (index(line,"*** Wrapped Listing of Point Locations ***") or index(line,title));
MPRINT(PLOTIT):   if length and not past then do;
MPRINT(PLOTIT):   nlines = _n_;
MPRINT(PLOTIT):   *------find x-axis label line------;
MPRINT(PLOTIT):   if compress(line) = '#' then do;
MPRINT(PLOTIT):   xlabline = _n_;
MPRINT(PLOTIT):   *------check for vertically printing ticks------;
MPRINT(PLOTIT):   if not (afterbot = 3 or afterbot = 4) then do;
MPRINT(PLOTIT):   put 'WARNING: Ticks may be printing vertically.  ' 'The plot may be wrong.';
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   call symput('intrls' ,'1');
MPRINT(PLOTIT):   call symput('intrtick','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------first, last nonblank column, label column------;
MPRINT(PLOTIT):   if nlines = 0 and length then do;
MPRINT(PLOTIT):   coln = max(coln,length);
MPRINT(PLOTIT):   i = length + 1 - length(left(line));
MPRINT(PLOTIT):   col1 = min(col1,i);
MPRINT(PLOTIT):   if top then labcolum = min(labcolum,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output vertical axis tick mark coordinates------;
MPRINT(PLOTIT):   if top and substr(line,left,1) = '+' then do;
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = _n_;
MPRINT(PLOTIT):   if nmiss(vtick1) then vtick1 = ty;
MPRINT(PLOTIT):   else if nmiss(vtick2) then vtick2 = ty;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------on last observation, output results to macro variables------;
MPRINT(PLOTIT):   if past or eof then do;
MPRINT(PLOTIT):   *------check VTOH=------;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then vtoh = 2;
MPRINT(PLOTIT):   else if n(htick1,htick2,vtick1,vtick2) = 4 then do;
MPRINT(PLOTIT):   vtoh = vtick2 - vtick1;
MPRINT(PLOTIT):   if vtoh > 1e-8 then vtoh = (htick2 - htick1) / vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put vtoh= vtick2= vtick1= htick2= htick1=;
MPRINT(PLOTIT):   call symput('vtoh',compress(put(vtoh,best15.)));
MPRINT(PLOTIT):   *------size of plot parameters------;
MPRINT(PLOTIT):   ls = coln - col1 + 1;
MPRINT(PLOTIT):   left = left - col1 + 1;
MPRINT(PLOTIT):   right = right - col1 + 1;
MPRINT(PLOTIT):   labcolum = labcolum - col1 + 1;
MPRINT(PLOTIT):   hpos = ls + 0.5 * (1.0 + abs(1.5));
MPRINT(PLOTIT):   vpos = nlines + 1;
MPRINT(PLOTIT):   uhpos = input(symget('hpos'),?? 32.);
MPRINT(PLOTIT):   if n(uhpos) then do;
MPRINT(PLOTIT):   if uhpos < hpos then do;
MPRINT(PLOTIT):   put "ERROR: HPOS= is too small.  " 'The default ' 'minimum for ' 'this plot is ' hpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else hpos = uhpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   uvpos = input(symget('vpos'),?? 32.);
MPRINT(PLOTIT):   if n(uvpos) then do;
MPRINT(PLOTIT):   if uvpos < vpos then do;
MPRINT(PLOTIT):   put "ERROR: VPOS= is too small.  " 'The electronics' 'minimum for ' 'this plot is ' vpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else vpos = uvpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   hpos = ceil(hpos);
MPRINT(PLOTIT):   vpos = ceil(vpos);
MPRINT(PLOTIT):   *------scale plot to use MAKEFIT= proportion of area------;
MPRINT(PLOTIT):   makefit1 = input(symget('makefit'),?? 32.);
MPRINT(PLOTIT):   makefit = makefit1;
MPRINT(PLOTIT):   *------makefit value can be changed inside this loop------;
MPRINT(PLOTIT):   do until(itfits);
MPRINT(PLOTIT):   itfits = 1;
MPRINT(PLOTIT):   *------determine hsize and vsize------;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if n(vsize) and nmiss(hsize) then hsize = hpos * vsize / (vpos * vtoh);
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if n(hsize) = 0 then hsize = 8.33;
MPRINT(PLOTIT):   if n(vsize) = 0 then vsize = (vpos / hpos) * hsize * vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *-------scale sizes so plot fits in specified area------;
MPRINT(PLOTIT):   if n(makefit) then do;
MPRINT(PLOTIT):   scale = max(hsize / (abs(makefit) * (8.33)), vsize / (abs(makefit) * (6.24)));
MPRINT(PLOTIT):   if scale > 1.0 then do;
MPRINT(PLOTIT):   hsize = hsize / scale;
MPRINT(PLOTIT):   vsize = vsize / scale;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------add extra positions to center plot, extend axes------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'),?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'),?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'),?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'),?? 32.);
MPRINT(PLOTIT):   setlr = (nmiss(extendl,extendr) = 2 and not 0);
MPRINT(PLOTIT):   settb = (nmiss(extendt,extendb) = 2 and not 0);
MPRINT(PLOTIT):   *------centering, compute horizontal, vertical offsets------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   hposoff = max(0.5 * ((8.33) - hsize) / (hsize / hpos), 0);
MPRINT(PLOTIT):   vposoff = max(0.5 * ((6.24) - vsize) / (vsize / vpos), 0);
MPRINT(PLOTIT):   hsize = 8.33;
MPRINT(PLOTIT):   vsize = 6.24;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   vposoff = 0;
MPRINT(PLOTIT):   hposoff = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------can we extend the left and right axes a little?------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   extendl = max(min(hposoff - 2.5, 2), 0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------even the top and bottom extra positions------;
MPRINT(PLOTIT):   if settb and topn > botn then do;
MPRINT(PLOTIT):   i = topn - botn;
MPRINT(PLOTIT):   if i <= topextra then extendt = -i;
MPRINT(PLOTIT):   else extendb = i;
MPRINT(PLOTIT):   i = -0.5 * sum(extendb,extendt);
MPRINT(PLOTIT):   if i > 0 then do;
MPRINT(PLOTIT):   extendb = sum(extendb,i);
MPRINT(PLOTIT):   extendt = sum(extendt,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set the extend variables if not set yet------;
MPRINT(PLOTIT):   if nmiss(extendt) then extendt = 0;
MPRINT(PLOTIT):   if nmiss(extendl) then extendl = 0;
MPRINT(PLOTIT):   if nmiss(extendr) then extendr = 0;
MPRINT(PLOTIT):   if nmiss(extendb) then extendb = 0;
MPRINT(PLOTIT):   *------make the plot square------;
MPRINT(PLOTIT):   if 0 and not 0 then do;
MPRINT(PLOTIT):   *------first try to adjust the left and right------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   setlr = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / 2;
MPRINT(PLOTIT):   extendl = extendl - setlr;
MPRINT(PLOTIT):   extendl = max(min(extendl,hposoff - 2.5),0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------next try to adjust the top and bottom------;
MPRINT(PLOTIT):   if settb then do;
MPRINT(PLOTIT):   settb = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / (-2 * vtoh);
MPRINT(PLOTIT):   extendt = extendt - settb;
MPRINT(PLOTIT):   extendb = extendb - settb;
MPRINT(PLOTIT):   if -extendt > topextra then extendt = -topextra;
MPRINT(PLOTIT):   if -extendb > botextra then extendb = -botextra;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check to see if we succeeded, should be zero------;
MPRINT(PLOTIT):   setlr = (right - left + extendr + extendl) - vtoh * (bottom - top + extendt + extendb);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if the plot fits, otherwise try again------;
MPRINT(PLOTIT):   if n(makefit) and makefit < 0 and not 0 and ((0 and abs(setlr) > (1e-8 * hpos)) or (1 and (((extendl + extendr) > (2 * hposoff - 2.5)) or ((extendt + extendb) > (2 * vposoff - 0.25))))) and makefit <= 0.75 * makefit1 then do;
MPRINT(PLOTIT):   makefit = makefit * 0.99;
MPRINT(PLOTIT):   itfits = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------warn if we changed MAKEFIT= to make the plot square------;
MPRINT(PLOTIT):   if n(makefit) and abs(makefit - makefit1) > 1e-8 then put 'WARNING: MAKEFIT=' makefit 'was used ' 'to make ' 'the plot ' 'fit.';
MPRINT(PLOTIT):   * put extendt= extendb= extendl= extendr= vtoh= hposoff= vposoff=;
MPRINT(PLOTIT):   *------override electronics positions------;
MPRINT(PLOTIT):   if n(uhpos) then hposoff = 0;
MPRINT(PLOTIT):   else hpos = ceil(hpos + 2.0 * hposoff);
MPRINT(PLOTIT):   if n(uvpos) then vposoff = 0;
MPRINT(PLOTIT):   else vpos = ceil(vpos + 2.0 * vposoff);
MPRINT(PLOTIT):   *------output plot size parameters------;
MPRINT(PLOTIT):   call symput('col1', compress(put(col1,5.0)));
MPRINT(PLOTIT):   call symput('actualls', compress(put(ls,5.0)));
MPRINT(PLOTIT):   call symput('nlines', compress(put(nlines,5.0)));
MPRINT(PLOTIT):   call symput('top', compress(put(top,5.0)));
MPRINT(PLOTIT):   call symput('bottom', compress(put(bottom,5.0)));
MPRINT(PLOTIT):   call symput('left', compress(put(left,5.0)));
MPRINT(PLOTIT):   call symput('right', compress(put(right,5.0)));
MPRINT(PLOTIT):   call symput('labcolum', compress(put(labcolum,5.0)));
MPRINT(PLOTIT):   call symput('xlabline', compress(put(xlabline,5.0)));
MPRINT(PLOTIT):   call symput('hposoff', compress(put(hposoff,7.1)));
MPRINT(PLOTIT):   call symput('vposoff', compress(put(vposoff,7.1)));
MPRINT(PLOTIT):   call symput('hpos', compress(put(hpos,9.0)));
MPRINT(PLOTIT):   call symput('vpos', compress(put(vpos,9.0)));
MPRINT(PLOTIT):   call symput('hsize', compress(put(hsize,9.2)));
MPRINT(PLOTIT):   call symput('vsize', compress(put(vsize,9.2)));
MPRINT(PLOTIT):   call symput('extendl', compress(put(extendl,9.2)));
MPRINT(PLOTIT):   call symput('extendr', compress(put(extendr,9.2)));
MPRINT(PLOTIT):   call symput('extendt', compress(put(extendt,9.2)));
MPRINT(PLOTIT):   call symput('extendb', compress(put(extendb,9.2)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=======================post-process plot, step 2======================;
MPRINT(PLOTIT):   data tempdat1(keep=function x y text angle position comment color size style n __xvar __yvar __otype) tempdat2(keep=tx ty comment _radius_ color size style n __xvar __yvar);
MPRINT(PLOTIT):   length text line label $ 256 function color style $ 8 position symbol $ 1 comment $ 80;
MPRINT(PLOTIT):   retain style ' ';
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   color = ' ';
MPRINT(PLOTIT):   size = .;
MPRINT(PLOTIT):   *------read the plot------;
MPRINT(PLOTIT):   if _n_ <= 31 then do;
MPRINT(PLOTIT):   comment = 'text';
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if _n_ > 31 then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > 31 + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   line = substr(line, 1, 64);
MPRINT(PLOTIT):   *------is this an axis line?------;
MPRINT(PLOTIT):   istop = (_n_ = 3);
MPRINT(PLOTIT):   isbot = (_n_ = 28);
MPRINT(PLOTIT):   *------set the y-axis label------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 28 and substr(line,1,1) = '#' then substr(line,1,1) = ' ';
MPRINT(PLOTIT):   if _n_ = 31 then do;
MPRINT(PLOTIT):   y = ((2 * 31) - 3 - 28) / 2;
MPRINT(PLOTIT):   x = 1;
MPRINT(PLOTIT):   text = symget('labely');
MPRINT(PLOTIT):   if 12.0 > 1 then x = x - 0.5;
MPRINT(PLOTIT):   if length(text) > 1 then angle = 90;
MPRINT(PLOTIT):   comment = 'text, y label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   angle = 0;
MPRINT(PLOTIT):   *------remove stuff in the plot------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 28 then substr(line,8,64 - 8 + 1) = ' ';
MPRINT(PLOTIT):   *------output ticks, titles, and so on------;
MPRINT(PLOTIT):   y = 31 - _n_;
MPRINT(PLOTIT):   do iwhile = 1 to 65 while(line ne ' ');
MPRINT(PLOTIT):   i = length(line) - length(left(line)) + 1;
MPRINT(PLOTIT):   text = substr(line,i,1);
MPRINT(PLOTIT):   *------isolate and process one label------;
MPRINT(PLOTIT):   if text ne ' ' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   x = i;
MPRINT(PLOTIT):   *------special handling of title lines, xaxis label------;
MPRINT(PLOTIT):   if _n_ < 3 or _n_ >= 31 then do;
MPRINT(PLOTIT):   text = left(line);
MPRINT(PLOTIT):   i = 64 + 1;
MPRINT(PLOTIT):   line = ' ';
MPRINT(PLOTIT):   x = (8 + 64) / 2.0;
MPRINT(PLOTIT):   *------special handling of title lines------;
MPRINT(PLOTIT):   if _n_ < 3 then do;
MPRINT(PLOTIT):   comment = 'text, title';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------footnotes------;
MPRINT(PLOTIT):   else if _n_ > 31 then do;
MPRINT(PLOTIT):   comment = 'text, footnote';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle x-axis label------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   text = symget('labelx');
MPRINT(PLOTIT):   comment = 'text, x label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle label outside the plot, not title------;
MPRINT(PLOTIT):   else if i < 8 or _n_ > 28 then do;
MPRINT(PLOTIT):   do j = i + 1 to 64 until(done);
MPRINT(PLOTIT):   done = substr(line,j,1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   text = substr(line,i,j - i + 1);
MPRINT(PLOTIT):   substr(line,i,j - i + 1) = ' ';
MPRINT(PLOTIT):   *------handle ticks------;
MPRINT(PLOTIT):   position = '<';
MPRINT(PLOTIT):   x = i + length(text) - 1;
MPRINT(PLOTIT):   if j < 8 then comment = 'text, y tick';
MPRINT(PLOTIT):   else if _n_ < 31 then do;
MPRINT(PLOTIT):   comment = 'text, x tick';
MPRINT(PLOTIT):   *------tweak the placement a tad with new options------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else comment = 'text, other';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put i= text= position=;
MPRINT(PLOTIT):   *------output label------;
MPRINT(PLOTIT):   if text ne ' ' then output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iwhile >= 65 and symget('abort') ne '1' then do;
MPRINT(PLOTIT):   put 'ERROR: The frame location algorithm is confused.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------bring in the extra observations------;
MPRINT(PLOTIT):   eofextra = 0;
MPRINT(PLOTIT):   p = '+';
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   vshift = .;
MPRINT(PLOTIT):   hshift = .;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   lines = 0;
MPRINT(PLOTIT):   do while(not eofextra);
MPRINT(PLOTIT):   set extraobs(keep=__: _radius_) end=eofextra;
MPRINT(PLOTIT):   comment = 'extra,';
MPRINT(PLOTIT):   if n(__xvar,__yvar) = 2 then link process;
MPRINT(PLOTIT):   n = n + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------determine point count------;
MPRINT(PLOTIT):   set tempdat3(firstobs=2 rename=(value=npoints));
MPRINT(PLOTIT):   if nmiss(npoints) then do;
MPRINT(PLOTIT):   npoints = 0;
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   sumh = 0;
MPRINT(PLOTIT):   sumv = 0;
MPRINT(PLOTIT):   sumx = 0;
MPRINT(PLOTIT):   sumy = 0;
MPRINT(PLOTIT):   sumx2 = 0;
MPRINT(PLOTIT):   sumy2 = 0;
MPRINT(PLOTIT):   sumxh = 0;
MPRINT(PLOTIT):   sumyv = 0;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   midh = 64 / 2;
MPRINT(PLOTIT):   midv = 45 / 2;
MPRINT(PLOTIT):   midx = (0.2626236470642 + -0.150542558486) / 2;
MPRINT(PLOTIT):   midy = (0.1303851485045 + -0.192007424537) / 2;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   do pointn = 1 to npoints;
MPRINT(PLOTIT):   link getlabel;
MPRINT(PLOTIT):   ty = vpositio;
MPRINT(PLOTIT):   tx = hpositio;
MPRINT(PLOTIT):   comment = 'list,';
MPRINT(PLOTIT):   if _error_ = 1 then put _all_;
MPRINT(PLOTIT):   if startpos = 'Center' then p = '+';
MPRINT(PLOTIT):   else if startpos = 'Left' then p = '<';
MPRINT(PLOTIT):   else p = '>';
MPRINT(PLOTIT):   text = symbol;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   set preproc(keep=__: _radius_) point=i;
MPRINT(PLOTIT):   link process;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------least-squares slope and intercept------;
MPRINT(PLOTIT):   b = .;
MPRINT(PLOTIT):   a = .;
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = sumx - nobs * midx;
MPRINT(PLOTIT):   b = nobs * sumx2 - d * d;
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumxh - d * (sumh - nobs * midh)) / b;
MPRINT(PLOTIT):   a = sumh / nobs - b * sumx / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = (sumy - nobs * midy);
MPRINT(PLOTIT):   b = (nobs * sumy2 - d * d);
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumyv - d * (sumv - nobs * midv)) / b;
MPRINT(PLOTIT):   a = sumv / nobs - b * sumy / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   process: *------handle a point in the plot------;
MPRINT(PLOTIT):   type = __stype;
MPRINT(PLOTIT):   if n(tx) then do;
MPRINT(PLOTIT):   tx = tx + 8 + 1;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(ty) then do;
MPRINT(PLOTIT):   ty = ty + 1 + 31 - 28;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   colorset = 0;
MPRINT(PLOTIT):   *------random colors------;
MPRINT(PLOTIT):   *------store full label------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   line = label;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   line = compress('('||type||',') || ' ' || compress(put(n,5.)||')');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set colors, sizes, and so on for symbols------;
MPRINT(PLOTIT):   if not colorset then color = __scolor;
MPRINT(PLOTIT):   size = __ssize;
MPRINT(PLOTIT):   style = __sfont;
MPRINT(PLOTIT):   if text = 'NONE' then text = ' ';
MPRINT(PLOTIT):   if __symbol ne '00'x then text = __symbol;
MPRINT(PLOTIT):   if type = 'contour' then function = 'BAR';
MPRINT(PLOTIT):   else if type = 'square' then function = 'SYMBOL';
MPRINT(PLOTIT):   else function = 'LABEL';
MPRINT(PLOTIT):   *------output list info to lines data set------;
MPRINT(PLOTIT):   if type =: 'vector' or type =: 'circle' then do;
MPRINT(PLOTIT):   comment = trim(comment) || ' ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output list info to text data set------;
MPRINT(PLOTIT):   if (text ne ' ' and type ne 'dummy') or type = 'contour' or type = 'function' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------intermediate results for slope, intercept------;
MPRINT(PLOTIT):   if n(tx,ty,__xvar,__yvar) = 4 then do;
MPRINT(PLOTIT):   sumh = sumh + tx;
MPRINT(PLOTIT):   sumv = sumv + ty;
MPRINT(PLOTIT):   sumx = sumx + __xvar;
MPRINT(PLOTIT):   sumy = sumy + __yvar;
MPRINT(PLOTIT):   d = __xvar - midx;
MPRINT(PLOTIT):   sumx2 = sumx2 + d * d;
MPRINT(PLOTIT):   sumxh = sumxh + (tx - midh) * d;
MPRINT(PLOTIT):   d = __yvar - midy;
MPRINT(PLOTIT):   sumy2 = sumy2 + d * d;
MPRINT(PLOTIT):   sumyv = sumyv + (ty - midv) * d;
MPRINT(PLOTIT):   nobs = nobs + 1;
MPRINT(PLOTIT):   * put sumh= tx= sumv= ty= sumx= __xvar= sumy= __yvar= midx= sumx2= sumxh= midy= sumy2= sumyv= nobs=;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle the label fragments------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   if not colorset then color = __lcolor;
MPRINT(PLOTIT):   size = __lsize;
MPRINT(PLOTIT):   style = __lfont;
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   position = p;
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, label, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   shift = floor(1e-8 + (lines - 1) / 2);
MPRINT(PLOTIT):   do i = 1 to lines;
MPRINT(PLOTIT):   if lines > 1 then link getlabel;
MPRINT(PLOTIT):   text = label;
MPRINT(PLOTIT):   if text ne ' ' and type ne 'dummy' then do;
MPRINT(PLOTIT):   x = tx + hshift;
MPRINT(PLOTIT):   y = 1 + ty + vshift + shift - i;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getlabel: set tempdat4(keep=lines symbol n label vshift hshift vposition hposition startposition rename=(startposition=startpos vposition=vpositio hposition=hpositio));
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete extraobs;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------tick mark based slope and intercept------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   merge anno(where=(index(substr(comment,1,12),'tick')) keep=ty tx comment) tempdat1(where=(index(comment,'tick')) keep=text comment);
MPRINT(PLOTIT):   if n(ty) then ty = 31 - ty;
MPRINT(PLOTIT):   data = input(text,?? 32.);
MPRINT(PLOTIT):   if (0 and n(tx)) or (0 and n(ty)) then do;
MPRINT(PLOTIT):   if data > 0 then data = log10(data);
MPRINT(PLOTIT):   else data = .;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   oldty = lag(ty);
MPRINT(PLOTIT):   oldtx = lag(tx);
MPRINT(PLOTIT):   olddata = lag(data);
MPRINT(PLOTIT):   if n(data,olddata) = 2 then do;
MPRINT(PLOTIT):   den = data - olddata;
MPRINT(PLOTIT):   if abs(den) > 1e-8 then do;
MPRINT(PLOTIT):   if n(oldty,ty) = 2 then do;
MPRINT(PLOTIT):   b = (ty - oldty) / den;
MPRINT(PLOTIT):   a = ty - b * data;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(oldtx,tx) = 2 then do;
MPRINT(PLOTIT):   b = (tx - oldtx) / den;
MPRINT(PLOTIT):   a = tx - b * data - 1 + 1;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------switch top and bottom to annotate coordinates------;
MPRINT(PLOTIT):   *------make goptions statement------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=================create annotate data set with lines=================;
MPRINT(PLOTIT):   data anno(keep=function x y comment color size style n);
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length text $ 256 comment $ 100 function color style $ 8;
MPRINT(PLOTIT):   retain curven -1 tickaxes "LBFh" vtoh 2 vinter 15 hinter 31 hslope 100 vslope 50 hmax 0.2626236470642 vmax 0.1303851485045 vmin -0.192007424537 hmin -0.150542558486 singular 1e-8 left 8 right 64 top 28 bottom 3;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------check slope, intercept------;
MPRINT(PLOTIT):   if n(hinter,vinter,hslope,vslope) ne 4 then do;
MPRINT(PLOTIT):   put 'ERROR: Plot algorithm failed.  ' 'Coordinates could ' 'not be ' 'computed.  ' 'Vertically printing ' 'ticks is a ' 'possible cause.  ' 'Another ' 'explanation ' 'is no locate list ' 'was available.  ' 'Look ' 'at the ' 'printer plot 
' 'to check.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------how far should plot be extended?------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'), ?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'), ?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'), ?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'), ?? 32.);
MPRINT(PLOTIT):   *------rectangle sizes for contour plots------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then vcontour = abs(vslope) * (vmax - vmin) / nobs;
MPRINT(PLOTIT):   else vcontour = .;
MPRINT(PLOTIT):   call symput('vcontour',compress(put(vcontour,best15.)));
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then hcontour = abs(hslope) * (hmax - hmin) / nobs;
MPRINT(PLOTIT):   else hcontour = .;
MPRINT(PLOTIT):   call symput('hcontour',compress(put(hcontour,best15.)));
MPRINT(PLOTIT):   *------optionally close up all white space------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   if n(hcontour) then do;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin - 0.5 * hcontour);
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax + 0.5 * hcontour) - right;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(vcontour) then do;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax + 0.5 * vcontour) - top;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin - 0.5 * vcontour);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------optionally close up white space with square contours------;
MPRINT(PLOTIT):   if 0 and 0 and not 0 then do;
MPRINT(PLOTIT):   contour = 1 * 0.5;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin) + vtoh * contour;
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax) - right + vtoh * contour;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax) - top + contour;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin) + contour;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   call symput('extendl',compress(put(extendl,best15.)));
MPRINT(PLOTIT):   call symput('extendr',compress(put(extendr,best15.)));
MPRINT(PLOTIT):   call symput('extendt',compress(put(extendt,best15.)));
MPRINT(PLOTIT):   call symput('extendb',compress(put(extendb,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------final locations of the axes------;
MPRINT(PLOTIT):   left = left - extendl;
MPRINT(PLOTIT):   right = right + extendr;
MPRINT(PLOTIT):   top = top + extendt;
MPRINT(PLOTIT):   bottom = bottom - extendb;
MPRINT(PLOTIT):   *------frame background color------;
MPRINT(PLOTIT):   color = 'cxffffff';
MPRINT(PLOTIT):   size = 1;
MPRINT(PLOTIT):   style = 'msolid';
MPRINT(PLOTIT):   function = 'POLY';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, background, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'POLYCONT';
MPRINT(PLOTIT):   comment = 'frame, background, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   *------draw frame------;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, box, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'frame, box, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   comment = 'frame, box, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------diagonal reference line------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   comment = 'frame, diag, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, diag, right top';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------vertical axis reference lines------;
MPRINT(PLOTIT):   *------horizontal axis reference lines------;
MPRINT(PLOTIT):   *------vertical axis minor tick marks------;
MPRINT(PLOTIT):   *------horizontal axis minor tick marks------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat2(in=td2);
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td2 and not (comment =: 'frame');
MPRINT(PLOTIT):   if i or (nmiss(tx) and n(__xvar)) then tx = hinter + hslope * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(ty) and n(__yvar)) then ty = vinter + vslope * __yvar;
MPRINT(PLOTIT):   *------figure out curve coordinates------;
MPRINT(PLOTIT):   if comment = 'frame, tick' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[2];
MPRINT(PLOTIT):   halftick = 0.5 * abs(1.5);
MPRINT(PLOTIT):   ticklen = (1 + (1.5 > 0)) * halftick;
MPRINT(PLOTIT):   if index(tickaxes,'h') then ticklen = ticklen / 2;
MPRINT(PLOTIT):   *------adjust for blank cols------;
MPRINT(PLOTIT):   if n(tx) then tx = tx - 1 + 1;
MPRINT(PLOTIT):   *------draw y-axis tick marks------;
MPRINT(PLOTIT):   if nmiss(tx) then do;
MPRINT(PLOTIT):   y = 31 - ty;
MPRINT(PLOTIT):   if bottom <= y <= top then do;
MPRINT(PLOTIT):   if index(tickaxes,'L') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, left';
MPRINT(PLOTIT):   x = left - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'R') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, right';
MPRINT(PLOTIT):   x = right + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw x-axis tick marks------;
MPRINT(PLOTIT):   else if nmiss(ty) then do;
MPRINT(PLOTIT):   halftick = halftick / vtoh;
MPRINT(PLOTIT):   ticklen = ticklen / vtoh;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   if left <= x <= right then do;
MPRINT(PLOTIT):   if index(tickaxes,'T') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, top';
MPRINT(PLOTIT):   y = top + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'B') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, bottom';
MPRINT(PLOTIT):   y = bottom - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw vectors------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'vector') then do;
MPRINT(PLOTIT):   size = lsizes[3];
MPRINT(PLOTIT):   x = hinter;
MPRINT(PLOTIT):   y = vinter;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = index(comment,'vector');
MPRINT(PLOTIT):   comment = substr(comment,1,r + 7) || 'head,' || substr(comment,r + 7);
MPRINT(PLOTIT):   *------compute slope of vector------;
MPRINT(PLOTIT):   vecslope = tx - hinter;
MPRINT(PLOTIT):   if abs(vecslope) > singular then vecslope = (ty - vinter) / (vecslope / vtoh);
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------find point on vector vecheadr distance from end------;
MPRINT(PLOTIT):   r = -0.1;
MPRINT(PLOTIT):   fromx = tx;
MPRINT(PLOTIT):   fromy = ty;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   fromx = tox;
MPRINT(PLOTIT):   fromy = toy;
MPRINT(PLOTIT):   *------slope of line perpendicular to vector------;
MPRINT(PLOTIT):   if nmiss(vecslope) then vecslope = 0;
MPRINT(PLOTIT):   else if abs(vecslope) > singular then vecslope = -1.0 / vecslope;
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------draw vector head------;
MPRINT(PLOTIT):   r = -0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = 0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw circles------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'circle') then do;
MPRINT(PLOTIT):   size = lsizes[4];
MPRINT(PLOTIT):   comsplit = 15 + (comment =: 'extra');
MPRINT(PLOTIT):   holdcom = comment;
MPRINT(PLOTIT):   pi = 3.1415926536;
MPRINT(PLOTIT):   do rad = _radius_;
MPRINT(PLOTIT):   radius = max(rad, 0) * hslope;
MPRINT(PLOTIT):   comment = substr(holdcom,1,comsplit - 1) || compress(put(rad,best5.) || ',') || ' ' || compress('(' || put(__xvar,best5.) || ',' || put(__yvar,best5.) || '),') || ' ' || substr(holdcom,comsplit);
MPRINT(PLOTIT):   i = (8.33) / (90);
MPRINT(PLOTIT):   if "in" = 'cm' then i = i / 2.54;
MPRINT(PLOTIT):   inc = 2.0 * pi / ceil(20 + (2.0 * pi * radius * i / .1) ** 0.8);
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   seg0 = (inc * singular) ** 2;
MPRINT(PLOTIT):   do i = -pi + inc to pi by inc;
MPRINT(PLOTIT):   x1 = tx + cos(i - inc) * radius;
MPRINT(PLOTIT):   y1 = ty + sin(i - inc) * radius / vtoh;
MPRINT(PLOTIT):   x2 = tx + cos(i) * radius;
MPRINT(PLOTIT):   y2 = ty + sin(i) * radius / vtoh;
MPRINT(PLOTIT):   link clipline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   linept: *------find a point (tox,toy) r distance from ------;
MPRINT(PLOTIT):   *------(fromx,fromy) on a line with slope vecslope------;
MPRINT(PLOTIT):   *------negative r means toward origin ------;
MPRINT(PLOTIT):   r = r * (90) / (8.33);
MPRINT(PLOTIT):   if "in" = 'cm' then r = r * 2.54;
MPRINT(PLOTIT):   vecdir = -sign(r);
MPRINT(PLOTIT):   if n(vecslope) then do;
MPRINT(PLOTIT):   vecm2 = sqrt(r * r / (1.0 + vecslope * vecslope));
MPRINT(PLOTIT):   if fromx > hinter then vecm2 = -vecm2;
MPRINT(PLOTIT):   tox = vecdir * vecm2 + fromx;
MPRINT(PLOTIT):   toy = vecdir * vecslope * vecm2 / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   tox = fromx;
MPRINT(PLOTIT):   if fromy > vinter then vecdir = -vecdir;
MPRINT(PLOTIT):   toy = vecdir * abs(r) / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   clipline: *------clip a line that crosses an edge------;
MPRINT(PLOTIT):   *------find where line crosses edges------;
MPRINT(PLOTIT):   b = (x2 - x1);
MPRINT(PLOTIT):   bi = (y2 - y1);
MPRINT(PLOTIT):   xtop = .;
MPRINT(PLOTIT):   xbottom = .;
MPRINT(PLOTIT):   yleft = .;
MPRINT(PLOTIT):   yright = .;
MPRINT(PLOTIT):   if abs(b) > singular then do;
MPRINT(PLOTIT):   b = (y2 - y1) / b;
MPRINT(PLOTIT):   a = y1 - b * x1;
MPRINT(PLOTIT):   yleft = b * left + a;
MPRINT(PLOTIT):   yright = b * right + a;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if abs(bi) > singular then do;
MPRINT(PLOTIT):   bi = (x2 - x1) / bi;
MPRINT(PLOTIT):   xtop = (top - y1) * bi + x1;
MPRINT(PLOTIT):   xbottom = (bottom - y1) * bi + x1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust coordinates when line crosses edges------;
MPRINT(PLOTIT):   if x1 < left then do;
MPRINT(PLOTIT):   x1 = left;
MPRINT(PLOTIT):   y1 = yleft;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x1 > right then do;
MPRINT(PLOTIT):   x1 = right;
MPRINT(PLOTIT):   y1 = yright;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 < bottom then do;
MPRINT(PLOTIT):   y1 = bottom;
MPRINT(PLOTIT):   x1 = xbottom;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 > top then do;
MPRINT(PLOTIT):   y1 = top;
MPRINT(PLOTIT):   x1 = xtop;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 < left then do;
MPRINT(PLOTIT):   x2 = left;
MPRINT(PLOTIT):   y2 = yleft;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 > right then do;
MPRINT(PLOTIT):   x2 = right;
MPRINT(PLOTIT):   y2 = yright;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 < bottom then do;
MPRINT(PLOTIT):   y2 = bottom;
MPRINT(PLOTIT):   x2 = xbottom;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 > top then do;
MPRINT(PLOTIT):   y2 = top;
MPRINT(PLOTIT):   x2 = xtop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if segment should be output------;
MPRINT(PLOTIT):   if n(x1,x2,y1,y2) = 4 and ((x2 - x1) ** 2 + (y2 - y1) ** 2) > seg0 then do;
MPRINT(PLOTIT):   *------draw line------;
MPRINT(PLOTIT):   if not justdraw then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   justdraw = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else justdraw = 0;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat2 regdat;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *======================combine annotate data sets======================;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   keep color style function comment x y size text position angle n obstype;
MPRINT(PLOTIT):   length color style function $ 8 comment $ 100 x y size 8 text $ 64 position $ 1 angle n 8 obstype $ 12 excolors $ 64;
MPRINT(PLOTIT):   retain left right top bottom contok conoldx conoldy excolors;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   left = 8 - 2.00;
MPRINT(PLOTIT):   right = 64 + 2.00;
MPRINT(PLOTIT):   top = 28 + -0.50;
MPRINT(PLOTIT):   bottom = 3 - 0.50;
MPRINT(PLOTIT):   contok = (n(0,0) = 2);
MPRINT(PLOTIT):   excolors = lowcase(symget('excolors'));
MPRINT(PLOTIT):   *------store goptions with annotate data set------;
MPRINT(PLOTIT):   if not 0 then do;
MPRINT(PLOTIT):   comment = symget('gopts');
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   function = 'COMMENT';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw border------;
MPRINT(PLOTIT):   if "cx000000" ne ' ' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = 34 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   comment = 'border, box, left top start';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x - 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'border, box, left bottom';
MPRINT(PLOTIT):   y = 0;
MPRINT(PLOTIT):   if 0 and 0.50 < 0 then y = y - 0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right bottom';
MPRINT(PLOTIT):   x = 90 - 0.001;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x + 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right top';
MPRINT(PLOTIT):   y = 34 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, left top';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 2.00 < 0 then x = x - 2.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat1(in=td1 rename=(text=text2));
MPRINT(PLOTIT):   text = text2;
MPRINT(PLOTIT):   if comment = 'text, y label' then x = x - 2.00;
MPRINT(PLOTIT):   if comment = 'text, title' then y = y + -0.50;
MPRINT(PLOTIT):   if comment = 'text, x label' then y = y - 0.50;
MPRINT(PLOTIT):   if comment = 'text, y tick' then x = x - 2.00;
MPRINT(PLOTIT):   if comment = 'text, x tick' then y = y - 0.50;
MPRINT(PLOTIT):   obstype = __otype;
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   *------discard clipped ticks if necessary------;
MPRINT(PLOTIT):   if comment = 'text, y tick' then do;
MPRINT(PLOTIT):   if not (bottom <= y <= top) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if comment = 'text, x tick' then do;
MPRINT(PLOTIT):   d = right + floor(1e-8 + len / 2);
MPRINT(PLOTIT):   if not (left <= x <= d) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td1 and (comment =: 'list' or comment =: 'extra') and not (index(substr(comment,1,18),', text, label'));
MPRINT(PLOTIT):   if i or (nmiss(x) and n(__xvar)) then x = 31 + 100 * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(y) and n(__yvar)) then y = 15 + 50 * __yvar;
MPRINT(PLOTIT):   *------all angles are zero, except the y-axis label------;
MPRINT(PLOTIT):   if nmiss(angle) then angle = 0;
MPRINT(PLOTIT):   *------set position if not yet set------;
MPRINT(PLOTIT):   if position = ' ' then position = '+';
MPRINT(PLOTIT):   *------flag contour observations------;
MPRINT(PLOTIT):   contour = (function = 'BAR' and style = 'solid');
MPRINT(PLOTIT):   *------clip if necessary------;
MPRINT(PLOTIT):   if comment =: 'extra, text' or comment =: 'list, text' and text ne ' ' and not contour then do;
MPRINT(PLOTIT):   if y >= top or y <= bottom then return;
MPRINT(PLOTIT):   if position = '<' then d = x - len + 1 - left;
MPRINT(PLOTIT):   else if position = '>' then d = x - left;
MPRINT(PLOTIT):   else d = x - len / 2 - left;
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if position = '<' then d = right - x;
MPRINT(PLOTIT):   else if position = '>' then d = right - (x + len - 1);
MPRINT(PLOTIT):   else d = right - (x + len / 2);
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust justifications------;
MPRINT(PLOTIT):   if position = '<' then x = x + 0.5;
MPRINT(PLOTIT):   else if position = '>' then x = x - 0.5;
MPRINT(PLOTIT):   *------set line, text sizes------;
MPRINT(PLOTIT):   if nmiss(size) then do;
MPRINT(PLOTIT):   if function = 'LABEL' then size = 1;
MPRINT(PLOTIT):   else size = lsizes[1];
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set font------;
MPRINT(PLOTIT):   if style = ' ' and not (comment =: 'list, text' or comment =: 'extra, text') then style = 'none';
MPRINT(PLOTIT):   *------if color is still not set, set it------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   *------offset (jitter) coincident symbols but not ptr symbols------;
MPRINT(PLOTIT):   length lastpos $ 1;
MPRINT(PLOTIT):   retain oldx oldy 0 offsetn 1 lastpos '+';
MPRINT(PLOTIT):   if comment =: 'list, text, symbol' or comment =: 'extra, text, symbol' then do;
MPRINT(PLOTIT):   if abs(oldx - x) < 1e-8 and abs(oldy - y) < 1e-8 then do;
MPRINT(PLOTIT):   *------usually go center, right, left, but skip right------;
MPRINT(PLOTIT):   *------on second symbol if last label was right ------;
MPRINT(PLOTIT):   offsetn + 1 + (offsetn = 1 and lastpos = '>');
MPRINT(PLOTIT):   x = x + (mod(offsetn,3) - 1) * (0.25);
MPRINT(PLOTIT):   d = mod(floor((offsetn - 1) / 3) + 1, 3) - 1;
MPRINT(PLOTIT):   y = y + d * (0.25) / (2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   offsetn = 1;
MPRINT(PLOTIT):   oldx = x;
MPRINT(PLOTIT):   oldy = y;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   lastpos = position;
MPRINT(PLOTIT):   *------override colors for monochrome device------;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if index(excolors, trim(lowcase(color))) = 0;
MPRINT(PLOTIT):   *------add offsets to center plot ------;
MPRINT(PLOTIT):   *------adjust y so bottom line has coordinate 0.5------;
MPRINT(PLOTIT):   x = x + 12.0;
MPRINT(PLOTIT):   y = y + 0.8 + 0.5;
MPRINT(PLOTIT):   *------set ID variable for sort for functions------;
MPRINT(PLOTIT):   *------create rectangles for contour plots------;
MPRINT(PLOTIT):   if contour and contok then do;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   epsh = size * 0;
MPRINT(PLOTIT):   epsv = size * 0;
MPRINT(PLOTIT):   x1 = x - epsh / 2;
MPRINT(PLOTIT):   x2 = x1 + epsh;
MPRINT(PLOTIT):   epsh = epsh * 0.1;
MPRINT(PLOTIT):   y1 = y - epsv / 2;
MPRINT(PLOTIT):   y2 = y1 + epsv;
MPRINT(PLOTIT):   epsv = epsv * 0.1;
MPRINT(PLOTIT):   if abs(x1 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x1 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   if (abs(0) < epsh and 0 > 0) or (abs(0) < epsv and 0 > 0) then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   function = 'BAR';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   conoldx = x;
MPRINT(PLOTIT):   conoldy = y;
MPRINT(PLOTIT):   *------final adjustments------;
MPRINT(PLOTIT):   if text = '*' and function = 'LABEL' then do;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   text = 'star';
MPRINT(PLOTIT):   function = 'SYMBOL';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   call symput('nobs',compress(put(nobs,5.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat1 tempdat3 tempdat4 tempdat5 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------post-processing for functions------;
MPRINT(PLOTIT):   *------post-processing for expand------;
MPRINT(PLOTIT):   *------make sure that the frame is never covered------;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   set anno anno(where=(comment =: 'frame, box'));
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *===========set up for and produce the graphical scatter plot==========;
MPRINT(PLOTIT):   goptions nodisplay hpos=90 vpos=34 hsize=8.33in vsize=6.24in cback=white device=GIF;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   *------print final plot request------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length string $ 500;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   put / 'The following code will create the ' @@;
MPRINT(PLOTIT):   if not 1 then put '(empty) ' @@;
MPRINT(PLOTIT):   put 'printer plot ' 'on which ' 'the ' 'graphical ' 'plot is ' 'based:' /;
MPRINT(PLOTIT):   string = "options nonumber ls=65 ps=45;";
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = symget('procopts');
MPRINT(PLOTIT):   indent2 = 10;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'plot ' || trim(symget('plotreq')) || ' /';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('plotopts')) || ' list=1';
MPRINT(PLOTIT):   indent1 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('pl')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('label')) || ';';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 9;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('adjust2')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'label ' || symget('vplotvar') || " = '#' " || symget('hplotvar') || " = '#';";
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put +3 'run; quit;' /;
MPRINT(PLOTIT):   put 'The plot was created with the following goptions:' /;
MPRINT(PLOTIT):   string = 'goptions ' || symget('gopts') || ';';
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put / "The OUT=anno Annotate data set has 59 observations.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('method') = 'print' then put "The graphics stream file name is C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD14480_MIIKYMEDIA_\Prc2\plotit.ps.";
MPRINT(PLOTIT):   if 1 and upcase(getoption("STIMER")) eq "STIMER" and getoption('stimer') eq 'STIMER' then do;
MPRINT(PLOTIT):   time = datetime();
MPRINT(PLOTIT):   cum = put(time - 1923258829.622,6.1);
MPRINT(PLOTIT):   put 'The PLOTIT macro used ' cum "seconds to create OUT=anno.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   wrap: *------print a line, wrapped and indented------;
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   string = left(string);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   if len < 2 or string = ' ' or string = ';' then return;
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   do while(i < (len - 1) and not nlit);
MPRINT(PLOTIT):   string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   i = index(string,' ;');
MPRINT(PLOTIT):   if i then string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = 1;
MPRINT(PLOTIT):   end = 0;
MPRINT(PLOTIT):   indent = indent1 + 1;
MPRINT(PLOTIT):   do while(len > end);
MPRINT(PLOTIT):   string = left(substr(string,end + 1));
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   maxlen = 256 - indent;
MPRINT(PLOTIT):   if len > maxlen and not nlit then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   do while(end > 0 and not (substr(string,end,1) in (' ' ',')));
MPRINT(PLOTIT):   end = end - 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if len > maxlen then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   if nlit then end = nlit + 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else end = len;
MPRINT(PLOTIT):   str = substr(string,1,end);
MPRINT(PLOTIT):   put @indent str;
MPRINT(PLOTIT):   indent = indent2 + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;

The following code will create the printer plot on which the graphical plot is based:

options nonumber ls=65 ps=45;
proc plot nolegend formchar='|----|+|---' data=preproc vtoh=2;
   plot Dim2 * Dim1 $ _idvar_ = _symbol_ /
        haxis=by 0.1 vaxis=by 0.1 box list=1
        placement=((h=2 -2 : s=right left) (v=1 -1 * h=0 -1 to -5 by alt));
   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
   label Dim2 = '#' Dim1 = '#';
   run; quit;

The plot was created with the following goptions:

goptions nodisplay hpos=90 vpos=34 hsize=8.33in vsize=6.24in cback=white device=GIF;

The OUT=anno Annotate data set has 59 observations.
The PLOTIT macro used 0.6 seconds to create OUT=anno.
MPRINT(PLOTIT):   *------produce the plot------;
MPRINT(PLOTIT):   proc ganno annotate=anno gout=WORK.Clus name="DISTANCE";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options LABEL;
MPRINT(PLOTIT):   *------restore options, quit------;
MPRINT(PLOTIT):   options NOTES missing=".";
MPRINT(EM_DIAGRAM):  ;
41336      goptions display;
MPRINT(EM_DIAGRAM):   goptions display;
41337      title;
MPRINT(EM_DIAGRAM):   title;
41338      filename gsasfile "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):    filename gsasfile "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\GRAPH\Distance.gif";
41339      goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace cback= white;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace cback= white;
41340      proc greplay igout=WORK.Clus nofs;
MPRINT(EM_DIAGRAM):   proc greplay igout=WORK.Clus nofs;
NOTE: Building list of graphs from the catalog.

NOTE: Enter greplay commands or statements.
41341      replay DISTANCE;
MPRINT(EM_DIAGRAM):   replay DISTANCE;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
NOTE: 16043 bytes written to C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\GRAPH\Distance.gif.
41342      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE GREPLAY ha utilizado (Tiempo de proceso total):
      real time           0.13 seconds
      cpu time            0.14 seconds
      

41343      goptions reset=all;
MPRINT(EM_DIAGRAM):   goptions reset=all;
41344      filename gsasfile;
MPRINT(EM_DIAGRAM):   filename gsasfile;
NOTE: Fileref GSASFILE has been deassigned.
41345      proc datasets lib=EMWS3 nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS3 nolist;
41346      modify Clus_DISTANCE;
MPRINT(EM_DIAGRAM):   modify Clus_DISTANCE;
41347      rename _idvar_=_SEGMENT_;
MPRINT(EM_DIAGRAM):   rename _idvar_=_SEGMENT_;
NOTE: Renaming variable _idvar_ to _SEGMENT_.
MPRINT(EM_DIAGRAM):   run;
41348      run;

NOTE: MODIFY was successful for EMWS3.CLUS_DISTANCE.DATA.
41349      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41350      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41351      * Clus: creando conjunto de datos para el informe Input de la media;
MPRINT(EM_DIAGRAM):   * Clus: creando conjunto de datos para el informe Input de la media;
41352      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41353      data temp(drop=_type_ over_all);
MPRINT(EM_DIAGRAM):   data temp(drop=_type_ over_all);
41354      set EMWS3.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTSTAT;
41355      where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
MPRINT(EM_DIAGRAM):   where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
41356      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set EMWS3.CLUS_OUTSTAT.
      WHERE _type_ in ('CLUS_MEAN', 'DMDB_MEAN');
NOTE: The data set WORK.TEMP has 7 observations and 1205 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41357      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
41358      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
41359      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 7 observations and 1205 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41360      proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
MPRINT(EM_DIAGRAM):   proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
41361      var ABSOLUT--ZUMA;
MPRINT(EM_DIAGRAM):   var ABSOLUT--ZUMA;
41362      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 7 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.STDTEMP has 7 observations and 1205 variables.
NOTE: The data set WORK.STAT has 10 observations and 1205 variables.
NOTE: PROCEDURE STDIZE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41363      proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN COL4=MAX));
MPRINT(EM_DIAGRAM):   proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN COL4=MAX));
41364      where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
MPRINT(EM_DIAGRAM):   where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
41365      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.STAT.
      WHERE _type_ in ('LOCATION', 'P0', 'P100', 'SCALE');
NOTE: The data set WORK.TSTAT has 1204 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41366      data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
MPRINT(EM_DIAGRAM):   data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
41367      set tstat;
MPRINT(EM_DIAGRAM):   set tstat;
41368      if std ^in (0, .) then do;
MPRINT(EM_DIAGRAM):   if std ^in (0, .) then do;
41369      stdmin = abs((min-mean)/std);
MPRINT(EM_DIAGRAM):   stdmin = abs((min-mean)/std);
41370      stdmax = abs((max-mean)/std);
MPRINT(EM_DIAGRAM):   stdmax = abs((max-mean)/std);
41371      end;
MPRINT(EM_DIAGRAM):   end;
41372      if mean ^in(0, .) then cv = std/mean;
MPRINT(EM_DIAGRAM):   if mean ^in(0, .) then cv = std/mean;
41373      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 1204 observations and 4 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41374      proc sort data=tstat;
MPRINT(EM_DIAGRAM):   proc sort data=tstat;
41375      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
41376      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 1204 observations and 4 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41377      proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL COL1=MEAN));
MPRINT(EM_DIAGRAM):   proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL COL1=MEAN));
41378      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
41379      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 7 observations read from the data set WORK.STDTEMP.
NOTE: The data set WORK.TSTDTEMP has 8428 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41380      proc sort data=tstdtemp;
MPRINT(EM_DIAGRAM):   proc sort data=tstdtemp;
41381      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
41382      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8428 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set WORK.TSTDTEMP has 8428 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41383      data tstdtemp;
MPRINT(EM_DIAGRAM):   data tstdtemp;
41384      merge tstdtemp tstat;
MPRINT(EM_DIAGRAM):   merge tstdtemp tstat;
41385      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
41386      STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
MPRINT(EM_DIAGRAM):   STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
41387      drop stdmin stdmax mean;
MPRINT(EM_DIAGRAM):   drop stdmin stdmax mean;
41388      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8428 observations read from the data set WORK.TSTDTEMP.
NOTE: There were 1204 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTDTEMP has 8428 observations and 4 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41389      proc transpose data=EMWS3.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS3.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
41390      var ABSOLUT--ZUMA;
MPRINT(EM_DIAGRAM):   var ABSOLUT--ZUMA;
41391      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
41392      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
41393      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 1 observations read from the data set EMWS3.CLUS_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 1204 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

41394      proc sort data=tempVar;
MPRINT(EM_DIAGRAM):   proc sort data=tempVar;
41395      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
41396      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 1204 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41397      data EMWS3.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
41398      Length _SEGMENT_CHAR_ $7;
MPRINT(EM_DIAGRAM):   Length _SEGMENT_CHAR_ $7;
41399      label _SEGMENT_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentName_vlabel,  NOQUOTE))" _SEGMENT_CHAR_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentId_vlabel,    NOQUOTE))" NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,     NOQUOTE))"
41399    !  INPUT =
41400         "%sysfunc(sasmsg(sashelp.dmine, rpt_input_vlabel,        NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_label_vlabel,        NOQUOTE))" CV = "%sysfunc(sasmsg(sashelp.dmine, rpt_cv_vlabel,           NOQUOTE))" STDMEAN =
41401         "%sysfunc(sasmsg(sashelp.dmine, rpt_normmean_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Nombre del segmento" _SEGMENT_CHAR_ = "Id de segmento" NAME = "Variable" INPUT = "Input" LABEL = "Etiqueta" CV = "Coeficiente de variación" STDMEAN = "Media normalizada";
41402      merge tempvar tstdtemp;
MPRINT(EM_DIAGRAM):   merge tempvar tstdtemp;
41403      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
41404      if LABEL='' then LABEL=NAME;
MPRINT(EM_DIAGRAM):   if LABEL='' then LABEL=NAME;
41405      _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
MPRINT(EM_DIAGRAM):   _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
41406      if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
41407      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TEMPVAR.
NOTE: There were 8428 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set EMWS3.CLUS_INPUTMEAN has 8428 observations and 7 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

41408      proc sort data=EMWS3.Clus_INPUTMEAN;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_INPUTMEAN;
41409      by descending cv;
MPRINT(EM_DIAGRAM):   by descending cv;
41410      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8428 observations read from the data set EMWS3.CLUS_INPUTMEAN.
NOTE: The data set EMWS3.CLUS_INPUTMEAN has 8428 observations and 7 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41411      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41412      * Clus: determinando las variables importantes;
MPRINT(EM_DIAGRAM):   * Clus: determinando las variables importantes;
41413      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

41414      %let _nobs = 0;
41415      data keepvars(rename=(NAME=INPUT));
MPRINT(EM_DIAGRAM):    data keepvars(rename=(NAME=INPUT));
41416      set EMWS3.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
41417      if eof then call symput('_nobs', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   if eof then call symput('_nobs', strip(put(_N_, best.)));
41418      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set EMWS3.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0.5;
NOTE: The data set WORK.KEEPVARS has 24 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41419      proc transpose data=EMWS3.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS3.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME VARIABLE=INPUT));
41420      var ABSOLUT--ZUMA;
MPRINT(EM_DIAGRAM):   var ABSOLUT--ZUMA;
41421      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
41422      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
41423      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 1 observations read from the data set EMWS3.CLUS_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 1204 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

41424      proc sort data=keepvars;
MPRINT(EM_DIAGRAM):   proc sort data=keepvars;
41425      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
41426      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.KEEPVARS has 24 observations and 5 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41427      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
41428      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
41429      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 1204 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41430      data vars;
MPRINT(EM_DIAGRAM):   data vars;
41431      merge tempvar keepvars(in=b);
MPRINT(EM_DIAGRAM):   merge tempvar keepvars(in=b);
41432      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
41433      if b then output;
MPRINT(EM_DIAGRAM):   if b then output;
41434      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable INPUT by input data sets. This might cause unexpected results.
NOTE: There were 1204 observations read from the data set WORK.TEMPVAR.
NOTE: There were 24 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.VARS has 24 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41435      proc sort data=vars;
MPRINT(EM_DIAGRAM):   proc sort data=vars;
41436      by descending importance;
MPRINT(EM_DIAGRAM):   by descending importance;
41437      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set WORK.VARS.
NOTE: The data set WORK.VARS has 24 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41438      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
41439      set vars;
MPRINT(EM_DIAGRAM):   set vars;
41440      if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
41441      else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
MPRINT(EM_DIAGRAM):   else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
41442      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set WORK.VARS.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * mergeVarMeansandClusLabel;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41443      *------------------------------------------------------------*;
41444      * mergeVarMeansandClusLabel;
41445      *------------------------------------------------------------*;
41446      data temp(keep=_SEGMENT_ &CLUS_PROFVARS);
MPRINT(EM_DIAGRAM):   data temp(keep=_SEGMENT_ EXTERMIN SURREND CHASTITI INTELLECT SHAME SKEPTIC GORDON ZUMA SERA ARGIC SERDAR SOVIET LEBANES LEBANON HEZBOLLAH HERNLEM BRAD CIVILIAN JIMMI BUSH LIVNI REDUND JAKE CARTER);
41447      length _SEGMENT_ &CLUS_PROFVARS 8;
MPRINT(EM_DIAGRAM):   length _SEGMENT_ EXTERMIN SURREND CHASTITI INTELLECT SHAME SKEPTIC GORDON ZUMA SERA ARGIC SERDAR SOVIET LEBANES LEBANON HEZBOLLAH HERNLEM BRAD CIVILIAN JIMMI BUSH LIVNI REDUND JAKE CARTER 8;
41448      set EMWS3.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTSTAT;
41449      where _type_ ='CLUS_MEAN';
MPRINT(EM_DIAGRAM):   where _type_ ='CLUS_MEAN';
41450      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS3.CLUS_OUTSTAT.
      WHERE _type_='CLUS_MEAN';
NOTE: The data set WORK.TEMP has 6 observations and 25 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

41451      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
41452      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
41453      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 6 observations and 25 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

41454      data EMWS3.Clus_LABEL;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_LABEL;
41455      merge EMWS3.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
41456      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
41457      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS3.CLUS_LABEL.
NOTE: There were 6 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS3.CLUS_LABEL has 6 observations and 26 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
