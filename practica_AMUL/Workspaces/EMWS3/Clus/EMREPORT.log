MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "11/12/20" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "22H44" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                11/12/20
Hora:                22H44
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2JNJ0V9 "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2JNJ0V9 new;
MPRINT(EM_DIAGRAM):   run;
44673      data WORK.M3B3ZIGK;
MPRINT(EM_DIAGRAM):    data WORK.M3B3ZIGK;
44674      set WORK.M3B3ZIGK;
MPRINT(EM_DIAGRAM):   set WORK.M3B3ZIGK;
44675      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
44676      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.M3B3ZIGK.
NOTE: The data set WORK.M3B3ZIGK has 1204 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

44677      data WORK.M3B3ZIGK;
MPRINT(EM_DIAGRAM):    data WORK.M3B3ZIGK;
44678      set WORK.M3B3ZIGK end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M3B3ZIGK end=_eof_ nobs=_nobs_;
44679      output;
MPRINT(EM_DIAGRAM):   output;
44680      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
44681      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
44682      ROLE = 'TARGET';
MPRINT(EM_DIAGRAM):   ROLE = 'TARGET';
44683      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
44684      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
44685      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
44686      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
44687      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
44688      USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
44689      output;
MPRINT(EM_DIAGRAM):   output;
44690      end;
MPRINT(EM_DIAGRAM):   end;
44691      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.M3B3ZIGK.
NOTE: The data set WORK.M3B3ZIGK has 1205 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

44692      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
44693      * Clus: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Clus: Create decision matrix;
44694      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44695      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44696      * Clus: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Variables Macro ;
44697      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44698      %macro EM_TREEVARS;
44699          ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT
44700         ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI
44701         ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW
44702         ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI
44703         APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA
44704         ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN
44705         ATHENA ATTACH ATTACK ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI
44706         BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER
44707         BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON
44708         BOUGHT BOULDER BOX BRAD BRAIN BRAND BREAK BRIAN BRING BRITISH BROWN BTW BUFFER
44709         BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN
44710         CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER
44711         CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL CHARACT CHARG CHASTITI
44712         CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI
44713         CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR
44714         CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN
44715         COLOR COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON
44716         COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET
44717         CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT
44718         CONTACT CONTENT CONTEXT CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP
44719         CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN
44720         CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL
44721         DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD DEAL DEAR DEATH DECID DECOD DEFAULT
44722         DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL
44723         DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO
44724         DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG DISCLAIM DISCUSS DISEAS
44725         DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON
44726         DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI
44727         EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL
44728         ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP
44729         ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT
44730         EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE
44731         FACT FAIL FALS FAMILI FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT
44732         FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU
44733         FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE
44734         FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND FULL FUNCTION FUTUR GAIN GAME
44735         GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI
44736         GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG
44737         GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD
44738         HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT
44739         HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER
44740         HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD
44741         HUMAN HUNTSVIL ICON IDEA IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT
44742         IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT
44743         INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC
44744         INTERGRAPH INTERN INTERNET INTERVIEW INVENT INVOLV IRAN IRVIN ISLAM ISLAND ISN
44745         ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH
44746         JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD
44747         KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB LABEL
44748         LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV
44749         LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT
44750         LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG
44751         LONGER LOOK LOOP LOST LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN
44752         MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR
44753         MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON
44754         MEMBER MEMORI MENTION MENU MESSAG METAL METHOD METHODOLOG MICHAEL MIDDL MIGRAIN
44755         MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL
44756         MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG
44757         MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR NAZI
44758         NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW
44759         NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER
44760         OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM
44761         OMRAN OPEN OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL
44762         OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN
44763         PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD
44764         PERSIAN PERSON PETER PHONE PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL
44765         PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT
44766         POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER
44767         POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID PRESS PRETTI PREVENT PREVIOU
44768         PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM
44769         PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC
44770         PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST RADAR
44771         RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV
44772         RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL
44773         RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR
44774         RESEARCH RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN
44775         REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST
44776         RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE
44777         SCHEMAT SCHOOL SCHWARTZ SCI SCIENC SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU
44778         SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT
44779         SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME
44780         SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT SHOULDN SHOW SICK SIDE SIGN
44781         SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN
44782         SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC
44783         SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK SPOT STAI
44784         STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN
44785         STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB
44786         SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS
44787         SURGERI SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL
44788         TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL
44789         TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE
44790         THEORI THERAPI THERE THEY THINK THOMA THOUGHT THREAD THROW THU TIM TIME TIMER
44791         TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE
44792         TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE
44793         TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN UNDERSTAND UNIT UNIV
44794         UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL
44795         VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG
44796         WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK
44797         WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON
44798         WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG
44799         XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG
44800         ZIONISM ZIONIST ZUMA
44801      %mend EM_TREEVARS;
44802      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44803      * Clus: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Tree Targets Macro ;
44804      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44805      %macro EM_TREETARGETS;
44806          _SEGMENT_
44807      %mend EM_TREETARGETS;
44808      data EMWS3.EM_Clus / view=EMWS3.EM_Clus;
MPRINT(EM_DIAGRAM):   data EMWS3.EM_Clus / view=EMWS3.EM_Clus;
44809      set
44809    ! EMWS3.Clus_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_TRAIN(keep
MPRINT(EM_DIAGRAM):  =ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI 
ANDREW ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN ATHENA ATTACH ATTACK 
ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND 
BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL 
CHARACT CHARG CHASTITI CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN COLOR 
COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT 
CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD 
DEAL DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG 
DISCLAIM DISCUSS DISEAS DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL 
ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FACT FAIL FALS FAMILI 
FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND 
FULL FUNCTION FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD 
HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD HUMAN HUNTSVIL ICON IDEA 
IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC INTERGRAPH INTERN INTERNET INTERVIEW INVENT 
INVOLV IRAN IRVIN ISLAM ISLAND ISN ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB 
LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG LONGER LOOK LOOP LOST 
LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON MEMBER MEMORI MENTION MENU MESSAG METAL METHOD 
METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR 
NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM OMRAN OPEN 
OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PERSON PETER PHONE 
PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID 
PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST 
RADAR RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR RESEARCH 
RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE SCHEMAT SCHOOL SCHWARTZ SCI SCIENC 
SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT 
SHOULDN SHOW SICK SIDE SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK 
SPOT STAI STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS SURGERI 
SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE THEORI THERAPI THERE THEY THINK 
THOMA THOUGHT THREAD THROW THU TIM TIME TIMER TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN 
UNDERSTAND UNIT UNIV UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK 
WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG ZIONISM ZIONIST 
ZUMA _SEGMENT_);
44810      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: DATA STEP view saved on file EMWS3.EM_CLUS.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: Vista EMWS3.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           0.09 seconds
      cpu time            0.07 seconds
      
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.09 seconds
      cpu time            0.11 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs intervalo Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44811      *------------------------------------------------------------* ;
44812      * Clus: Inputs intervalo Macro ;
44813      *------------------------------------------------------------* ;
44814      %macro INTINPUTS;
44815          ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT
44816         ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI
44817         ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW
44818         ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI
44819         APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA
44820         ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN
44821         ATHENA ATTACH ATTACK ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI
44822         BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER
44823         BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON
44824         BOUGHT BOULDER BOX BRAD BRAIN BRAND BREAK BRIAN BRING BRITISH BROWN BTW BUFFER
44825         BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN
44826         CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER
44827         CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL CHARACT CHARG CHASTITI
44828         CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI
44829         CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR
44830         CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN
44831         COLOR COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON
44832         COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET
44833         CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT
44834         CONTACT CONTENT CONTEXT CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP
44835         CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN
44836         CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL
44837         DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD DEAL DEAR DEATH DECID DECOD DEFAULT
44838         DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL
44839         DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO
44840         DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG DISCLAIM DISCUSS DISEAS
44841         DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON
44842         DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI
44843         EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL
44844         ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP
44845         ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT
44846         EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE
44847         FACT FAIL FALS FAMILI FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT
44848         FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU
44849         FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE
44850         FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND FULL FUNCTION FUTUR GAIN GAME
44851         GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI
44852         GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG
44853         GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD
44854         HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT
44855         HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER
44856         HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD
44857         HUMAN HUNTSVIL ICON IDEA IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT
44858         IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT
44859         INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC
44860         INTERGRAPH INTERN INTERNET INTERVIEW INVENT INVOLV IRAN IRVIN ISLAM ISLAND ISN
44861         ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH
44862         JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD
44863         KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB LABEL
44864         LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV
44865         LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT
44866         LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG
44867         LONGER LOOK LOOP LOST LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN
44868         MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR
44869         MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON
44870         MEMBER MEMORI MENTION MENU MESSAG METAL METHOD METHODOLOG MICHAEL MIDDL MIGRAIN
44871         MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL
44872         MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG
44873         MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR NAZI
44874         NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW
44875         NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER
44876         OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM
44877         OMRAN OPEN OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL
44878         OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN
44879         PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD
44880         PERSIAN PERSON PETER PHONE PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL
44881         PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT
44882         POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER
44883         POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID PRESS PRETTI PREVENT PREVIOU
44884         PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM
44885         PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC
44886         PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST RADAR
44887         RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV
44888         RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL
44889         RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR
44890         RESEARCH RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN
44891         REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST
44892         RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE
44893         SCHEMAT SCHOOL SCHWARTZ SCI SCIENC SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU
44894         SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT
44895         SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME
44896         SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT SHOULDN SHOW SICK SIDE SIGN
44897         SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN
44898         SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC
44899         SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK SPOT STAI
44900         STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN
44901         STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB
44902         SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS
44903         SURGERI SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL
44904         TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL
44905         TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE
44906         THEORI THERAPI THERE THEY THINK THOMA THOUGHT THREAD THROW THU TIM TIME TIMER
44907         TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE
44908         TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE
44909         TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN UNDERSTAND UNIT UNIV
44910         UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL
44911         VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG
44912         WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK
44913         WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON
44914         WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG
44915         XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG
44916         ZIONISM ZIONIST ZUMA
44917      %mend INTINPUTS;
44918      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44919      * Clus: Inputs binarios y nominales Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs binarios y nominales Macro ;
44920      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44921      %macro NOMINPUTS;
44922      
44923      %mend NOMINPUTS;
44924      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44925      * Clus: Inputs ordinales Macro ;
MPRINT(EM_DIAGRAM):   * Clus: Inputs ordinales Macro ;
44926      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
44927      %macro ORDINPUTS;
44928      
44929      %mend ORDINPUTS;
44930      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44931      * Clus: ejecutar procedimiento ARBOR;
MPRINT(EM_DIAGRAM):   * Clus: ejecutar procedimiento ARBOR;
44932      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

44933      proc arbor data=EMWS3.EM_Clus
44934      MAXSURRS=5
44935      ;
MPRINT(EM_DIAGRAM):    proc arbor data=EMWS3.EM_Clus MAXSURRS=5 ;
44936      ;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   input
44937      input %INTINPUTS
MPRINT(INTINPUTS):   ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI 
ANDREW ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN ATHENA ATTACH ATTACK 
ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND 
BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL 
CHARACT CHARG CHASTITI CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN COLOR 
COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT 
CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD 
DEAL DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG 
DISCLAIM DISCUSS DISEAS DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL 
ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FACT FAIL FALS FAMILI 
FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND 
FULL FUNCTION FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD 
HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD HUMAN HUNTSVIL ICON IDEA 
IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC INTERGRAPH INTERN INTERNET INTERVIEW INVENT 
INVOLV IRAN IRVIN ISLAM ISLAND ISN ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB 
LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG LONGER LOOK LOOP LOST 
LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON MEMBER MEMORI MENTION MENU MESSAG METAL METHOD 
METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR 
NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM OMRAN OPEN 
OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PERSON PETER PHONE 
PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID 
PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST 
RADAR RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR RESEARCH 
RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE SCHEMAT SCHOOL SCHWARTZ SCI SCIENC 
SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT 
SHOULDN SHOW SICK SIDE SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK 
SPOT STAI STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS SURGERI 
SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE THEORI THERAPI THERE THEY THINK 
THOMA THOUGHT THREAD THROW THU TIM TIME TIMER TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN 
UNDERSTAND UNIT UNIV UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK 
WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG ZIONISM ZIONIST 
ZUMA
44938      / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
44939      target _SEGMENT_ / level=NOMINAL
44940      Criterion=PROBCHISQ
44941      ;
MPRINT(EM_DIAGRAM):   target _SEGMENT_ / level=NOMINAL Criterion=PROBCHISQ ;
44942      ;
MPRINT(EM_DIAGRAM):   ;
44943      Performance DISK
44944      ;
MPRINT(EM_DIAGRAM):   Performance DISK ;
44945      MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: 1471717 kilobytes of physical memory.
NOTE: Will use 3000 out of 3000 training cases.
NOTE: Using memory pool with 1505995776 bytes.
NOTE: Will not search for split on variable SUBSCRIV.
NOTE: Too few acceptable cases.
NOTE: Passed training data 18 times.
NOTE: Training used 88375304 bytes of work memory.
NOTE: The subtree sequence contains 10 subtrees. The largest has 19 nodes and 10 leaves.
NOTE: Using subtree with 17 nodes and 9 leaves.
NOTE: Created macro variable NLEAVES equal to 9.
44946      save
44947      MODEL=EMWS3.Clus_PLOTDS
44948      SEQUENCE=EMWS3.Clus_OUTSEQ
44949      IMPORTANCE=EMWS3.Clus_OUTIMPORT
44950      NODESTAT=EMWS3.Clus_OUTNODES
44951      SUMMARY=WORK.OUTSUMMARY_TREE_3HI3CVZ
44952      STATSBYNODE=WORK.OUTSTATS_TREE_3HI3CVZ
44953      Pathlistnonmissing = WORK.OUTPATH_TREE_3HI3CVZ
44954      Rules = WORK.OUTRULES_TREE_3HI3CVZ
44955      ;
MPRINT(EM_DIAGRAM):   save MODEL=EMWS3.Clus_PLOTDS SEQUENCE=EMWS3.Clus_OUTSEQ IMPORTANCE=EMWS3.Clus_OUTIMPORT NODESTAT=EMWS3.Clus_OUTNODES SUMMARY=WORK.OUTSUMMARY_TREE_3HI3CVZ STATSBYNODE=WORK.OUTSTATS_TREE_3HI3CVZ Pathlistnonmissing = 
WORK.OUTPATH_TREE_3HI3CVZ Rules = WORK.OUTRULES_TREE_3HI3CVZ ;
NOTE: The data set EMWS3.CLUS_OUTIMPORT has 1204 observations and 5 variables.
NOTE: The data set EMWS3.CLUS_PLOTDS has 9749 observations and 4 variables.
NOTE: The data set EMWS3.CLUS_OUTNODES has 17 observations and 36 variables.
NOTE: The data set WORK.OUTPATH_TREE_3HI3CVZ has 110 observations and 7 variables.
NOTE: The data set WORK.OUTRULES_TREE_3HI3CVZ has 343 observations and 6 variables.
NOTE: The data set EMWS3.CLUS_OUTSEQ has 10 observations and 11 variables.
NOTE: The data set WORK.OUTSTATS_TREE_3HI3CVZ has 204 observations and 5 variables.
NOTE: The data set WORK.OUTSUMMARY_TREE_3HI3CVZ has 44 observations and 13 variables.
44956      run;
MPRINT(EM_DIAGRAM):   run;

44957      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: There were 3000 observations read from the data set EMWS3.IDS_DATA.
NOTE: Vista EMWS3.EM_CLUS.VIEW ha utilizado (Tiempo de proceso total):
      real time           8.64 seconds
      cpu time            8.59 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.CLUS_TRAIN.
NOTE: There were 3000 observations read from the data set EMWS3.EM_CLUS.
NOTE: The data set WORK._NAMEDAT has 10 observations and 5 variables.
NOTE: PROCEDURE ARBOR ha utilizado (Tiempo de proceso total):
      real time           8.64 seconds
      cpu time            8.62 seconds
      

44958      data EMWS3.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):    data EMWS3.Clus_OUTIMPORT;
44959      set EMWS3.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTIMPORT;
44960      label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
44961         "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
44962      ;
MPRINT(EM_DIAGRAM):   label NAME = "Nombre de la variable" LABEL = "Etiqueta" NRULES = "Número de reglas de división" IMPORTANCE = "Importancia" NSURROGATES = "Número de reglas sustitutas" ;
44963      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set EMWS3.CLUS_OUTIMPORT.
NOTE: The data set EMWS3.CLUS_OUTIMPORT has 1204 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

44964      filename x "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
44965      data temp;
MPRINT(EM_DIAGRAM):    data temp;
44966      length varname $11;
MPRINT(EM_DIAGRAM):   length varname $11;
44967      retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
44968      set WORK.OUTPATH_TREE_3HI3CVZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTPATH_TREE_3HI3CVZ;
44969      if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
44970      else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
44971      output;
MPRINT(EM_DIAGRAM):   output;
44972      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK.OUTPATH_TREE_3HI3CVZ.
NOTE: The data set WORK.TEMP has 110 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

44973      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
44974      by node;
MPRINT(EM_DIAGRAM):   by node;
44975      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 110 observations and 8 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

44976      proc sort data=EMWS3.Clus_OUTNODES out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_OUTNODES out=outnodes;
44977      by node;
MPRINT(EM_DIAGRAM):   by node;
44978      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_OUTNODES.
NOTE: The data set WORK.OUTNODES has 17 observations and 36 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

44979      data temp;
MPRINT(EM_DIAGRAM):   data temp;
44980      merge temp(in=_a) outnodes(keep= node
44981      NPRIORS
44982      P__SEGMENT_9
44983      P__SEGMENT_5
44984      P__SEGMENT_3
44985      P__SEGMENT_1
44986      P__SEGMENT_10
44987      P__SEGMENT_2
44988      P__SEGMENT_8
44989      P__SEGMENT_4
44990      P__SEGMENT_6
44991      P__SEGMENT_7
44992      );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P__SEGMENT_9 P__SEGMENT_5 P__SEGMENT_3 P__SEGMENT_1 P__SEGMENT_10 P__SEGMENT_2 P__SEGMENT_8 P__SEGMENT_4 P__SEGMENT_6 P__SEGMENT_7 );
44993      by node;
MPRINT(EM_DIAGRAM):   by node;
44994      if _a;
MPRINT(EM_DIAGRAM):   if _a;
44995      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK.TEMP.
NOTE: There were 17 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 110 observations and 19 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

44996      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
44997      by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
44998      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 110 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 110 observations and 19 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

44999      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
45000      file x;
MPRINT(EM_DIAGRAM):   file x;
45001      set temp;
MPRINT(EM_DIAGRAM):   set temp;
45002      by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
45003      retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
45004      length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
45005      if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
45006      origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
45007      oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
45008      end;
MPRINT(EM_DIAGRAM):   end;
45009      if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
45010      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
45011      put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
45012      put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
45013      end;
MPRINT(EM_DIAGRAM):   end;
45014      if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
45015      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
45016      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
45017      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
45018      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
45019      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
45020      end;
MPRINT(EM_DIAGRAM):   end;
45021      else do;
MPRINT(EM_DIAGRAM):   else do;
45022      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
45023      end;
MPRINT(EM_DIAGRAM):   end;
45024      end;
MPRINT(EM_DIAGRAM):   end;
45025      end;
MPRINT(EM_DIAGRAM):   end;
45026      else do;
MPRINT(EM_DIAGRAM):   else do;
45027      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
45028      string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
45029      end;
MPRINT(EM_DIAGRAM):   end;
45030      else do;
MPRINT(EM_DIAGRAM):   else do;
45031      string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
45032      end;
MPRINT(EM_DIAGRAM):   end;
45033      end;
MPRINT(EM_DIAGRAM):   end;
45034      end;
MPRINT(EM_DIAGRAM):   end;
45035      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
45036      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
45037      string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
45038      end;
MPRINT(EM_DIAGRAM):   end;
45039      else do;
MPRINT(EM_DIAGRAM):   else do;
45040      string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
45041      end;
MPRINT(EM_DIAGRAM):   end;
45042      end;
MPRINT(EM_DIAGRAM):   end;
45043      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
45044      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
45045      string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
45046      end;
MPRINT(EM_DIAGRAM):   end;
45047      else do;
MPRINT(EM_DIAGRAM):   else do;
45048      string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
45049      end;
MPRINT(EM_DIAGRAM):   end;
45050      end;
MPRINT(EM_DIAGRAM):   end;
45051      else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
45052      if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
45053      string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
45054      end;
MPRINT(EM_DIAGRAM):   end;
45055      else do;
MPRINT(EM_DIAGRAM):   else do;
45056      string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
45057      end;
MPRINT(EM_DIAGRAM):   end;
45058      end;
MPRINT(EM_DIAGRAM):   end;
45059      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
45060      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
45061      end;
MPRINT(EM_DIAGRAM):   end;
45062      else do;
MPRINT(EM_DIAGRAM):   else do;
45063      if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
45064      if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
45065      if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
45066      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
45067      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
45068      end;
MPRINT(EM_DIAGRAM):   end;
45069      end;
MPRINT(EM_DIAGRAM):   end;
45070      else do;
MPRINT(EM_DIAGRAM):   else do;
45071      if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
45072      else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
45073      end;
MPRINT(EM_DIAGRAM):   end;
45074      end;
MPRINT(EM_DIAGRAM):   end;
45075      else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
45076      string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
45077      end;
MPRINT(EM_DIAGRAM):   end;
45078      else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
45079      end;
MPRINT(EM_DIAGRAM):   end;
45080      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
45081      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
45082      end;
MPRINT(EM_DIAGRAM):   end;
45083      if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
45084      if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
45085      if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
45086      string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
45087      end;
MPRINT(EM_DIAGRAM):   end;
45088      end;
MPRINT(EM_DIAGRAM):   end;
45089      put string;
MPRINT(EM_DIAGRAM):   put string;
45090      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
45091      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
45092      end;
MPRINT(EM_DIAGRAM):   end;
45093      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
45094      put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
45095      put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
45096      put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
45097      put " Predicted: _SEGMENT_=9  = " P__SEGMENT_9;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=9  = " P__SEGMENT_9;
45098      put " Predicted: _SEGMENT_=5  = " P__SEGMENT_5;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=5  = " P__SEGMENT_5;
45099      put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=3  = " P__SEGMENT_3;
45100      put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=1  = " P__SEGMENT_1;
45101      put " Predicted: _SEGMENT_=10  = " P__SEGMENT_10;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=10  = " P__SEGMENT_10;
45102      put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=2  = " P__SEGMENT_2;
45103      put " Predicted: _SEGMENT_=8  = " P__SEGMENT_8;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=8  = " P__SEGMENT_8;
45104      put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=4  = " P__SEGMENT_4;
45105      put " Predicted: _SEGMENT_=6  = " P__SEGMENT_6;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=6  = " P__SEGMENT_6;
45106      put " Predicted: _SEGMENT_=7  = " P__SEGMENT_7;
MPRINT(EM_DIAGRAM):   put " Predicted: _SEGMENT_=7  = " P__SEGMENT_7;
45107      put " ";
MPRINT(EM_DIAGRAM):   put " ";
45108      if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
45109      oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
45110      end;
MPRINT(EM_DIAGRAM):   end;
45111      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      45019:67    45022:66    45066:108   45067:72    
NOTE: The file X is:
      Nombre archivo=C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,
      Tamaño de archivo (bytes)=0,
      Última modificación=11 de diciembre de 2020 22H44,
      Create Time=23 de noviembre de 2020 15H57

NOTE: 193 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 110 observations read from the data set WORK.TEMP.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45112      filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
45113      /* belowtext */
45114      data templabel;
MPRINT(EM_DIAGRAM):    data templabel;
45115      set WORK.OUTRULES_TREE_3HI3CVZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_3HI3CVZ;
45116      if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT ="LABEL"));
45117      rename character_value = belowtext;
MPRINT(EM_DIAGRAM):   rename character_value = belowtext;
45118      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
45119      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 343 observations read from the data set WORK.OUTRULES_TREE_3HI3CVZ.
NOTE: The data set WORK.TEMPLABEL has 0 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45120      data tempvar;
MPRINT(EM_DIAGRAM):   data tempvar;
45121      set WORK.OUTRULES_TREE_3HI3CVZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_3HI3CVZ;
45122      if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT="VARIABLE"));
45123      keep NODE character_value;
MPRINT(EM_DIAGRAM):   keep NODE character_value;
45124      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 343 observations read from the data set WORK.OUTRULES_TREE_3HI3CVZ.
NOTE: The data set WORK.TEMPVAR has 8 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45125      proc sort data=templabel;
MPRINT(EM_DIAGRAM):   proc sort data=templabel;
45126      by node;
MPRINT(EM_DIAGRAM):   by node;
45127      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is empty.
NOTE: The data set WORK.TEMPLABEL has 0 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45128      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
45129      by node;
MPRINT(EM_DIAGRAM):   by node;
45130      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 8 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45131      data tempbelow;
MPRINT(EM_DIAGRAM):   data tempbelow;
45132      merge templabel tempvar;
MPRINT(EM_DIAGRAM):   merge templabel tempvar;
45133      by node;
MPRINT(EM_DIAGRAM):   by node;
45134      if missing(belowtext) then belowtext= character_value;
MPRINT(EM_DIAGRAM):   if missing(belowtext) then belowtext= character_value;
45135      keep node belowtext;
MPRINT(EM_DIAGRAM):   keep node belowtext;
45136      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set WORK.TEMPLABEL.
NOTE: There were 8 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPBELOW has 8 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45137      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
45138      by node;
MPRINT(EM_DIAGRAM):   by node;
45139      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.TEMPBELOW has 8 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45140      /* abovetext */
45141      data tempoutrules;
MPRINT(EM_DIAGRAM):   data tempoutrules;
45142      set WORK.OUTRULES_TREE_3HI3CVZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_3HI3CVZ;
45143      if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
MPRINT(EM_DIAGRAM):   if ((ROLE='PRIMARY') AND(STAT in ("INTERVAL", "ORDINAL", "NOMINAL")));
45144      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 343 observations read from the data set WORK.OUTRULES_TREE_3HI3CVZ.
NOTE: The data set WORK.TEMPOUTRULES has 8 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45145      proc sort data=tempoutrules;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutrules;
45146      by node numeric_value;
MPRINT(EM_DIAGRAM):   by node numeric_value;
45147      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPOUTRULES has 8 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45148      data tempabove;
MPRINT(EM_DIAGRAM):   data tempabove;
45149      set tempoutrules(rename=(node=parent));
MPRINT(EM_DIAGRAM):   set tempoutrules(rename=(node=parent));
45150      by parent numeric_value;
MPRINT(EM_DIAGRAM):   by parent numeric_value;
45151      retain abovetext tempstring flag branch origval origchar;
MPRINT(EM_DIAGRAM):   retain abovetext tempstring flag branch origval origchar;
45152      *length abovetext tempstring origchar $45;
MPRINT(EM_DIAGRAM):   *length abovetext tempstring origchar $45;
45153      length abovetext $256;
MPRINT(EM_DIAGRAM):   length abovetext $256;
45154      length tempstring origchar $64;
MPRINT(EM_DIAGRAM):   length tempstring origchar $64;
45155      if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_DIAGRAM):   if STAT in ("INTERVAL", "ORDINAL") then do;
45156      if first.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent then do;
45157      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
45158      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
45159      abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(NUMERIC_VALUE);
45160      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
45161      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
45162      output;
MPRINT(EM_DIAGRAM):   output;
45163      end;
MPRINT(EM_DIAGRAM):   end;
45164      else do;
MPRINT(EM_DIAGRAM):   else do;
45165      abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = "< "||strip(CHARACTER_VALUE);
45166      branch = 1;
MPRINT(EM_DIAGRAM):   branch = 1;
45167      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
45168      output;
MPRINT(EM_DIAGRAM):   output;
45169      end;
MPRINT(EM_DIAGRAM):   end;
45170      if first.parent AND last.parent then do;
MPRINT(EM_DIAGRAM):   if first.parent AND last.parent then do;
45171      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
45172      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
45173      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
45174      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
45175      output;
MPRINT(EM_DIAGRAM):   output;
45176      end;
MPRINT(EM_DIAGRAM):   end;
45177      else do;
MPRINT(EM_DIAGRAM):   else do;
45178      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
45179      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
45180      output;
MPRINT(EM_DIAGRAM):   output;
45181      end;
MPRINT(EM_DIAGRAM):   end;
45182      end;
MPRINT(EM_DIAGRAM):   end;
45183      end;
MPRINT(EM_DIAGRAM):   end;
45184      else if last.parent then do;
MPRINT(EM_DIAGRAM):   else if last.parent then do;
45185      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
45186      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
45187      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
45188      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
45189      end;
MPRINT(EM_DIAGRAM):   end;
45190      else do;
MPRINT(EM_DIAGRAM):   else do;
45191      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
45192      end;
MPRINT(EM_DIAGRAM):   end;
45193      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
45194      output;
MPRINT(EM_DIAGRAM):   output;
45195      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
45196      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
45197      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
45198      end;
MPRINT(EM_DIAGRAM):   end;
45199      else do;
MPRINT(EM_DIAGRAM):   else do;
45200      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
45201      end;
MPRINT(EM_DIAGRAM):   end;
45202      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
45203      output;
MPRINT(EM_DIAGRAM):   output;
45204      end;
MPRINT(EM_DIAGRAM):   end;
45205      else do;
MPRINT(EM_DIAGRAM):   else do;
45206      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
45207      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
45208      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
45209      end;
MPRINT(EM_DIAGRAM):   end;
45210      else do;
MPRINT(EM_DIAGRAM):   else do;
45211      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
45212      end;
MPRINT(EM_DIAGRAM):   end;
45213      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
45214      output;
MPRINT(EM_DIAGRAM):   output;
45215      end;
MPRINT(EM_DIAGRAM):   end;
45216      end;
MPRINT(EM_DIAGRAM):   end;
45217      else do;
MPRINT(EM_DIAGRAM):   else do;
45218      if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_DIAGRAM):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
45219      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
45220      numeric_value = round(numeric_value,0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value,0.0001);
45221      abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_DIAGRAM):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
45222      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
45223      end;
MPRINT(EM_DIAGRAM):   end;
45224      else do;
MPRINT(EM_DIAGRAM):   else do;
45225      abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_DIAGRAM):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
45226      origchar = character_value;
MPRINT(EM_DIAGRAM):   origchar = character_value;
45227      end;
MPRINT(EM_DIAGRAM):   end;
45228      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
45229      output;
MPRINT(EM_DIAGRAM):   output;
45230      end;
MPRINT(EM_DIAGRAM):   end;
45231      else do;
MPRINT(EM_DIAGRAM):   else do;
45232      if missing(character_value) then do;
MPRINT(EM_DIAGRAM):   if missing(character_value) then do;
45233      numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_DIAGRAM):   numeric_value = round(numeric_value, 0.0001);
45234      abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(NUMERIC_VALUE);
45235      origval = numeric_value;
MPRINT(EM_DIAGRAM):   origval = numeric_value;
45236      end;
MPRINT(EM_DIAGRAM):   end;
45237      else do;
MPRINT(EM_DIAGRAM):   else do;
45238      abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_DIAGRAM):   abovetext = ">= "||strip(CHARACTER_VALUE);
45239      origval = character_value;
MPRINT(EM_DIAGRAM):   origval = character_value;
45240      end;
MPRINT(EM_DIAGRAM):   end;
45241      branch = branch + 1;
MPRINT(EM_DIAGRAM):   branch = branch + 1;
45242      output;
MPRINT(EM_DIAGRAM):   output;
45243      end;
MPRINT(EM_DIAGRAM):   end;
45244      end;
MPRINT(EM_DIAGRAM):   end;
45245      end;
MPRINT(EM_DIAGRAM):   end;
45246      else do;
MPRINT(EM_DIAGRAM):   else do;
45247      if first.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value then do;
45248      flag = 0;
MPRINT(EM_DIAGRAM):   flag = 0;
45249      abovetext = CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   abovetext = CHARACTER_VALUE;
45250      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
45251      if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_DIAGRAM):   if first.numeric_value AND last.numeric_value then do;
45252      output;
MPRINT(EM_DIAGRAM):   output;
45253      end;
MPRINT(EM_DIAGRAM):   end;
45254      end;
MPRINT(EM_DIAGRAM):   end;
45255      else if last.numeric_value then do;
MPRINT(EM_DIAGRAM):   else if last.numeric_value then do;
45256      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
45257      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
45258      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
45259      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
45260      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
45261      end;
MPRINT(EM_DIAGRAM):   end;
45262      else do;
MPRINT(EM_DIAGRAM):   else do;
45263      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
45264      flag = 1;
MPRINT(EM_DIAGRAM):   flag = 1;
45265      end;
MPRINT(EM_DIAGRAM):   end;
45266      end;
MPRINT(EM_DIAGRAM):   end;
45267      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
45268      output;
MPRINT(EM_DIAGRAM):   output;
45269      end;
MPRINT(EM_DIAGRAM):   end;
45270      else do;
MPRINT(EM_DIAGRAM):   else do;
45271      if flag=0 then do;
MPRINT(EM_DIAGRAM):   if flag=0 then do;
45272      tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
MPRINT(EM_DIAGRAM):   tempstring = strip(abovetext)||", "||CHARACTER_VALUE;
45273      length = length(strip(tempstring));
MPRINT(EM_DIAGRAM):   length = length(strip(tempstring));
45274      if length < 32 then do;
MPRINT(EM_DIAGRAM):   if length < 32 then do;
45275      abovetext = strip(tempstring);
MPRINT(EM_DIAGRAM):   abovetext = strip(tempstring);
45276      end;
MPRINT(EM_DIAGRAM):   end;
45277      else do;
MPRINT(EM_DIAGRAM):   else do;
45278      abovetext = strip(abovetext)||", ...";
MPRINT(EM_DIAGRAM):   abovetext = strip(abovetext)||", ...";
45279      flag=1;
MPRINT(EM_DIAGRAM):   flag=1;
45280      end;
MPRINT(EM_DIAGRAM):   end;
45281      end;
MPRINT(EM_DIAGRAM):   end;
45282      branch = numeric_value;
MPRINT(EM_DIAGRAM):   branch = numeric_value;
45283      end;
MPRINT(EM_DIAGRAM):   end;
45284      end;
MPRINT(EM_DIAGRAM):   end;
45285      keep parent branch abovetext;
MPRINT(EM_DIAGRAM):   keep parent branch abovetext;
45286      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      45159:25   45174:26   45188:24   45188:47   45197:26   45208:26   45221:24   45221:47   45234:26   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      45239:11   
NOTE: There were 8 observations read from the data set WORK.TEMPOUTRULES.
NOTE: The data set WORK.TEMPABOVE has 16 observations and 3 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45287      /* MIssing value to abovetext */
45288      data tempmissing;
MPRINT(EM_DIAGRAM):   data tempmissing;
45289      set WORK.OUTRULES_TREE_3HI3CVZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTRULES_TREE_3HI3CVZ;
45290      if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_DIAGRAM):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
45291      rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_DIAGRAM):   rename node=parent numeric_value=branch character_value=misschar;
45292      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 343 observations read from the data set WORK.OUTRULES_TREE_3HI3CVZ.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45293      proc sort data=work.tempabove;
MPRINT(EM_DIAGRAM):   proc sort data=work.tempabove;
45294      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
45295      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 16 observations read from the data set WORK.TEMPABOVE.
NOTE: The data set WORK.TEMPABOVE has 16 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45296      proc sort data=EMWS3.Clus_OUTNODES out=tempoutnodes;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_OUTNODES out=tempoutnodes;
45297      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
45298      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 17 observations and 36 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45299      proc sort data=tempmissing;
MPRINT(EM_DIAGRAM):   proc sort data=tempmissing;
45300      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
45301      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 8 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45302      data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
45303      merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
MPRINT(EM_DIAGRAM):   merge work.tempabove tempoutNodes(drop=abovetext ) tempmissing(in=_a);
45304      by parent branch;
MPRINT(EM_DIAGRAM):   by parent branch;
45305      length traintotal validtotal 8;
MPRINT(EM_DIAGRAM):   length traintotal validtotal 8;
45306      retain traintotal validtotal;
MPRINT(EM_DIAGRAM):   retain traintotal validtotal;
45307      if _a then do;
MPRINT(EM_DIAGRAM):   if _a then do;
45308      if ^MISSING(abovetext) then do;
MPRINT(EM_DIAGRAM):   if ^MISSING(abovetext) then do;
45309      abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext= strip(abovetext)||" Falta Or";
45310      end;
MPRINT(EM_DIAGRAM):   end;
45311      else do;
MPRINT(EM_DIAGRAM):   else do;
45312      abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   abovetext = " Sólo valores ausentes";
45313      end;
MPRINT(EM_DIAGRAM):   end;
45314      end;
MPRINT(EM_DIAGRAM):   end;
45315      if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   if MISSING(abovetext) then abovetext="Valores no ausentes";
45316      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
45317      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
45318      validtotal=VN;
MPRINT(EM_DIAGRAM):   validtotal=VN;
45319      end;
MPRINT(EM_DIAGRAM):   end;
45320      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Total de entrenamiento";
45321      drop role rank stat misschar belowtext;
MPRINT(EM_DIAGRAM):   drop role rank stat misschar belowtext;
45322      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable VN is uninitialized.
NOTE: There were 16 observations read from the data set WORK.TEMPABOVE.
NOTE: There were 17 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 8 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.CLUS_OUTNODES has 17 observations and 38 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

45323      proc sort data=WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_outnodes;
45324      by node;
MPRINT(EM_DIAGRAM):   by node;
45325      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set WORK.CLUS_OUTNODES has 17 observations and 38 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45326      proc sort data=tempbelow;
MPRINT(EM_DIAGRAM):   proc sort data=tempbelow;
45327      by node;
MPRINT(EM_DIAGRAM):   by node;
45328      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45329      data WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   data WORK.Clus_outnodes;
45330      merge WORK.Clus_outnodes tempbelow;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_outnodes tempbelow;
45331      by node;
MPRINT(EM_DIAGRAM):   by node;
45332      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: There were 8 observations read from the data set WORK.TEMPBELOW.
NOTE: The data set WORK.CLUS_OUTNODES has 17 observations and 39 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: There were 3000 observations read from the data set EMWS3.IDS_DATA.
NOTE: Vista EMWS3.EM_CLUS.VIEW ha utilizado (Tiempo de proceso total):
      real time           4.46 seconds
      cpu time            4.47 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.CLUS_TRAIN.
45333      data tempoutstats;
MPRINT(EM_DIAGRAM):    data tempoutstats;
45334      set WORK.OUTSTATS_TREE_3HI3CVZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_3HI3CVZ;
45335      length tarlevel $8;
MPRINT(EM_DIAGRAM):   length tarlevel $8;
45336      tarlevel ="NOMINAL";
MPRINT(EM_DIAGRAM):   tarlevel ="NOMINAL";
45337      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 204 observations read from the data set WORK.OUTSTATS_TREE_3HI3CVZ.
NOTE: The data set WORK.TEMPOUTSTATS has 204 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45338      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS3.Clus_TREE_PLOT;
45339      length NODETEXT TEXTALL $800 N NODECOLOR 8;
MPRINT(EM_DIAGRAM):   length NODETEXT TEXTALL $800 N NODECOLOR 8;
45340      set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
45341      label parent = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentID_vlabel, noquote))" depth = "%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, noquote))" belowtext= "%sysfunc(sasmsg(sashelp.dmine, rpt_belowtext_vlabel, noquote))" abovetext =
45342         "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))" linkwidth = "%sysfunc(sasmsg(sashelp.dmine, rpt_linkwidth_vlabel, noquote))" nodetext = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodetext_vlabel, noquote))" textall =
45343         "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))" N = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainn_vlabel, noquote))" nodecolor = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))" node =
45344         "%sysfunc(sasmsg(sashelp.dmine, rpt_node_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label parent = "Id padre" depth = "Profundidad" belowtext= "Por debajo del texto" abovetext = "Por encima del texto" linkwidth = "Anchura del enlace" nodetext = "Texto del nodo" textall = "Todo el texto" N = "Entrenar: número de 
observaciones" nodecolor = "Color del nodo" node = "Nodo";
45345      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR;
45346      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable TEXTALL is uninitialized.
NOTE: Variable NODECOLOR is uninitialized.
NOTE: There were 17 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

45347      proc sort data=EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_TREE_PLOT;
45348      by node;
MPRINT(EM_DIAGRAM):   by node;
45349      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 10 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45350      proc sort data=tempoutstats;
MPRINT(EM_DIAGRAM):   proc sort data=tempoutstats;
45351      by node;
MPRINT(EM_DIAGRAM):   by node;
45352      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 204 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 204 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45353      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):    data EMWS3.Clus_TREE_PLOT;
45354      merge EMWS3.Clus_TREE_PLOT tempoutstats;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_TREE_PLOT tempoutstats;
45355      length text $800 _RASE_ P__SEGMENT_9 8;
MPRINT(EM_DIAGRAM):   length text $800 _RASE_ P__SEGMENT_9 8;
45356      retain P__SEGMENT_9 eventlevel;
MPRINT(EM_DIAGRAM):   retain P__SEGMENT_9 eventlevel;
45357      by node;
MPRINT(EM_DIAGRAM):   by node;
45358      if statname='N' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='N' then N=statvalue;
45359      if statname='NPRIORS' then N=statvalue;
MPRINT(EM_DIAGRAM):   if statname='NPRIORS' then N=statvalue;
45360      if statname='PREDICTION' then eventlevel=category;
MPRINT(EM_DIAGRAM):   if statname='PREDICTION' then eventlevel=category;
45361      _RASE_ = .;
MPRINT(EM_DIAGRAM):   _RASE_ = .;
45362      if tarlevel ^= 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if tarlevel ^= 'INTERVAL' then do;
45363      if STATNAME = 'PROBABILITY' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PROBABILITY' then do;
45364      if CATEGORY=EVENTLEVEL then do;
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL then do;
45365      nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   nodetext = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
45366      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
45367      P__SEGMENT_9 = round(STATVALUE, .01);
MPRINT(EM_DIAGRAM):   P__SEGMENT_9 = round(STATVALUE, .01);
45368      end;
MPRINT(EM_DIAGRAM):   end;
45369      else do;
MPRINT(EM_DIAGRAM):   else do;
45370      text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
MPRINT(EM_DIAGRAM):   text = right(put(strip(CATEGORY)||':', $12.))|| right(put(STATVALUE, percent13.1));
45371      end;
MPRINT(EM_DIAGRAM):   end;
45372      textall = strip(textall)||'0A'x||strip( text);
MPRINT(EM_DIAGRAM):   textall = strip(textall)||'0A'x||strip( text);
45373      end;
MPRINT(EM_DIAGRAM):   end;
45374      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
45375      nodetext = trim(nodetext)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext = trim(nodetext)||'0A'x||" Número:"|| put(N, 13.);
45376      textall = trim(textall)||'0A'x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   textall = trim(textall)||'0A'x||" Número:"|| put(N, 13.);
45377      output EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS3.Clus_TREE_PLOT;
45378      end;
MPRINT(EM_DIAGRAM):   end;
45379      end;
MPRINT(EM_DIAGRAM):   end;
45380      else do;
MPRINT(EM_DIAGRAM):   else do;
45381      if statname='RASE' then _RASE_=statvalue;
MPRINT(EM_DIAGRAM):   if statname='RASE' then _RASE_=statvalue;
45382      label _RASE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_trase_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label _RASE_ = "Entrenar: error cuadrado del promedio de la raíz";
45383      if STATNAME = 'PREDICTION' then do;
MPRINT(EM_DIAGRAM):   if STATNAME = 'PREDICTION' then do;
45384      nodetext= "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"|| put(STATVALUE, 13.4)||'0A'x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )):"|| put(N, 13.);
MPRINT(EM_DIAGRAM):   nodetext= "Promedio"|| put(STATVALUE, 13.4)||'0A'x|| "Número:"|| put(N, 13.);
45385      textall = nodetext;
MPRINT(EM_DIAGRAM):   textall = nodetext;
45386      P__SEGMENT_9 = STATVALUE;
MPRINT(EM_DIAGRAM):   P__SEGMENT_9 = STATVALUE;
45387      ;
MPRINT(EM_DIAGRAM):   ;
45388      ;
MPRINT(EM_DIAGRAM):   ;
45389      end;
MPRINT(EM_DIAGRAM):   end;
45390      if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
45391      output EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   output EMWS3.Clus_TREE_PLOT;
45392      end;
MPRINT(EM_DIAGRAM):   end;
45393      ;
MPRINT(EM_DIAGRAM):   ;
45394      end;
MPRINT(EM_DIAGRAM):   end;
45395      label P__SEGMENT_9 = "%sysfunc(sasmsg(sashelp.dmine, rpt_predictedvar_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label P__SEGMENT_9 = "Variable predicha";
45396      keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_9;
MPRINT(EM_DIAGRAM):   keep NODE PARENT DEPTH BELOWTEXT ABOVETEXT LINKWIDTH NODETEXT TEXTALL N NODECOLOR _RASE_ P__SEGMENT_9;
45397      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: There were 204 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 12 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

45398      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
45399      set WORK.OUTSTATS_TREE_3HI3CVZ;
MPRINT(EM_DIAGRAM):   set WORK.OUTSTATS_TREE_3HI3CVZ;
45400      retain eventlevel;
MPRINT(EM_DIAGRAM):   retain eventlevel;
45401      if STATNAME='PREDICTION' then eventlevel=CATEGORY;
MPRINT(EM_DIAGRAM):   if STATNAME='PREDICTION' then eventlevel=CATEGORY;
45402      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 204 observations read from the data set WORK.OUTSTATS_TREE_3HI3CVZ.
NOTE: The data set WORK.TEMPCOLOR has 204 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45403      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
45404      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
45405      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
45406      if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
MPRINT(EM_DIAGRAM):   if CATEGORY=EVENTLEVEL AND STATNAME="PROBABILITY";
45407      end;
MPRINT(EM_DIAGRAM):   end;
45408      else do;
MPRINT(EM_DIAGRAM):   else do;
45409      if STATNAME="PREDICTION";
MPRINT(EM_DIAGRAM):   if STATNAME="PREDICTION";
45410      end;
MPRINT(EM_DIAGRAM):   end;
45411      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 204 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 17 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45412      data tempcolor;
MPRINT(EM_DIAGRAM):   data tempcolor;
45413      set tempcolor;
MPRINT(EM_DIAGRAM):   set tempcolor;
45414      length nodecolor 8;
MPRINT(EM_DIAGRAM):   length nodecolor 8;
45415      if 'NOMINAL' ne 'INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if 'NOMINAL' ne 'INTERVAL' then do;
45416      nodecolor = round(100*(STATVALUE), .01);
MPRINT(EM_DIAGRAM):   nodecolor = round(100*(STATVALUE), .01);
45417      end;
MPRINT(EM_DIAGRAM):   end;
45418      else do;
MPRINT(EM_DIAGRAM):   else do;
45419      nodecolor=round(statvalue, .01);
MPRINT(EM_DIAGRAM):   nodecolor=round(statvalue, .01);
45420      end;
MPRINT(EM_DIAGRAM):   end;
45421      keep node nodecolor;
MPRINT(EM_DIAGRAM):   keep node nodecolor;
45422      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 17 observations and 2 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45423      proc sort data=EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_TREE_PLOT;
45424      by node;
MPRINT(EM_DIAGRAM):   by node;
45425      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 12 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45426      proc sort data=tempcolor;
MPRINT(EM_DIAGRAM):   proc sort data=tempcolor;
45427      by node;
MPRINT(EM_DIAGRAM):   by node;
45428      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set WORK.TEMPCOLOR has 17 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45429      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_TREE_PLOT;
45430      merge EMWS3.Clus_TREE_PLOT tempcolor;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_TREE_PLOT tempcolor;
45431      by node;
MPRINT(EM_DIAGRAM):   by node;
45432      length traintotal 8;
MPRINT(EM_DIAGRAM):   length traintotal 8;
45433      retain traintotal;
MPRINT(EM_DIAGRAM):   retain traintotal;
45434      label traintotal = "%sysfunc(sasmsg(sashelp.dmine,  rpt_traintotal_vlabel, noquote))";
MPRINT(EM_DIAGRAM):   label traintotal = "Total de entrenamiento";
45435      if node=1 then do;
MPRINT(EM_DIAGRAM):   if node=1 then do;
45436      traintotal = N;
MPRINT(EM_DIAGRAM):   traintotal = N;
45437      end;
MPRINT(EM_DIAGRAM):   end;
45438      if NODE eq . then delete;
MPRINT(EM_DIAGRAM):   if NODE eq . then delete;
45439      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: There were 17 observations read from the data set WORK.TEMPCOLOR.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 13 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45440      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_TREE_PLOT;
45441      set EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_TREE_PLOT;
45442      textall = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote, )):"|| put(Node, 13.)||'0A'x||trim(textall);
MPRINT(EM_DIAGRAM):   textall = "Id de nodo:"|| put(Node, 13.)||'0A'x||trim(textall);
45443      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 13 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45444      data tempout;
MPRINT(EM_DIAGRAM):   data tempout;
45445      set WORK.Clus_outnodes;
MPRINT(EM_DIAGRAM):   set WORK.Clus_outnodes;
45446      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set WORK.CLUS_OUTNODES.
NOTE: The data set WORK.TEMPOUT has 17 observations and 39 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45447      proc sort data=tempout;
MPRINT(EM_DIAGRAM):   proc sort data=tempout;
45448      by descending P__SEGMENT_9;
MPRINT(EM_DIAGRAM):   by descending P__SEGMENT_9;
45449      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TEMPOUT has 17 observations and 39 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45450      data tree_temp;
MPRINT(EM_DIAGRAM):   data tree_temp;
45451      set tempout;
MPRINT(EM_DIAGRAM):   set tempout;
45452      if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
45453      label index="%sysfunc(sasmsg(sashelp.dmine, rpt_leafindex_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label index= "Índice de hoja";
45454      label percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percevent_train = "Casos de porcentaje";
45455      label perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label perc_train = "Porcentaje de evento";
45456      label tprob="%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel  , NOQUOTE, %nrbquote()))";
MPRINT(EM_DIAGRAM):   label tprob= "Porcentaje de entrenamiento ";
45457      tprob = round(P__SEGMENT_9, .01);
MPRINT(EM_DIAGRAM):   tprob = round(P__SEGMENT_9, .01);
45458      percevent_train = round ( tprob*100, .01);
MPRINT(EM_DIAGRAM):   percevent_train = round ( tprob*100, .01);
45459      *perc_train =round( ( N / traintotal)*100, .001);
MPRINT(EM_DIAGRAM):   *perc_train =round( ( N / traintotal)*100, .001);
45460      perc_train =round( ( N / traintotal), .01);
MPRINT(EM_DIAGRAM):   perc_train =round( ( N / traintotal), .01);
45461      if missing(perc_train) then perc_train = round( linkwidth*100, .001);
MPRINT(EM_DIAGRAM):   if missing(perc_train) then perc_train = round( linkwidth*100, .001);
45462      index = _n_;
MPRINT(EM_DIAGRAM):   index = _n_;
45463      keep NODE index tprob perc_train percevent_train
45464      ;
MPRINT(EM_DIAGRAM):   keep NODE index tprob perc_train percevent_train ;
45465      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set WORK.TEMPOUT.
NOTE: The data set WORK.TREE_TEMP has 9 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45466      proc sort data=tree_temp;
MPRINT(EM_DIAGRAM):   proc sort data=tree_temp;
45467      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
45468      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 9 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set WORK.TREE_TEMP has 9 observations and 5 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45469      proc sort data=EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_TREE_PLOT;
45470      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
45471      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 13 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45472      data EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_TREE_PLOT;
45473      merge EMWS3.Clus_TREE_PLOT tree_temp;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_TREE_PLOT tree_temp;
45474      by NODE;
MPRINT(EM_DIAGRAM):   by NODE;
45475      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: There were 9 observations read from the data set WORK.TREE_TEMP.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 17 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45476      proc sort data=EMWS3.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_TREE_PLOT;
45477      by node index;
MPRINT(EM_DIAGRAM):   by node index;
45478      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 17 observations read from the data set EMWS3.CLUS_TREE_PLOT.
NOTE: The data set EMWS3.CLUS_TREE_PLOT has 17 observations and 17 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45479      title9 ' ';
MPRINT(EM_DIAGRAM):    title9 ' ';
45480      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_VariableImportance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Importancia de la variable";
45481      proc print data=EMWS3.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS3.Clus_OUTIMPORT(where=(IMPORTANCE>0)) noobs label;
45482      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 45 observations read from the data set EMWS3.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45483      title10;
MPRINT(EM_DIAGRAM):   title10;
45484      data WORK.M3TG_AN6;
MPRINT(EM_DIAGRAM):    data WORK.M3TG_AN6;
45485      set WORK.M3TG_AN6;
MPRINT(EM_DIAGRAM):   set WORK.M3TG_AN6;
45486      if role eq 'REJECTED' then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if role eq 'REJECTED' then role = 'INPUT';
45487      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1205 observations read from the data set WORK.M3TG_AN6.
NOTE: The data set WORK.M3TG_AN6 has 1205 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45488      proc sort data=EMWS3.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Clus_OUTIMPORT out=WORK.Clus_GRAPHVARS(keep=NAME);
45489      where IMPORTANCE>0;
MPRINT(EM_DIAGRAM):   where IMPORTANCE>0;
45490      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
45491      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 45 observations read from the data set EMWS3.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0;
NOTE: The data set WORK.CLUS_GRAPHVARS has 45 observations and 1 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45492      proc sort data = WORK.M3TG_AN6;
MPRINT(EM_DIAGRAM):   proc sort data = WORK.M3TG_AN6;
45493      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
45494      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1205 observations read from the data set WORK.M3TG_AN6.
NOTE: The data set WORK.M3TG_AN6 has 1205 observations and 21 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45495      data WORK.M3TG_AN6;
MPRINT(EM_DIAGRAM):   data WORK.M3TG_AN6;
45496      merge WORK.M3TG_AN6 WORK.Clus_GRAPHVARS(in=_b_);
MPRINT(EM_DIAGRAM):   merge WORK.M3TG_AN6 WORK.Clus_GRAPHVARS(in=_b_);
45497      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
45498      if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
MPRINT(EM_DIAGRAM):   if _b_ or ROLE = "FREQ" or REPORT="Y" then output;
45499      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1205 observations read from the data set WORK.M3TG_AN6.
NOTE: There were 45 observations read from the data set WORK.CLUS_GRAPHVARS.
NOTE: The data set WORK.M3TG_AN6 has 45 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45500      data WORK.M3TG_AN6;
MPRINT(EM_DIAGRAM):    data WORK.M3TG_AN6;
45501      set WORK.M3TG_AN6 end=_eof_ nobs=_nobs_;
MPRINT(EM_DIAGRAM):   set WORK.M3TG_AN6 end=_eof_ nobs=_nobs_;
45502      output;
MPRINT(EM_DIAGRAM):   output;
45503      if _eof_ then do;
MPRINT(EM_DIAGRAM):   if _eof_ then do;
45504      name = '_SEGMENT_';
MPRINT(EM_DIAGRAM):   name = '_SEGMENT_';
45505      ROLE = 'BY';
MPRINT(EM_DIAGRAM):   ROLE = 'BY';
45506      LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
45507      LABEL = 'Segment Variable';
MPRINT(EM_DIAGRAM):   LABEL = 'Segment Variable';
45508      TYPE = 'N';
MPRINT(EM_DIAGRAM):   TYPE = 'N';
45509      FORMAT = '';
MPRINT(EM_DIAGRAM):   FORMAT = '';
45510      INFORMAT = '';
MPRINT(EM_DIAGRAM):   INFORMAT = '';
45511      output;
MPRINT(EM_DIAGRAM):   output;
45512      end;
MPRINT(EM_DIAGRAM):   end;
45513      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 45 observations read from the data set WORK.M3TG_AN6.
NOTE: The data set WORK.M3TG_AN6 has 46 observations and 21 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45514      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
45515      * Clus: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   * Clus: STDIZE Variables Macro ;
45516      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
45517      %macro stdizevar;
45518          APPLIC ARGIC BANK BASIC BENSON BUSH CARTER CHASTITI COMP CUTE DIMENS DISEAS
45519         DISPLAI DOCTOR EDWARD EXTERMIN GATEWAI GORDON HAND ILLINOI INTELLECT JAKE JIMMI
45520         LIVNI MED MEDIC MOTIF NET OWNER PATIENT PITT PROLIN REDUND SERA SERDAR SERVER
45521         SHAME SHNEKENDORF SOVIET SUNO SURREND URBANA UTEXA WINDOW ZUMA
45522      %mend stdizevar;
45523      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45524      * Clus: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   * Clus: Computing Summary Statistics;
45525      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45526      proc stdize
45527      data = EMWS3.Clus_TRAIN
45528      out=_null_
45529      outstat=WORK.Clus_STAT
45530      add=0 fuzz=1E-14 initial=MAD
45531      vardef=df
45532      method=STD
45533      mult=1
45534      pctlmtd=ORD_STAT pctldef=2
45535      pctlpts=(
45536      0
45537      100
45538      )
45539      ;
MPRINT(EM_DIAGRAM):   proc stdize data = EMWS3.Clus_TRAIN out=_null_ outstat=WORK.Clus_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 100 ) ;
MPRINT(EM_DIAGRAM):   var
45540      var %stdizevar;
MPRINT(STDIZEVAR):   APPLIC ARGIC BANK BASIC BENSON BUSH CARTER CHASTITI COMP CUTE DIMENS DISEAS DISPLAI DOCTOR EDWARD EXTERMIN GATEWAI GORDON HAND ILLINOI INTELLECT JAKE JIMMI LIVNI MED MEDIC MOTIF NET OWNER PATIENT PITT PROLIN REDUND SERA SERDAR SERVER 
SHAME SHNEKENDORF SOVIET SUNO SURREND URBANA UTEXA WINDOW ZUMA
MPRINT(EM_DIAGRAM):  ;
45541      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: INITIAL= will be ignored.
NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: Vista EMWS3.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           4.20 seconds
      cpu time            4.21 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.IDS_DATA.
NOTE: There were 3000 observations read from the data set EMWS3.CLUS_TRAIN.
NOTE: The data set WORK.CLUS_STAT has 10 observations and 46 variables.
NOTE: PROCEDURE STDIZE ha utilizado (Tiempo de proceso total):
      real time           4.21 seconds
      cpu time            4.21 seconds
      

MPRINT(EM_DIAGRAM):   quit;
45542      quit;

45543      data WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):    data WORK.Clus_MINMAX;
45544      set WORK.Clus_STAT;
MPRINT(EM_DIAGRAM):   set WORK.Clus_STAT;
45545      where _TYPE_ in('P0','P100');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('P0','P100');
45546      if _TYPE_='P0' then _TYPE_='MIN';
MPRINT(EM_DIAGRAM):   if _TYPE_='P0' then _TYPE_='MIN';
45547      else if _TYPE_='P100' then _TYPE_='MAX';
MPRINT(EM_DIAGRAM):   else if _TYPE_='P100' then _TYPE_='MAX';
45548      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set WORK.CLUS_STAT.
      WHERE _TYPE_ in ('P0', 'P100');
NOTE: The data set WORK.CLUS_MINMAX has 2 observations and 46 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45549      proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.Clus_MINMAX out=WORK.Clus_MINMAX(drop=_LABEL_ rename=(_NAME_=_VARIABLE_));
45550      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
45551      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set WORK.CLUS_MINMAX.
NOTE: The data set WORK.CLUS_MINMAX has 45 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45552      data WORK.Clus_UGRID;
MPRINT(EM_DIAGRAM):    data WORK.Clus_UGRID;
45553      set WORK.Clus_MINMAX;
MPRINT(EM_DIAGRAM):   set WORK.Clus_MINMAX;
45554      B1 = MIN + (1-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B1 = MIN + (1-1)*(MAX-MIN)/8;
45555      B2 = MIN + (2-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B2 = MIN + (2-1)*(MAX-MIN)/8;
45556      B3 = MIN + (3-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B3 = MIN + (3-1)*(MAX-MIN)/8;
45557      B4 = MIN + (4-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B4 = MIN + (4-1)*(MAX-MIN)/8;
45558      B5 = MIN + (5-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B5 = MIN + (5-1)*(MAX-MIN)/8;
45559      B6 = MIN + (6-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B6 = MIN + (6-1)*(MAX-MIN)/8;
45560      B7 = MIN + (7-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B7 = MIN + (7-1)*(MAX-MIN)/8;
45561      B8 = MIN + (8-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B8 = MIN + (8-1)*(MAX-MIN)/8;
45562      B9 = MIN + (9-1)*(MAX-MIN)/8;
MPRINT(EM_DIAGRAM):   B9 = MIN + (9-1)*(MAX-MIN)/8;
45563      drop MIN MAX;
MPRINT(EM_DIAGRAM):   drop MIN MAX;
45564      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 45 observations read from the data set WORK.CLUS_MINMAX.
NOTE: The data set WORK.CLUS_UGRID has 45 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45565      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
45566      * Clus: creando formatos para las variables de intervalo de agrupamiento;
MPRINT(EM_DIAGRAM):   * Clus: creando formatos para las variables de intervalo de agrupamiento;
45567      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45568      proc format;
MPRINT(EM_DIAGRAM):   proc format;
45569      value F1_
45570      0-0.03136499177946 = "0:0.0314"
45571      0.03136499177946-0.06272998355892 = "0.0314:0.0627"
45572      0.06272998355892-0.09409497533838 = "0.0627:0.0941"
45573      0.09409497533838-0.12545996711785 = "0.0941:0.1255"
45574      0.12545996711785-0.15682495889731 = "0.1255:0.1568"
45575      0.15682495889731-0.18818995067677 = "0.1568:0.1882"
45576      0.18818995067677-0.21955494245624 = "0.1882:0.2196"
45577      0.21955494245624-0.2509199342357 = "0.2196:0.2509"
45578      ;
MPRINT(EM_DIAGRAM):   value F1_ 0-0.03136499177946 = "0:0.0314" 0.03136499177946-0.06272998355892 = "0.0314:0.0627" 0.06272998355892-0.09409497533838 = "0.0627:0.0941" 0.09409497533838-0.12545996711785 = "0.0941:0.1255" 0.12545996711785-0.15682495889731 = 
"0.1255:0.1568" 0.15682495889731-0.18818995067677 = "0.1568:0.1882" 0.18818995067677-0.21955494245624 = "0.1882:0.2196" 0.21955494245624-0.2509199342357 = "0.2196:0.2509" ;
NOTE: Format F1_ has been output.
45579      value F2_
45580      0-0.0406252412429 = "0:0.0406"
45581      0.0406252412429-0.08125048248581 = "0.0406:0.0813"
45582      0.08125048248581-0.12187572372871 = "0.0813:0.1219"
45583      0.12187572372871-0.16250096497162 = "0.1219:0.1625"
45584      0.16250096497162-0.20312620621452 = "0.1625:0.2031"
45585      0.20312620621452-0.24375144745743 = "0.2031:0.2438"
45586      0.24375144745743-0.28437668870033 = "0.2438:0.2844"
45587      0.28437668870033-0.32500192994324 = "0.2844:0.325"
45588      ;
MPRINT(EM_DIAGRAM):   value F2_ 0-0.0406252412429 = "0:0.0406" 0.0406252412429-0.08125048248581 = "0.0406:0.0813" 0.08125048248581-0.12187572372871 = "0.0813:0.1219" 0.12187572372871-0.16250096497162 = "0.1219:0.1625" 0.16250096497162-0.20312620621452 = 
"0.1625:0.2031" 0.20312620621452-0.24375144745743 = "0.2031:0.2438" 0.24375144745743-0.28437668870033 = "0.2438:0.2844" 0.28437668870033-0.32500192994324 = "0.2844:0.325" ;
NOTE: Format F2_ has been output.
45589      value F3_
45590      0-0.03413223476769 = "0:0.0341"
45591      0.03413223476769-0.06826446953539 = "0.0341:0.0683"
45592      0.06826446953539-0.10239670430309 = "0.0683:0.1024"
45593      0.10239670430309-0.13652893907078 = "0.1024:0.1365"
45594      0.13652893907078-0.17066117383848 = "0.1365:0.1707"
45595      0.17066117383848-0.20479340860618 = "0.1707:0.2048"
45596      0.20479340860618-0.23892564337387 = "0.2048:0.2389"
45597      0.23892564337387-0.27305787814157 = "0.2389:0.2731"
45598      ;
MPRINT(EM_DIAGRAM):   value F3_ 0-0.03413223476769 = "0:0.0341" 0.03413223476769-0.06826446953539 = "0.0341:0.0683" 0.06826446953539-0.10239670430309 = "0.0683:0.1024" 0.10239670430309-0.13652893907078 = "0.1024:0.1365" 0.13652893907078-0.17066117383848 = 
"0.1365:0.1707" 0.17066117383848-0.20479340860618 = "0.1707:0.2048" 0.20479340860618-0.23892564337387 = "0.2048:0.2389" 0.23892564337387-0.27305787814157 = "0.2389:0.2731" ;
NOTE: Format F3_ has been output.
45599      value F4_
45600      0-0.01686974593374 = "0:0.0169"
45601      0.01686974593374-0.03373949186749 = "0.0169:0.0337"
45602      0.03373949186749-0.05060923780123 = "0.0337:0.0506"
45603      0.05060923780123-0.06747898373498 = "0.0506:0.0675"
45604      0.06747898373498-0.08434872966872 = "0.0675:0.0843"
45605      0.08434872966872-0.10121847560247 = "0.0843:0.1012"
45606      0.10121847560247-0.11808822153622 = "0.1012:0.1181"
45607      0.11808822153622-0.13495796746996 = "0.1181:0.135"
45608      ;
MPRINT(EM_DIAGRAM):   value F4_ 0-0.01686974593374 = "0:0.0169" 0.01686974593374-0.03373949186749 = "0.0169:0.0337" 0.03373949186749-0.05060923780123 = "0.0337:0.0506" 0.05060923780123-0.06747898373498 = "0.0506:0.0675" 0.06747898373498-0.08434872966872 = 
"0.0675:0.0843" 0.08434872966872-0.10121847560247 = "0.0843:0.1012" 0.10121847560247-0.11808822153622 = "0.1012:0.1181" 0.11808822153622-0.13495796746996 = "0.1181:0.135" ;
NOTE: Format F4_ has been output.
45609      value F5_
45610      0-0.05392761821972 = "0:0.0539"
45611      0.05392761821972-0.10785523643945 = "0.0539:0.1079"
45612      0.10785523643945-0.16178285465918 = "0.1079:0.1618"
45613      0.16178285465918-0.21571047287891 = "0.1618:0.2157"
45614      0.21571047287891-0.26963809109864 = "0.2157:0.2696"
45615      0.26963809109864-0.32356570931837 = "0.2696:0.3236"
45616      0.32356570931837-0.3774933275381 = "0.3236:0.3775"
45617      0.3774933275381-0.43142094575783 = "0.3775:0.4314"
45618      ;
MPRINT(EM_DIAGRAM):   value F5_ 0-0.05392761821972 = "0:0.0539" 0.05392761821972-0.10785523643945 = "0.0539:0.1079" 0.10785523643945-0.16178285465918 = "0.1079:0.1618" 0.16178285465918-0.21571047287891 = "0.1618:0.2157" 0.21571047287891-0.26963809109864 = 
"0.2157:0.2696" 0.26963809109864-0.32356570931837 = "0.2696:0.3236" 0.32356570931837-0.3774933275381 = "0.3236:0.3775" 0.3774933275381-0.43142094575783 = "0.3775:0.4314" ;
NOTE: Format F5_ has been output.
45619      value F6_
45620      0-0.01968434885683 = "0:0.0197"
45621      0.01968434885683-0.03936869771367 = "0.0197:0.0394"
45622      0.03936869771367-0.05905304657051 = "0.0394:0.0591"
45623      0.05905304657051-0.07873739542734 = "0.0591:0.0787"
45624      0.07873739542734-0.09842174428418 = "0.0787:0.0984"
45625      0.09842174428418-0.11810609314102 = "0.0984:0.1181"
45626      0.11810609314102-0.13779044199785 = "0.1181:0.1378"
45627      0.13779044199785-0.15747479085469 = "0.1378:0.1575"
45628      ;
MPRINT(EM_DIAGRAM):   value F6_ 0-0.01968434885683 = "0:0.0197" 0.01968434885683-0.03936869771367 = "0.0197:0.0394" 0.03936869771367-0.05905304657051 = "0.0394:0.0591" 0.05905304657051-0.07873739542734 = "0.0591:0.0787" 0.07873739542734-0.09842174428418 = 
"0.0787:0.0984" 0.09842174428418-0.11810609314102 = "0.0984:0.1181" 0.11810609314102-0.13779044199785 = "0.1181:0.1378" 0.13779044199785-0.15747479085469 = "0.1378:0.1575" ;
NOTE: Format F6_ has been output.
45629      value F7_
45630      0-0.02764594358968 = "0:0.0276"
45631      0.02764594358968-0.05529188717937 = "0.0276:0.0553"
45632      0.05529188717937-0.08293783076906 = "0.0553:0.0829"
45633      0.08293783076906-0.11058377435875 = "0.0829:0.1106"
45634      0.11058377435875-0.13822971794844 = "0.1106:0.1382"
45635      0.13822971794844-0.16587566153812 = "0.1382:0.1659"
45636      0.16587566153812-0.19352160512781 = "0.1659:0.1935"
45637      0.19352160512781-0.2211675487175 = "0.1935:0.2212"
45638      ;
MPRINT(EM_DIAGRAM):   value F7_ 0-0.02764594358968 = "0:0.0276" 0.02764594358968-0.05529188717937 = "0.0276:0.0553" 0.05529188717937-0.08293783076906 = "0.0553:0.0829" 0.08293783076906-0.11058377435875 = "0.0829:0.1106" 0.11058377435875-0.13822971794844 = 
"0.1106:0.1382" 0.13822971794844-0.16587566153812 = "0.1382:0.1659" 0.16587566153812-0.19352160512781 = "0.1659:0.1935" 0.19352160512781-0.2211675487175 = "0.1935:0.2212" ;
NOTE: Format F7_ has been output.
45639      value F8_
45640      0-0.01410905630069 = "0:0.0141"
45641      0.01410905630069-0.02821811260138 = "0.0141:0.0282"
45642      0.02821811260138-0.04232716890208 = "0.0282:0.0423"
45643      0.04232716890208-0.05643622520277 = "0.0423:0.0564"
45644      0.05643622520277-0.07054528150347 = "0.0564:0.0705"
45645      0.07054528150347-0.08465433780416 = "0.0705:0.0847"
45646      0.08465433780416-0.09876339410486 = "0.0847:0.0988"
45647      0.09876339410486-0.11287245040555 = "0.0988:0.1129"
45648      ;
MPRINT(EM_DIAGRAM):   value F8_ 0-0.01410905630069 = "0:0.0141" 0.01410905630069-0.02821811260138 = "0.0141:0.0282" 0.02821811260138-0.04232716890208 = "0.0282:0.0423" 0.04232716890208-0.05643622520277 = "0.0423:0.0564" 0.05643622520277-0.07054528150347 = 
"0.0564:0.0705" 0.07054528150347-0.08465433780416 = "0.0705:0.0847" 0.08465433780416-0.09876339410486 = "0.0847:0.0988" 0.09876339410486-0.11287245040555 = "0.0988:0.1129" ;
NOTE: Format F8_ has been output.
45649      value F9_
45650      0-0.02876974945597 = "0:0.0288"
45651      0.02876974945597-0.05753949891195 = "0.0288:0.0575"
45652      0.05753949891195-0.08630924836793 = "0.0575:0.0863"
45653      0.08630924836793-0.11507899782391 = "0.0863:0.1151"
45654      0.11507899782391-0.14384874727989 = "0.1151:0.1438"
45655      0.14384874727989-0.17261849673587 = "0.1438:0.1726"
45656      0.17261849673587-0.20138824619184 = "0.1726:0.2014"
45657      0.20138824619184-0.23015799564782 = "0.2014:0.2302"
45658      ;
MPRINT(EM_DIAGRAM):   value F9_ 0-0.02876974945597 = "0:0.0288" 0.02876974945597-0.05753949891195 = "0.0288:0.0575" 0.05753949891195-0.08630924836793 = "0.0575:0.0863" 0.08630924836793-0.11507899782391 = "0.0863:0.1151" 0.11507899782391-0.14384874727989 = 
"0.1151:0.1438" 0.14384874727989-0.17261849673587 = "0.1438:0.1726" 0.17261849673587-0.20138824619184 = "0.1726:0.2014" 0.20138824619184-0.23015799564782 = "0.2014:0.2302" ;
NOTE: Format F9_ has been output.
45659      value F10_
45660      0-0.05388702316243 = "0:0.0539"
45661      0.05388702316243-0.10777404632487 = "0.0539:0.1078"
45662      0.10777404632487-0.16166106948731 = "0.1078:0.1617"
45663      0.16166106948731-0.21554809264975 = "0.1617:0.2155"
45664      0.21554809264975-0.26943511581218 = "0.2155:0.2694"
45665      0.26943511581218-0.32332213897462 = "0.2694:0.3233"
45666      0.32332213897462-0.37720916213706 = "0.3233:0.3772"
45667      0.37720916213706-0.4310961852995 = "0.3772:0.4311"
45668      ;
MPRINT(EM_DIAGRAM):   value F10_ 0-0.05388702316243 = "0:0.0539" 0.05388702316243-0.10777404632487 = "0.0539:0.1078" 0.10777404632487-0.16166106948731 = "0.1078:0.1617" 0.16166106948731-0.21554809264975 = "0.1617:0.2155" 0.21554809264975-0.26943511581218 
= "0.2155:0.2694" 0.26943511581218-0.32332213897462 = "0.2694:0.3233" 0.32332213897462-0.37720916213706 = "0.3233:0.3772" 0.37720916213706-0.4310961852995 = "0.3772:0.4311" ;
NOTE: Format F10_ has been output.
45669      value F11_
45670      0-0.05168588677007 = "0:0.0517"
45671      0.05168588677007-0.10337177354014 = "0.0517:0.1034"
45672      0.10337177354014-0.15505766031021 = "0.1034:0.1551"
45673      0.15505766031021-0.20674354708028 = "0.1551:0.2067"
45674      0.20674354708028-0.25842943385035 = "0.2067:0.2584"
45675      0.25842943385035-0.31011532062042 = "0.2584:0.3101"
45676      0.31011532062042-0.36180120739049 = "0.3101:0.3618"
45677      0.36180120739049-0.41348709416056 = "0.3618:0.4135"
45678      ;
MPRINT(EM_DIAGRAM):   value F11_ 0-0.05168588677007 = "0:0.0517" 0.05168588677007-0.10337177354014 = "0.0517:0.1034" 0.10337177354014-0.15505766031021 = "0.1034:0.1551" 0.15505766031021-0.20674354708028 = "0.1551:0.2067" 0.20674354708028-0.25842943385035 
= "0.2067:0.2584" 0.25842943385035-0.31011532062042 = "0.2584:0.3101" 0.31011532062042-0.36180120739049 = "0.3101:0.3618" 0.36180120739049-0.41348709416056 = "0.3618:0.4135" ;
NOTE: Format F11_ has been output.
45679      value F12_
45680      0-0.03755016929869 = "0:0.0376"
45681      0.03755016929869-0.07510033859739 = "0.0376:0.0751"
45682      0.07510033859739-0.11265050789608 = "0.0751:0.1127"
45683      0.11265050789608-0.15020067719478 = "0.1127:0.1502"
45684      0.15020067719478-0.18775084649347 = "0.1502:0.1878"
45685      0.18775084649347-0.22530101579217 = "0.1878:0.2253"
45686      0.22530101579217-0.26285118509086 = "0.2253:0.2629"
45687      0.26285118509086-0.30040135438956 = "0.2629:0.3004"
45688      ;
MPRINT(EM_DIAGRAM):   value F12_ 0-0.03755016929869 = "0:0.0376" 0.03755016929869-0.07510033859739 = "0.0376:0.0751" 0.07510033859739-0.11265050789608 = "0.0751:0.1127" 0.11265050789608-0.15020067719478 = "0.1127:0.1502" 0.15020067719478-0.18775084649347 
= "0.1502:0.1878" 0.18775084649347-0.22530101579217 = "0.1878:0.2253" 0.22530101579217-0.26285118509086 = "0.2253:0.2629" 0.26285118509086-0.30040135438956 = "0.2629:0.3004" ;
NOTE: Format F12_ has been output.
45689      value F13_
45690      0-0.03300305937604 = "0:0.033"
45691      0.03300305937604-0.06600611875209 = "0.033:0.066"
45692      0.06600611875209-0.09900917812813 = "0.066:0.099"
45693      0.09900917812813-0.13201223750418 = "0.099:0.132"
45694      0.13201223750418-0.16501529688022 = "0.132:0.165"
45695      0.16501529688022-0.19801835625627 = "0.165:0.198"
45696      0.19801835625627-0.23102141563231 = "0.198:0.231"
45697      0.23102141563231-0.26402447500836 = "0.231:0.264"
45698      ;
MPRINT(EM_DIAGRAM):   value F13_ 0-0.03300305937604 = "0:0.033" 0.03300305937604-0.06600611875209 = "0.033:0.066" 0.06600611875209-0.09900917812813 = "0.066:0.099" 0.09900917812813-0.13201223750418 = "0.099:0.132" 0.13201223750418-0.16501529688022 = 
"0.132:0.165" 0.16501529688022-0.19801835625627 = "0.165:0.198" 0.19801835625627-0.23102141563231 = "0.198:0.231" 0.23102141563231-0.26402447500836 = "0.231:0.264" ;
NOTE: Format F13_ has been output.
45699      value F14_
45700      0-0.03791520014754 = "0:0.0379"
45701      0.03791520014754-0.07583040029508 = "0.0379:0.0758"
45702      0.07583040029508-0.11374560044262 = "0.0758:0.1137"
45703      0.11374560044262-0.15166080059016 = "0.1137:0.1517"
45704      0.15166080059016-0.1895760007377 = "0.1517:0.1896"
45705      0.1895760007377-0.22749120088524 = "0.1896:0.2275"
45706      0.22749120088524-0.26540640103279 = "0.2275:0.2654"
45707      0.26540640103279-0.30332160118033 = "0.2654:0.3033"
45708      ;
MPRINT(EM_DIAGRAM):   value F14_ 0-0.03791520014754 = "0:0.0379" 0.03791520014754-0.07583040029508 = "0.0379:0.0758" 0.07583040029508-0.11374560044262 = "0.0758:0.1137" 0.11374560044262-0.15166080059016 = "0.1137:0.1517" 0.15166080059016-0.1895760007377 = 
"0.1517:0.1896" 0.1895760007377-0.22749120088524 = "0.1896:0.2275" 0.22749120088524-0.26540640103279 = "0.2275:0.2654" 0.26540640103279-0.30332160118033 = "0.2654:0.3033" ;
NOTE: Format F14_ has been output.
45709      value F15_
45710      0-0.03379269874224 = "0:0.0338"
45711      0.03379269874224-0.06758539748448 = "0.0338:0.0676"
45712      0.06758539748448-0.10137809622672 = "0.0676:0.1014"
45713      0.10137809622672-0.13517079496896 = "0.1014:0.1352"
45714      0.13517079496896-0.1689634937112 = "0.1352:0.169"
45715      0.1689634937112-0.20275619245344 = "0.169:0.2028"
45716      0.20275619245344-0.23654889119568 = "0.2028:0.2365"
45717      0.23654889119568-0.27034158993792 = "0.2365:0.2703"
45718      ;
MPRINT(EM_DIAGRAM):   value F15_ 0-0.03379269874224 = "0:0.0338" 0.03379269874224-0.06758539748448 = "0.0338:0.0676" 0.06758539748448-0.10137809622672 = "0.0676:0.1014" 0.10137809622672-0.13517079496896 = "0.1014:0.1352" 0.13517079496896-0.1689634937112 = 
"0.1352:0.169" 0.1689634937112-0.20275619245344 = "0.169:0.2028" 0.20275619245344-0.23654889119568 = "0.2028:0.2365" 0.23654889119568-0.27034158993792 = "0.2365:0.2703" ;
NOTE: Format F15_ has been output.
45719      value F16_
45720      0-0.01027938591286 = "0:0.0103"
45721      0.01027938591286-0.02055877182573 = "0.0103:0.0206"
45722      0.02055877182573-0.0308381577386 = "0.0206:0.0308"
45723      0.0308381577386-0.04111754365147 = "0.0308:0.0411"
45724      0.04111754365147-0.05139692956433 = "0.0411:0.0514"
45725      0.05139692956433-0.0616763154772 = "0.0514:0.0617"
45726      0.0616763154772-0.07195570139007 = "0.0617:0.072"
45727      0.07195570139007-0.08223508730294 = "0.072:0.0822"
45728      ;
MPRINT(EM_DIAGRAM):   value F16_ 0-0.01027938591286 = "0:0.0103" 0.01027938591286-0.02055877182573 = "0.0103:0.0206" 0.02055877182573-0.0308381577386 = "0.0206:0.0308" 0.0308381577386-0.04111754365147 = "0.0308:0.0411" 0.04111754365147-0.05139692956433 = 
"0.0411:0.0514" 0.05139692956433-0.0616763154772 = "0.0514:0.0617" 0.0616763154772-0.07195570139007 = "0.0617:0.072" 0.07195570139007-0.08223508730294 = "0.072:0.0822" ;
NOTE: Format F16_ has been output.
45729      value F17_
45730      0-0.03613338774616 = "0:0.0361"
45731      0.03613338774616-0.07226677549232 = "0.0361:0.0723"
45732      0.07226677549232-0.10840016323848 = "0.0723:0.1084"
45733      0.10840016323848-0.14453355098464 = "0.1084:0.1445"
45734      0.14453355098464-0.18066693873081 = "0.1445:0.1807"
45735      0.18066693873081-0.21680032647697 = "0.1807:0.2168"
45736      0.21680032647697-0.25293371422313 = "0.2168:0.2529"
45737      0.25293371422313-0.28906710196929 = "0.2529:0.2891"
45738      ;
MPRINT(EM_DIAGRAM):   value F17_ 0-0.03613338774616 = "0:0.0361" 0.03613338774616-0.07226677549232 = "0.0361:0.0723" 0.07226677549232-0.10840016323848 = "0.0723:0.1084" 0.10840016323848-0.14453355098464 = "0.1084:0.1445" 0.14453355098464-0.18066693873081 
= "0.1445:0.1807" 0.18066693873081-0.21680032647697 = "0.1807:0.2168" 0.21680032647697-0.25293371422313 = "0.2168:0.2529" 0.25293371422313-0.28906710196929 = "0.2529:0.2891" ;
NOTE: Format F17_ has been output.
45739      value F18_
45740      0-0.03599875352952 = "0:0.036"
45741      0.03599875352952-0.07199750705905 = "0.036:0.072"
45742      0.07199750705905-0.10799626058857 = "0.072:0.108"
45743      0.10799626058857-0.1439950141181 = "0.108:0.144"
45744      0.1439950141181-0.17999376764763 = "0.144:0.18"
45745      0.17999376764763-0.21599252117715 = "0.18:0.216"
45746      0.21599252117715-0.25199127470668 = "0.216:0.252"
45747      0.25199127470668-0.2879900282362 = "0.252:0.288"
45748      ;
MPRINT(EM_DIAGRAM):   value F18_ 0-0.03599875352952 = "0:0.036" 0.03599875352952-0.07199750705905 = "0.036:0.072" 0.07199750705905-0.10799626058857 = "0.072:0.108" 0.10799626058857-0.1439950141181 = "0.108:0.144" 0.1439950141181-0.17999376764763 = 
"0.144:0.18" 0.17999376764763-0.21599252117715 = "0.18:0.216" 0.21599252117715-0.25199127470668 = "0.216:0.252" 0.25199127470668-0.2879900282362 = "0.252:0.288" ;
NOTE: Format F18_ has been output.
45749      value F19_
45750      0-0.01814242201972 = "0:0.0181"
45751      0.01814242201972-0.03628484403944 = "0.0181:0.0363"
45752      0.03628484403944-0.05442726605916 = "0.0363:0.0544"
45753      0.05442726605916-0.07256968807888 = "0.0544:0.0726"
45754      0.07256968807888-0.0907121100986 = "0.0726:0.0907"
45755      0.0907121100986-0.10885453211832 = "0.0907:0.1089"
45756      0.10885453211832-0.12699695413804 = "0.1089:0.127"
45757      0.12699695413804-0.14513937615776 = "0.127:0.1451"
45758      ;
MPRINT(EM_DIAGRAM):   value F19_ 0-0.01814242201972 = "0:0.0181" 0.01814242201972-0.03628484403944 = "0.0181:0.0363" 0.03628484403944-0.05442726605916 = "0.0363:0.0544" 0.05442726605916-0.07256968807888 = "0.0544:0.0726" 0.07256968807888-0.0907121100986 = 
"0.0726:0.0907" 0.0907121100986-0.10885453211832 = "0.0907:0.1089" 0.10885453211832-0.12699695413804 = "0.1089:0.127" 0.12699695413804-0.14513937615776 = "0.127:0.1451" ;
NOTE: Format F19_ has been output.
45759      value F20_
45760      0-0.0326001917119 = "0:0.0326"
45761      0.0326001917119-0.0652003834238 = "0.0326:0.0652"
45762      0.0652003834238-0.0978005751357 = "0.0652:0.0978"
45763      0.0978005751357-0.1304007668476 = "0.0978:0.1304"
45764      0.1304007668476-0.1630009585595 = "0.1304:0.163"
45765      0.1630009585595-0.1956011502714 = "0.163:0.1956"
45766      0.1956011502714-0.2282013419833 = "0.1956:0.2282"
45767      0.2282013419833-0.2608015336952 = "0.2282:0.2608"
45768      ;
MPRINT(EM_DIAGRAM):   value F20_ 0-0.0326001917119 = "0:0.0326" 0.0326001917119-0.0652003834238 = "0.0326:0.0652" 0.0652003834238-0.0978005751357 = "0.0652:0.0978" 0.0978005751357-0.1304007668476 = "0.0978:0.1304" 0.1304007668476-0.1630009585595 = 
"0.1304:0.163" 0.1630009585595-0.1956011502714 = "0.163:0.1956" 0.1956011502714-0.2282013419833 = "0.1956:0.2282" 0.2282013419833-0.2608015336952 = "0.2282:0.2608" ;
NOTE: Format F20_ has been output.
45769      value F21_
45770      0-0.01396699519065 = "0:0.014"
45771      0.01396699519065-0.0279339903813 = "0.014:0.0279"
45772      0.0279339903813-0.04190098557195 = "0.0279:0.0419"
45773      0.04190098557195-0.0558679807626 = "0.0419:0.0559"
45774      0.0558679807626-0.06983497595326 = "0.0559:0.0698"
45775      0.06983497595326-0.08380197114391 = "0.0698:0.0838"
45776      0.08380197114391-0.09776896633456 = "0.0838:0.0978"
45777      0.09776896633456-0.11173596152521 = "0.0978:0.1117"
45778      ;
MPRINT(EM_DIAGRAM):   value F21_ 0-0.01396699519065 = "0:0.014" 0.01396699519065-0.0279339903813 = "0.014:0.0279" 0.0279339903813-0.04190098557195 = "0.0279:0.0419" 0.04190098557195-0.0558679807626 = "0.0419:0.0559" 0.0558679807626-0.06983497595326 = 
"0.0559:0.0698" 0.06983497595326-0.08380197114391 = "0.0698:0.0838" 0.08380197114391-0.09776896633456 = "0.0838:0.0978" 0.09776896633456-0.11173596152521 = "0.0978:0.1117" ;
NOTE: Format F21_ has been output.
45779      value F22_
45780      0-0.04090617216991 = "0:0.0409"
45781      0.04090617216991-0.08181234433982 = "0.0409:0.0818"
45782      0.08181234433982-0.12271851650974 = "0.0818:0.1227"
45783      0.12271851650974-0.16362468867965 = "0.1227:0.1636"
45784      0.16362468867965-0.20453086084956 = "0.1636:0.2045"
45785      0.20453086084956-0.24543703301948 = "0.2045:0.2454"
45786      0.24543703301948-0.28634320518939 = "0.2454:0.2863"
45787      0.28634320518939-0.3272493773593 = "0.2863:0.3272"
45788      ;
MPRINT(EM_DIAGRAM):   value F22_ 0-0.04090617216991 = "0:0.0409" 0.04090617216991-0.08181234433982 = "0.0409:0.0818" 0.08181234433982-0.12271851650974 = "0.0818:0.1227" 0.12271851650974-0.16362468867965 = "0.1227:0.1636" 0.16362468867965-0.20453086084956 
= "0.1636:0.2045" 0.20453086084956-0.24543703301948 = "0.2045:0.2454" 0.24543703301948-0.28634320518939 = "0.2454:0.2863" 0.28634320518939-0.3272493773593 = "0.2863:0.3272" ;
NOTE: Format F22_ has been output.
45789      value F23_
45790      0-0.01411393976743 = "0:0.0141"
45791      0.01411393976743-0.02822787953487 = "0.0141:0.0282"
45792      0.02822787953487-0.0423418193023 = "0.0282:0.0423"
45793      0.0423418193023-0.05645575906974 = "0.0423:0.0565"
45794      0.05645575906974-0.07056969883718 = "0.0565:0.0706"
45795      0.07056969883718-0.08468363860461 = "0.0706:0.0847"
45796      0.08468363860461-0.09879757837205 = "0.0847:0.0988"
45797      0.09879757837205-0.11291151813949 = "0.0988:0.1129"
45798      ;
MPRINT(EM_DIAGRAM):   value F23_ 0-0.01411393976743 = "0:0.0141" 0.01411393976743-0.02822787953487 = "0.0141:0.0282" 0.02822787953487-0.0423418193023 = "0.0282:0.0423" 0.0423418193023-0.05645575906974 = "0.0423:0.0565" 0.05645575906974-0.07056969883718 = 
"0.0565:0.0706" 0.07056969883718-0.08468363860461 = "0.0706:0.0847" 0.08468363860461-0.09879757837205 = "0.0847:0.0988" 0.09879757837205-0.11291151813949 = "0.0988:0.1129" ;
NOTE: Format F23_ has been output.
45799      value F24_
45800      0-0.04129603312424 = "0:0.0413"
45801      0.04129603312424-0.08259206624849 = "0.0413:0.0826"
45802      0.08259206624849-0.12388809937274 = "0.0826:0.1239"
45803      0.12388809937274-0.16518413249699 = "0.1239:0.1652"
45804      0.16518413249699-0.20648016562124 = "0.1652:0.2065"
45805      0.20648016562124-0.24777619874549 = "0.2065:0.2478"
45806      0.24777619874549-0.28907223186974 = "0.2478:0.2891"
45807      0.28907223186974-0.33036826499399 = "0.2891:0.3304"
45808      ;
MPRINT(EM_DIAGRAM):   value F24_ 0-0.04129603312424 = "0:0.0413" 0.04129603312424-0.08259206624849 = "0.0413:0.0826" 0.08259206624849-0.12388809937274 = "0.0826:0.1239" 0.12388809937274-0.16518413249699 = "0.1239:0.1652" 0.16518413249699-0.20648016562124 
= "0.1652:0.2065" 0.20648016562124-0.24777619874549 = "0.2065:0.2478" 0.24777619874549-0.28907223186974 = "0.2478:0.2891" 0.28907223186974-0.33036826499399 = "0.2891:0.3304" ;
NOTE: Format F24_ has been output.
45809      value F25_
45810      0-0.0133297534723 = "0:0.0133"
45811      0.0133297534723-0.02665950694461 = "0.0133:0.0267"
45812      0.02665950694461-0.03998926041691 = "0.0267:0.04"
45813      0.03998926041691-0.05331901388922 = "0.04:0.0533"
45814      0.05331901388922-0.06664876736153 = "0.0533:0.0666"
45815      0.06664876736153-0.07997852083383 = "0.0666:0.08"
45816      0.07997852083383-0.09330827430614 = "0.08:0.0933"
45817      0.09330827430614-0.10663802777845 = "0.0933:0.1066"
45818      ;
MPRINT(EM_DIAGRAM):   value F25_ 0-0.0133297534723 = "0:0.0133" 0.0133297534723-0.02665950694461 = "0.0133:0.0267" 0.02665950694461-0.03998926041691 = "0.0267:0.04" 0.03998926041691-0.05331901388922 = "0.04:0.0533" 0.05331901388922-0.06664876736153 = 
"0.0533:0.0666" 0.06664876736153-0.07997852083383 = "0.0666:0.08" 0.07997852083383-0.09330827430614 = "0.08:0.0933" 0.09330827430614-0.10663802777845 = "0.0933:0.1066" ;
NOTE: Format F25_ has been output.
45819      value F26_
45820      0-0.02272696433368 = "0:0.0227"
45821      0.02272696433368-0.04545392866736 = "0.0227:0.0455"
45822      0.04545392866736-0.06818089300104 = "0.0455:0.0682"
45823      0.06818089300104-0.09090785733473 = "0.0682:0.0909"
45824      0.09090785733473-0.11363482166841 = "0.0909:0.1136"
45825      0.11363482166841-0.13636178600209 = "0.1136:0.1364"
45826      0.13636178600209-0.15908875033578 = "0.1364:0.1591"
45827      0.15908875033578-0.18181571466946 = "0.1591:0.1818"
45828      ;
MPRINT(EM_DIAGRAM):   value F26_ 0-0.02272696433368 = "0:0.0227" 0.02272696433368-0.04545392866736 = "0.0227:0.0455" 0.04545392866736-0.06818089300104 = "0.0455:0.0682" 0.06818089300104-0.09090785733473 = "0.0682:0.0909" 0.09090785733473-0.11363482166841 
= "0.0909:0.1136" 0.11363482166841-0.13636178600209 = "0.1136:0.1364" 0.13636178600209-0.15908875033578 = "0.1364:0.1591" 0.15908875033578-0.18181571466946 = "0.1591:0.1818" ;
NOTE: Format F26_ has been output.
45829      value F27_
45830      0-0.07029060805727 = "0:0.0703"
45831      0.07029060805727-0.14058121611454 = "0.0703:0.1406"
45832      0.14058121611454-0.21087182417182 = "0.1406:0.2109"
45833      0.21087182417182-0.28116243222909 = "0.2109:0.2812"
45834      0.28116243222909-0.35145304028637 = "0.2812:0.3515"
45835      0.35145304028637-0.42174364834364 = "0.3515:0.4217"
45836      0.42174364834364-0.49203425640091 = "0.4217:0.492"
45837      0.49203425640091-0.56232486445819 = "0.492:0.5623"
45838      ;
MPRINT(EM_DIAGRAM):   value F27_ 0-0.07029060805727 = "0:0.0703" 0.07029060805727-0.14058121611454 = "0.0703:0.1406" 0.14058121611454-0.21087182417182 = "0.1406:0.2109" 0.21087182417182-0.28116243222909 = "0.2109:0.2812" 0.28116243222909-0.35145304028637 
= "0.2812:0.3515" 0.35145304028637-0.42174364834364 = "0.3515:0.4217" 0.42174364834364-0.49203425640091 = "0.4217:0.492" 0.49203425640091-0.56232486445819 = "0.492:0.5623" ;
NOTE: Format F27_ has been output.
45839      value F28_
45840      0-0.02628614419775 = "0:0.0263"
45841      0.02628614419775-0.05257228839551 = "0.0263:0.0526"
45842      0.05257228839551-0.07885843259326 = "0.0526:0.0789"
45843      0.07885843259326-0.10514457679102 = "0.0789:0.1051"
45844      0.10514457679102-0.13143072098877 = "0.1051:0.1314"
45845      0.13143072098877-0.15771686518653 = "0.1314:0.1577"
45846      0.15771686518653-0.18400300938428 = "0.1577:0.184"
45847      0.18400300938428-0.21028915358204 = "0.184:0.2103"
45848      ;
MPRINT(EM_DIAGRAM):   value F28_ 0-0.02628614419775 = "0:0.0263" 0.02628614419775-0.05257228839551 = "0.0263:0.0526" 0.05257228839551-0.07885843259326 = "0.0526:0.0789" 0.07885843259326-0.10514457679102 = "0.0789:0.1051" 0.10514457679102-0.13143072098877 
= "0.1051:0.1314" 0.13143072098877-0.15771686518653 = "0.1314:0.1577" 0.15771686518653-0.18400300938428 = "0.1577:0.184" 0.18400300938428-0.21028915358204 = "0.184:0.2103" ;
NOTE: Format F28_ has been output.
45849      value F29_
45850      0-0.03108084540528 = "0:0.0311"
45851      0.03108084540528-0.06216169081056 = "0.0311:0.0622"
45852      0.06216169081056-0.09324253621585 = "0.0622:0.0932"
45853      0.09324253621585-0.12432338162113 = "0.0932:0.1243"
45854      0.12432338162113-0.15540422702642 = "0.1243:0.1554"
45855      0.15540422702642-0.1864850724317 = "0.1554:0.1865"
45856      0.1864850724317-0.21756591783699 = "0.1865:0.2176"
45857      0.21756591783699-0.24864676324227 = "0.2176:0.2486"
45858      ;
MPRINT(EM_DIAGRAM):   value F29_ 0-0.03108084540528 = "0:0.0311" 0.03108084540528-0.06216169081056 = "0.0311:0.0622" 0.06216169081056-0.09324253621585 = "0.0622:0.0932" 0.09324253621585-0.12432338162113 = "0.0932:0.1243" 0.12432338162113-0.15540422702642 
= "0.1243:0.1554" 0.15540422702642-0.1864850724317 = "0.1554:0.1865" 0.1864850724317-0.21756591783699 = "0.1865:0.2176" 0.21756591783699-0.24864676324227 = "0.2176:0.2486" ;
NOTE: Format F29_ has been output.
45859      value F30_
45860      0-0.02325132706758 = "0:0.0233"
45861      0.02325132706758-0.04650265413517 = "0.0233:0.0465"
45862      0.04650265413517-0.06975398120275 = "0.0465:0.0698"
45863      0.06975398120275-0.09300530827034 = "0.0698:0.093"
45864      0.09300530827034-0.11625663533792 = "0.093:0.1163"
45865      0.11625663533792-0.13950796240551 = "0.1163:0.1395"
45866      0.13950796240551-0.16275928947309 = "0.1395:0.1628"
45867      0.16275928947309-0.18601061654068 = "0.1628:0.186"
45868      ;
MPRINT(EM_DIAGRAM):   value F30_ 0-0.02325132706758 = "0:0.0233" 0.02325132706758-0.04650265413517 = "0.0233:0.0465" 0.04650265413517-0.06975398120275 = "0.0465:0.0698" 0.06975398120275-0.09300530827034 = "0.0698:0.093" 0.09300530827034-0.11625663533792 = 
"0.093:0.1163" 0.11625663533792-0.13950796240551 = "0.1163:0.1395" 0.13950796240551-0.16275928947309 = "0.1395:0.1628" 0.16275928947309-0.18601061654068 = "0.1628:0.186" ;
NOTE: Format F30_ has been output.
45869      value F31_
45870      0-0.04685348467595 = "0:0.0469"
45871      0.04685348467595-0.09370696935191 = "0.0469:0.0937"
45872      0.09370696935191-0.14056045402787 = "0.0937:0.1406"
45873      0.14056045402787-0.18741393870383 = "0.1406:0.1874"
45874      0.18741393870383-0.23426742337979 = "0.1874:0.2343"
45875      0.23426742337979-0.28112090805574 = "0.2343:0.2811"
45876      0.28112090805574-0.3279743927317 = "0.2811:0.328"
45877      0.3279743927317-0.37482787740766 = "0.328:0.3748"
45878      ;
MPRINT(EM_DIAGRAM):   value F31_ 0-0.04685348467595 = "0:0.0469" 0.04685348467595-0.09370696935191 = "0.0469:0.0937" 0.09370696935191-0.14056045402787 = "0.0937:0.1406" 0.14056045402787-0.18741393870383 = "0.1406:0.1874" 0.18741393870383-0.23426742337979 
= "0.1874:0.2343" 0.23426742337979-0.28112090805574 = "0.2343:0.2811" 0.28112090805574-0.3279743927317 = "0.2811:0.328" 0.3279743927317-0.37482787740766 = "0.328:0.3748" ;
NOTE: Format F31_ has been output.
45879      value F32_
45880      0-0.05585714413763 = "0:0.0559"
45881      0.05585714413763-0.11171428827526 = "0.0559:0.1117"
45882      0.11171428827526-0.1675714324129 = "0.1117:0.1676"
45883      0.1675714324129-0.22342857655053 = "0.1676:0.2234"
45884      0.22342857655053-0.27928572068817 = "0.2234:0.2793"
45885      0.27928572068817-0.3351428648258 = "0.2793:0.3351"
45886      0.3351428648258-0.39100000896344 = "0.3351:0.391"
45887      0.39100000896344-0.44685715310107 = "0.391:0.4469"
45888      ;
MPRINT(EM_DIAGRAM):   value F32_ 0-0.05585714413763 = "0:0.0559" 0.05585714413763-0.11171428827526 = "0.0559:0.1117" 0.11171428827526-0.1675714324129 = "0.1117:0.1676" 0.1675714324129-0.22342857655053 = "0.1676:0.2234" 0.22342857655053-0.27928572068817 = 
"0.2234:0.2793" 0.27928572068817-0.3351428648258 = "0.2793:0.3351" 0.3351428648258-0.39100000896344 = "0.3351:0.391" 0.39100000896344-0.44685715310107 = "0.391:0.4469" ;
NOTE: Format F32_ has been output.
45889      value F33_
45890      0-0.01434178193228 = "0:0.0143"
45891      0.01434178193228-0.02868356386457 = "0.0143:0.0287"
45892      0.02868356386457-0.04302534579685 = "0.0287:0.043"
45893      0.04302534579685-0.05736712772914 = "0.043:0.0574"
45894      0.05736712772914-0.07170890966143 = "0.0574:0.0717"
45895      0.07170890966143-0.08605069159371 = "0.0717:0.0861"
45896      0.08605069159371-0.100392473526 = "0.0861:0.1004"
45897      0.100392473526-0.11473425545828 = "0.1004:0.1147"
45898      ;
MPRINT(EM_DIAGRAM):   value F33_ 0-0.01434178193228 = "0:0.0143" 0.01434178193228-0.02868356386457 = "0.0143:0.0287" 0.02868356386457-0.04302534579685 = "0.0287:0.043" 0.04302534579685-0.05736712772914 = "0.043:0.0574" 0.05736712772914-0.07170890966143 = 
"0.0574:0.0717" 0.07170890966143-0.08605069159371 = "0.0717:0.0861" 0.08605069159371-0.100392473526 = "0.0861:0.1004" 0.100392473526-0.11473425545828 = "0.1004:0.1147" ;
NOTE: Format F33_ has been output.
45899      value F34_
45900      0-0.01109959226083 = "0:0.0111"
45901      0.01109959226083-0.02219918452166 = "0.0111:0.0222"
45902      0.02219918452166-0.0332987767825 = "0.0222:0.0333"
45903      0.0332987767825-0.04439836904333 = "0.0333:0.0444"
45904      0.04439836904333-0.05549796130417 = "0.0444:0.0555"
45905      0.05549796130417-0.066597553565 = "0.0555:0.0666"
45906      0.066597553565-0.07769714582583 = "0.0666:0.0777"
45907      0.07769714582583-0.08879673808667 = "0.0777:0.0888"
45908      ;
MPRINT(EM_DIAGRAM):   value F34_ 0-0.01109959226083 = "0:0.0111" 0.01109959226083-0.02219918452166 = "0.0111:0.0222" 0.02219918452166-0.0332987767825 = "0.0222:0.0333" 0.0332987767825-0.04439836904333 = "0.0333:0.0444" 0.04439836904333-0.05549796130417 = 
"0.0444:0.0555" 0.05549796130417-0.066597553565 = "0.0555:0.0666" 0.066597553565-0.07769714582583 = "0.0666:0.0777" 0.07769714582583-0.08879673808667 = "0.0777:0.0888" ;
NOTE: Format F34_ has been output.
45909      value F35_
45910      0-0.05952747737836 = "0:0.0595"
45911      0.05952747737836-0.11905495475672 = "0.0595:0.1191"
45912      0.11905495475672-0.17858243213508 = "0.1191:0.1786"
45913      0.17858243213508-0.23810990951345 = "0.1786:0.2381"
45914      0.23810990951345-0.29763738689181 = "0.2381:0.2976"
45915      0.29763738689181-0.35716486427017 = "0.2976:0.3572"
45916      0.35716486427017-0.41669234164854 = "0.3572:0.4167"
45917      0.41669234164854-0.4762198190269 = "0.4167:0.4762"
45918      ;
MPRINT(EM_DIAGRAM):   value F35_ 0-0.05952747737836 = "0:0.0595" 0.05952747737836-0.11905495475672 = "0.0595:0.1191" 0.11905495475672-0.17858243213508 = "0.1191:0.1786" 0.17858243213508-0.23810990951345 = "0.1786:0.2381" 0.23810990951345-0.29763738689181 
= "0.2381:0.2976" 0.29763738689181-0.35716486427017 = "0.2976:0.3572" 0.35716486427017-0.41669234164854 = "0.3572:0.4167" 0.41669234164854-0.4762198190269 = "0.4167:0.4762" ;
NOTE: Format F35_ has been output.
45919      value F36_
45920      0-0.04854362278072 = "0:0.0485"
45921      0.04854362278072-0.09708724556144 = "0.0485:0.0971"
45922      0.09708724556144-0.14563086834217 = "0.0971:0.1456"
45923      0.14563086834217-0.19417449112289 = "0.1456:0.1942"
45924      0.19417449112289-0.24271811390362 = "0.1942:0.2427"
45925      0.24271811390362-0.29126173668434 = "0.2427:0.2913"
45926      0.29126173668434-0.33980535946507 = "0.2913:0.3398"
45927      0.33980535946507-0.38834898224579 = "0.3398:0.3883"
45928      ;
MPRINT(EM_DIAGRAM):   value F36_ 0-0.04854362278072 = "0:0.0485" 0.04854362278072-0.09708724556144 = "0.0485:0.0971" 0.09708724556144-0.14563086834217 = "0.0971:0.1456" 0.14563086834217-0.19417449112289 = "0.1456:0.1942" 0.19417449112289-0.24271811390362 
= "0.1942:0.2427" 0.24271811390362-0.29126173668434 = "0.2427:0.2913" 0.29126173668434-0.33980535946507 = "0.2913:0.3398" 0.33980535946507-0.38834898224579 = "0.3398:0.3883" ;
NOTE: Format F36_ has been output.
45929      value F37_
45930      0-0.01328592727211 = "0:0.0133"
45931      0.01328592727211-0.02657185454423 = "0.0133:0.0266"
45932      0.02657185454423-0.03985778181635 = "0.0266:0.0399"
45933      0.03985778181635-0.05314370908847 = "0.0399:0.0531"
45934      0.05314370908847-0.06642963636058 = "0.0531:0.0664"
45935      0.06642963636058-0.0797155636327 = "0.0664:0.0797"
45936      0.0797155636327-0.09300149090482 = "0.0797:0.093"
45937      0.09300149090482-0.10628741817694 = "0.093:0.1063"
45938      ;
MPRINT(EM_DIAGRAM):   value F37_ 0-0.01328592727211 = "0:0.0133" 0.01328592727211-0.02657185454423 = "0.0133:0.0266" 0.02657185454423-0.03985778181635 = "0.0266:0.0399" 0.03985778181635-0.05314370908847 = "0.0399:0.0531" 0.05314370908847-0.06642963636058 
= "0.0531:0.0664" 0.06642963636058-0.0797155636327 = "0.0664:0.0797" 0.0797155636327-0.09300149090482 = "0.0797:0.093" 0.09300149090482-0.10628741817694 = "0.093:0.1063" ;
NOTE: Format F37_ has been output.
45939      value F38_
45940      0-0.03758216671819 = "0:0.0376"
45941      0.03758216671819-0.07516433343639 = "0.0376:0.0752"
45942      0.07516433343639-0.11274650015459 = "0.0752:0.1127"
45943      0.11274650015459-0.15032866687279 = "0.1127:0.1503"
45944      0.15032866687279-0.18791083359099 = "0.1503:0.1879"
45945      0.18791083359099-0.22549300030918 = "0.1879:0.2255"
45946      0.22549300030918-0.26307516702738 = "0.2255:0.2631"
45947      0.26307516702738-0.30065733374558 = "0.2631:0.3007"
45948      ;
MPRINT(EM_DIAGRAM):   value F38_ 0-0.03758216671819 = "0:0.0376" 0.03758216671819-0.07516433343639 = "0.0376:0.0752" 0.07516433343639-0.11274650015459 = "0.0752:0.1127" 0.11274650015459-0.15032866687279 = "0.1127:0.1503" 0.15032866687279-0.18791083359099 
= "0.1503:0.1879" 0.18791083359099-0.22549300030918 = "0.1879:0.2255" 0.22549300030918-0.26307516702738 = "0.2255:0.2631" 0.26307516702738-0.30065733374558 = "0.2631:0.3007" ;
NOTE: Format F38_ has been output.
45949      value F39_
45950      0-0.01931067638602 = "0:0.0193"
45951      0.01931067638602-0.03862135277205 = "0.0193:0.0386"
45952      0.03862135277205-0.05793202915808 = "0.0386:0.0579"
45953      0.05793202915808-0.0772427055441 = "0.0579:0.0772"
45954      0.0772427055441-0.09655338193013 = "0.0772:0.0966"
45955      0.09655338193013-0.11586405831616 = "0.0966:0.1159"
45956      0.11586405831616-0.13517473470218 = "0.1159:0.1352"
45957      0.13517473470218-0.15448541108821 = "0.1352:0.1545"
45958      ;
MPRINT(EM_DIAGRAM):   value F39_ 0-0.01931067638602 = "0:0.0193" 0.01931067638602-0.03862135277205 = "0.0193:0.0386" 0.03862135277205-0.05793202915808 = "0.0386:0.0579" 0.05793202915808-0.0772427055441 = "0.0579:0.0772" 0.0772427055441-0.09655338193013 = 
"0.0772:0.0966" 0.09655338193013-0.11586405831616 = "0.0966:0.1159" 0.11586405831616-0.13517473470218 = "0.1159:0.1352" 0.13517473470218-0.15448541108821 = "0.1352:0.1545" ;
NOTE: Format F39_ has been output.
45959      value F40_
45960      0-0.0278984966742 = "0:0.0279"
45961      0.0278984966742-0.05579699334841 = "0.0279:0.0558"
45962      0.05579699334841-0.08369549002262 = "0.0558:0.0837"
45963      0.08369549002262-0.11159398669683 = "0.0837:0.1116"
45964      0.11159398669683-0.13949248337104 = "0.1116:0.1395"
45965      0.13949248337104-0.16739098004524 = "0.1395:0.1674"
45966      0.16739098004524-0.19528947671945 = "0.1674:0.1953"
45967      0.19528947671945-0.22318797339366 = "0.1953:0.2232"
45968      ;
MPRINT(EM_DIAGRAM):   value F40_ 0-0.0278984966742 = "0:0.0279" 0.0278984966742-0.05579699334841 = "0.0279:0.0558" 0.05579699334841-0.08369549002262 = "0.0558:0.0837" 0.08369549002262-0.11159398669683 = "0.0837:0.1116" 0.11159398669683-0.13949248337104 = 
"0.1116:0.1395" 0.13949248337104-0.16739098004524 = "0.1395:0.1674" 0.16739098004524-0.19528947671945 = "0.1674:0.1953" 0.19528947671945-0.22318797339366 = "0.1953:0.2232" ;
NOTE: Format F40_ has been output.
45969      value F41_
45970      0-0.01382991972263 = "0:0.0138"
45971      0.01382991972263-0.02765983944527 = "0.0138:0.0277"
45972      0.02765983944527-0.04148975916791 = "0.0277:0.0415"
45973      0.04148975916791-0.05531967889055 = "0.0415:0.0553"
45974      0.05531967889055-0.06914959861319 = "0.0553:0.0691"
45975      0.06914959861319-0.08297951833583 = "0.0691:0.083"
45976      0.08297951833583-0.09680943805847 = "0.083:0.0968"
45977      0.09680943805847-0.11063935778111 = "0.0968:0.1106"
45978      ;
MPRINT(EM_DIAGRAM):   value F41_ 0-0.01382991972263 = "0:0.0138" 0.01382991972263-0.02765983944527 = "0.0138:0.0277" 0.02765983944527-0.04148975916791 = "0.0277:0.0415" 0.04148975916791-0.05531967889055 = "0.0415:0.0553" 0.05531967889055-0.06914959861319 
= "0.0553:0.0691" 0.06914959861319-0.08297951833583 = "0.0691:0.083" 0.08297951833583-0.09680943805847 = "0.083:0.0968" 0.09680943805847-0.11063935778111 = "0.0968:0.1106" ;
NOTE: Format F41_ has been output.
45979      value F42_
45980      0-0.03537639543297 = "0:0.0354"
45981      0.03537639543297-0.07075279086594 = "0.0354:0.0708"
45982      0.07075279086594-0.10612918629891 = "0.0708:0.1061"
45983      0.10612918629891-0.14150558173188 = "0.1061:0.1415"
45984      0.14150558173188-0.17688197716486 = "0.1415:0.1769"
45985      0.17688197716486-0.21225837259783 = "0.1769:0.2123"
45986      0.21225837259783-0.2476347680308 = "0.2123:0.2476"
45987      0.2476347680308-0.28301116346377 = "0.2476:0.283"
45988      ;
MPRINT(EM_DIAGRAM):   value F42_ 0-0.03537639543297 = "0:0.0354" 0.03537639543297-0.07075279086594 = "0.0354:0.0708" 0.07075279086594-0.10612918629891 = "0.0708:0.1061" 0.10612918629891-0.14150558173188 = "0.1061:0.1415" 0.14150558173188-0.17688197716486 
= "0.1415:0.1769" 0.17688197716486-0.21225837259783 = "0.1769:0.2123" 0.21225837259783-0.2476347680308 = "0.2123:0.2476" 0.2476347680308-0.28301116346377 = "0.2476:0.283" ;
NOTE: Format F42_ has been output.
45989      value F43_
45990      0-0.09367064137925 = "0:0.0937"
45991      0.09367064137925-0.1873412827585 = "0.0937:0.1873"
45992      0.1873412827585-0.28101192413775 = "0.1873:0.281"
45993      0.28101192413775-0.374682565517 = "0.281:0.3747"
45994      0.374682565517-0.46835320689625 = "0.3747:0.4684"
45995      0.46835320689625-0.56202384827551 = "0.4684:0.562"
45996      0.56202384827551-0.65569448965476 = "0.562:0.6557"
45997      0.65569448965476-0.74936513103401 = "0.6557:0.7494"
45998      ;
MPRINT(EM_DIAGRAM):   value F43_ 0-0.09367064137925 = "0:0.0937" 0.09367064137925-0.1873412827585 = "0.0937:0.1873" 0.1873412827585-0.28101192413775 = "0.1873:0.281" 0.28101192413775-0.374682565517 = "0.281:0.3747" 0.374682565517-0.46835320689625 = 
"0.3747:0.4684" 0.46835320689625-0.56202384827551 = "0.4684:0.562" 0.56202384827551-0.65569448965476 = "0.562:0.6557" 0.65569448965476-0.74936513103401 = "0.6557:0.7494" ;
NOTE: Format F43_ has been output.
45999      value F44_
46000      0-0.04441089902447 = "0:0.0444"
46001      0.04441089902447-0.08882179804895 = "0.0444:0.0888"
46002      0.08882179804895-0.13323269707342 = "0.0888:0.1332"
46003      0.13323269707342-0.1776435960979 = "0.1332:0.1776"
46004      0.1776435960979-0.22205449512237 = "0.1776:0.2221"
46005      0.22205449512237-0.26646539414685 = "0.2221:0.2665"
46006      0.26646539414685-0.31087629317132 = "0.2665:0.3109"
46007      0.31087629317132-0.3552871921958 = "0.3109:0.3553"
46008      ;
MPRINT(EM_DIAGRAM):   value F44_ 0-0.04441089902447 = "0:0.0444" 0.04441089902447-0.08882179804895 = "0.0444:0.0888" 0.08882179804895-0.13323269707342 = "0.0888:0.1332" 0.13323269707342-0.1776435960979 = "0.1332:0.1776" 0.1776435960979-0.22205449512237 = 
"0.1776:0.2221" 0.22205449512237-0.26646539414685 = "0.2221:0.2665" 0.26646539414685-0.31087629317132 = "0.2665:0.3109" 0.31087629317132-0.3552871921958 = "0.3109:0.3553" ;
NOTE: Format F44_ has been output.
46009      value F45_
46010      0-0.01225143674073 = "0:0.0123"
46011      0.01225143674073-0.02450287348146 = "0.0123:0.0245"
46012      0.02450287348146-0.03675431022219 = "0.0245:0.0368"
46013      0.03675431022219-0.04900574696292 = "0.0368:0.049"
46014      0.04900574696292-0.06125718370365 = "0.049:0.0613"
46015      0.06125718370365-0.07350862044439 = "0.0613:0.0735"
46016      0.07350862044439-0.08576005718512 = "0.0735:0.0858"
46017      0.08576005718512-0.09801149392585 = "0.0858:0.098"
46018      ;
MPRINT(EM_DIAGRAM):   value F45_ 0-0.01225143674073 = "0:0.0123" 0.01225143674073-0.02450287348146 = "0.0123:0.0245" 0.02450287348146-0.03675431022219 = "0.0245:0.0368" 0.03675431022219-0.04900574696292 = "0.0368:0.049" 0.04900574696292-0.06125718370365 = 
"0.049:0.0613" 0.06125718370365-0.07350862044439 = "0.0613:0.0735" 0.07350862044439-0.08576005718512 = "0.0735:0.0858" 0.08576005718512-0.09801149392585 = "0.0858:0.098" ;
NOTE: Format F45_ has been output.
MPRINT(EM_DIAGRAM):   run;
46019      run;

NOTE: PROCEDURE FORMAT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46020      ods listing close;
MPRINT(EM_DIAGRAM):    ods listing close;
46021      ods output crosstabfreqs=WORK.TEMPFREQ;
MPRINT(EM_DIAGRAM):   ods output crosstabfreqs=WORK.TEMPFREQ;
46022      proc freq data = EMWS3.Clus_TRAIN order=formatted addnames;
MPRINT(EM_DIAGRAM):   proc freq data = EMWS3.Clus_TRAIN order=formatted addnames;
46023      table APPLIC * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table APPLIC * _SEGMENT_ / missing;
46024      table ARGIC * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table ARGIC * _SEGMENT_ / missing;
46025      table BANK * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BANK * _SEGMENT_ / missing;
46026      table BASIC * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BASIC * _SEGMENT_ / missing;
46027      table BENSON * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BENSON * _SEGMENT_ / missing;
46028      table BUSH * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table BUSH * _SEGMENT_ / missing;
46029      table CARTER * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table CARTER * _SEGMENT_ / missing;
46030      table CHASTITI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table CHASTITI * _SEGMENT_ / missing;
46031      table COMP * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table COMP * _SEGMENT_ / missing;
46032      table CUTE * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table CUTE * _SEGMENT_ / missing;
46033      table DIMENS * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table DIMENS * _SEGMENT_ / missing;
46034      table DISEAS * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table DISEAS * _SEGMENT_ / missing;
46035      table DISPLAI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table DISPLAI * _SEGMENT_ / missing;
46036      table DOCTOR * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table DOCTOR * _SEGMENT_ / missing;
46037      table EDWARD * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table EDWARD * _SEGMENT_ / missing;
46038      table EXTERMIN * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table EXTERMIN * _SEGMENT_ / missing;
46039      table GATEWAI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table GATEWAI * _SEGMENT_ / missing;
46040      table GORDON * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table GORDON * _SEGMENT_ / missing;
46041      table HAND * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table HAND * _SEGMENT_ / missing;
46042      table ILLINOI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table ILLINOI * _SEGMENT_ / missing;
46043      table INTELLECT * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table INTELLECT * _SEGMENT_ / missing;
46044      table JAKE * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table JAKE * _SEGMENT_ / missing;
46045      table JIMMI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table JIMMI * _SEGMENT_ / missing;
46046      table LIVNI * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table LIVNI * _SEGMENT_ / missing;
46047      table MED * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table MED * _SEGMENT_ / missing;
46048      table MEDIC * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table MEDIC * _SEGMENT_ / missing;
46049      table MOTIF * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table MOTIF * _SEGMENT_ / missing;
46050      table NET * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table NET * _SEGMENT_ / missing;
46051      table OWNER * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table OWNER * _SEGMENT_ / missing;
46052      table PATIENT * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PATIENT * _SEGMENT_ / missing;
46053      table PITT * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PITT * _SEGMENT_ / missing;
46054      table PROLIN * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table PROLIN * _SEGMENT_ / missing;
46055      table REDUND * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table REDUND * _SEGMENT_ / missing;
46056      table SERA * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SERA * _SEGMENT_ / missing;
46057      table SERDAR * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SERDAR * _SEGMENT_ / missing;
46058      table SERVER * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SERVER * _SEGMENT_ / missing;
46059      table SHAME * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SHAME * _SEGMENT_ / missing;
46060      table SHNEKENDORF * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SHNEKENDORF * _SEGMENT_ / missing;
46061      table SOVIET * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SOVIET * _SEGMENT_ / missing;
46062      table SUNO * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SUNO * _SEGMENT_ / missing;
46063      table SURREND * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table SURREND * _SEGMENT_ / missing;
46064      table URBANA * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table URBANA * _SEGMENT_ / missing;
46065      table UTEXA * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table UTEXA * _SEGMENT_ / missing;
46066      table WINDOW * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table WINDOW * _SEGMENT_ / missing;
46067      table ZUMA * _SEGMENT_ / missing;
MPRINT(EM_DIAGRAM):   table ZUMA * _SEGMENT_ / missing;
46068      format APPLIC F1_.;
MPRINT(EM_DIAGRAM):   format APPLIC F1_.;
46069      format ARGIC F2_.;
MPRINT(EM_DIAGRAM):   format ARGIC F2_.;
46070      format BANK F3_.;
MPRINT(EM_DIAGRAM):   format BANK F3_.;
46071      format BASIC F4_.;
MPRINT(EM_DIAGRAM):   format BASIC F4_.;
46072      format BENSON F5_.;
MPRINT(EM_DIAGRAM):   format BENSON F5_.;
46073      format BUSH F6_.;
MPRINT(EM_DIAGRAM):   format BUSH F6_.;
46074      format CARTER F7_.;
MPRINT(EM_DIAGRAM):   format CARTER F7_.;
46075      format CHASTITI F8_.;
MPRINT(EM_DIAGRAM):   format CHASTITI F8_.;
46076      format COMP F9_.;
MPRINT(EM_DIAGRAM):   format COMP F9_.;
46077      format CUTE F10_.;
MPRINT(EM_DIAGRAM):   format CUTE F10_.;
46078      format DIMENS F11_.;
MPRINT(EM_DIAGRAM):   format DIMENS F11_.;
46079      format DISEAS F12_.;
MPRINT(EM_DIAGRAM):   format DISEAS F12_.;
46080      format DISPLAI F13_.;
MPRINT(EM_DIAGRAM):   format DISPLAI F13_.;
46081      format DOCTOR F14_.;
MPRINT(EM_DIAGRAM):   format DOCTOR F14_.;
46082      format EDWARD F15_.;
MPRINT(EM_DIAGRAM):   format EDWARD F15_.;
46083      format EXTERMIN F16_.;
MPRINT(EM_DIAGRAM):   format EXTERMIN F16_.;
46084      format GATEWAI F17_.;
MPRINT(EM_DIAGRAM):   format GATEWAI F17_.;
46085      format GORDON F18_.;
MPRINT(EM_DIAGRAM):   format GORDON F18_.;
46086      format HAND F19_.;
MPRINT(EM_DIAGRAM):   format HAND F19_.;
46087      format ILLINOI F20_.;
MPRINT(EM_DIAGRAM):   format ILLINOI F20_.;
46088      format INTELLECT F21_.;
MPRINT(EM_DIAGRAM):   format INTELLECT F21_.;
46089      format JAKE F22_.;
MPRINT(EM_DIAGRAM):   format JAKE F22_.;
46090      format JIMMI F23_.;
MPRINT(EM_DIAGRAM):   format JIMMI F23_.;
46091      format LIVNI F24_.;
MPRINT(EM_DIAGRAM):   format LIVNI F24_.;
46092      format MED F25_.;
MPRINT(EM_DIAGRAM):   format MED F25_.;
46093      format MEDIC F26_.;
MPRINT(EM_DIAGRAM):   format MEDIC F26_.;
46094      format MOTIF F27_.;
MPRINT(EM_DIAGRAM):   format MOTIF F27_.;
46095      format NET F28_.;
MPRINT(EM_DIAGRAM):   format NET F28_.;
46096      format OWNER F29_.;
MPRINT(EM_DIAGRAM):   format OWNER F29_.;
46097      format PATIENT F30_.;
MPRINT(EM_DIAGRAM):   format PATIENT F30_.;
46098      format PITT F31_.;
MPRINT(EM_DIAGRAM):   format PITT F31_.;
46099      format PROLIN F32_.;
MPRINT(EM_DIAGRAM):   format PROLIN F32_.;
46100      format REDUND F33_.;
MPRINT(EM_DIAGRAM):   format REDUND F33_.;
46101      format SERA F34_.;
MPRINT(EM_DIAGRAM):   format SERA F34_.;
46102      format SERDAR F35_.;
MPRINT(EM_DIAGRAM):   format SERDAR F35_.;
46103      format SERVER F36_.;
MPRINT(EM_DIAGRAM):   format SERVER F36_.;
46104      format SHAME F37_.;
MPRINT(EM_DIAGRAM):   format SHAME F37_.;
46105      format SHNEKENDORF F38_.;
MPRINT(EM_DIAGRAM):   format SHNEKENDORF F38_.;
46106      format SOVIET F39_.;
MPRINT(EM_DIAGRAM):   format SOVIET F39_.;
46107      format SUNO F40_.;
MPRINT(EM_DIAGRAM):   format SUNO F40_.;
46108      format SURREND F41_.;
MPRINT(EM_DIAGRAM):   format SURREND F41_.;
46109      format URBANA F42_.;
MPRINT(EM_DIAGRAM):   format URBANA F42_.;
46110      format UTEXA F43_.;
MPRINT(EM_DIAGRAM):   format UTEXA F43_.;
46111      format WINDOW F44_.;
MPRINT(EM_DIAGRAM):   format WINDOW F44_.;
46112      format ZUMA F45_.;
MPRINT(EM_DIAGRAM):   format ZUMA F45_.;
46113      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3000 observations read from the data set AMUL.TERMINOS_DOCUMENTOS.
NOTE: Vista EMWS3.CLUS_TRAIN.VIEW ha utilizado (Tiempo de proceso total):
      real time           4.53 seconds
      cpu time            4.48 seconds
      
NOTE: There were 3000 observations read from the data set EMWS3.IDS_DATA.
NOTE: The data set WORK.TEMPFREQ has 4103 observations and 56 variables.
NOTE: There were 3000 observations read from the data set EMWS3.CLUS_TRAIN.
NOTE: PROCEDURE FREQ ha utilizado (Tiempo de proceso total):
      real time           4.57 seconds
      cpu time            4.51 seconds
      

MPRINT(EM_DIAGRAM):   quit;
46114      quit;
46115      ods listing;
MPRINT(EM_DIAGRAM):   ods listing;
46116      data EMWS3.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
MPRINT(EM_DIAGRAM):    data EMWS3.Clus_PROFILE(keep=_VARIABLE_ _SEGMENT_ TYPE COUNT PERCENT _X_ _XLABEL_);
46117      label _VARIABLE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" _SEGMENT_ = "Segment Variable" Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,         NOQUOTE))" _X_ =
46118         "%sysfunc(sasmsg(sashelp.dmine, rpt_numValue_vlabel, NOQUOTE))" _XLABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_fmtValue_vlabel ,    NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel,        NOQUOTE))" PERCENT =
46119         "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Variable" _SEGMENT_ = "Segment Variable" Type = "Tipo" _X_ = "Valor numérico" _XLABEL_ = "Valor formateado" COUNT = "Número de ocurrencias" PERCENT = "Porcentaje";
46120      dsid = open("WORK.TEMPFREQ");
MPRINT(EM_DIAGRAM):   dsid = open("WORK.TEMPFREQ");
46121      varnum = varnum(dsid, 'ROWVARIABLE');
MPRINT(EM_DIAGRAM):   varnum = varnum(dsid, 'ROWVARIABLE');
46122      freqnum = varnum(dsid, 'FREQUENCY');
MPRINT(EM_DIAGRAM):   freqnum = varnum(dsid, 'FREQUENCY');
46123      pvarnum = varnum(dsid, 'PERCENT');
MPRINT(EM_DIAGRAM):   pvarnum = varnum(dsid, 'PERCENT');
46124      typenum = varnum(dsid, '_TYPE_');
MPRINT(EM_DIAGRAM):   typenum = varnum(dsid, '_TYPE_');
46125      bynum = varnum(dsid, "_SEGMENT_");
MPRINT(EM_DIAGRAM):   bynum = varnum(dsid, "_SEGMENT_");
46126      length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
MPRINT(EM_DIAGRAM):   length varformat _VARIABLE_ $32 _XLABEL_ $32 TYPE $1;
46127      do while(^fetch(dsid));
MPRINT(EM_DIAGRAM):   do while(^fetch(dsid));
46128      count = getvarn(dsid, freqnum);
MPRINT(EM_DIAGRAM):   count = getvarn(dsid, freqnum);
46129      percent = getvarn(dsid, pvarnum);
MPRINT(EM_DIAGRAM):   percent = getvarn(dsid, pvarnum);
46130      _VARIABLE_ = strip(getvarc(dsid, varnum));
MPRINT(EM_DIAGRAM):   _VARIABLE_ = strip(getvarc(dsid, varnum));
46131      varblnum = varnum(dsid, _VARIABLE_);
MPRINT(EM_DIAGRAM):   varblnum = varnum(dsid, _VARIABLE_);
46132      _SEGMENT_ = getvarn(dsid, bynum);
MPRINT(EM_DIAGRAM):   _SEGMENT_ = getvarn(dsid, bynum);
46133      type = vartype(dsid, varblnum);
MPRINT(EM_DIAGRAM):   type = vartype(dsid, varblnum);
46134      varformat = varfmt(dsid, varblnum);
MPRINT(EM_DIAGRAM):   varformat = varfmt(dsid, varblnum);
46135      if varformat eq '' then varformat = 'best12.';
MPRINT(EM_DIAGRAM):   if varformat eq '' then varformat = 'best12.';
46136      _X_=.;
MPRINT(EM_DIAGRAM):   _X_=.;
46137      if type = 'N' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
46138      _X_ = getvarn(dsid, varblnum);
MPRINT(EM_DIAGRAM):   _X_ = getvarn(dsid, varblnum);
46139      _XLABEL_ = left(putn(_X_, varformat));
MPRINT(EM_DIAGRAM):   _XLABEL_ = left(putn(_X_, varformat));
46140      end;
MPRINT(EM_DIAGRAM):   end;
46141      else _XLABEL_ = getvarc(dsid, varblnum);
MPRINT(EM_DIAGRAM):   else _XLABEL_ = getvarc(dsid, varblnum);
46142      if getvarc(dsid, typenum) = '11' then output;
MPRINT(EM_DIAGRAM):   if getvarc(dsid, typenum) = '11' then output;
46143      end;
MPRINT(EM_DIAGRAM):   end;
46144      dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
46145      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set EMWS3.CLUS_PROFILE has 3280 observations and 7 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

46146      proc sort data=EMWS3.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_PROFILE NOTHREADS;
46147      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
46148      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3280 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set EMWS3.CLUS_PROFILE has 3280 observations and 7 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46149      proc means data=EMWS3.Clus_PROFILE noprint missing NWAY;
MPRINT(EM_DIAGRAM):   proc means data=EMWS3.Clus_PROFILE noprint missing NWAY;
46150      class _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   class _VARIABLE_ _SEGMENT_;
46151      var COUNT;
MPRINT(EM_DIAGRAM):   var COUNT;
46152      output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
MPRINT(EM_DIAGRAM):   output out=WORK.Clus_STATCOUNT(keep=_SEGMENT_ _VARIABLE_ SUM) SUM=SUM;
46153      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3280 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set WORK.CLUS_STATCOUNT has 450 observations and 3 variables.
NOTE: PROCEDURE MEANS ha utilizado (Tiempo de proceso total):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

46154      proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.Clus_STATCOUNT NOTHREADS;
46155      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
46156      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 450 observations read from the data set WORK.CLUS_STATCOUNT.
NOTE: The data set WORK.CLUS_STATCOUNT has 450 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46157      data EMWS3.Clus_PROFILE(drop=SUM);
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_PROFILE(drop=SUM);
46158      label BYPERCENT= "%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel, NOQUOTE, _SEGMENT_))";
MPRINT(EM_DIAGRAM):   label BYPERCENT= "Porcentaje";
46159      merge EMWS3.Clus_PROFILE WORK.Clus_STATCOUNT;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_PROFILE WORK.Clus_STATCOUNT;
46160      by _VARIABLE_ _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_ _SEGMENT_;
46161      if SUM ne . then BYPERCENT = 100*COUNT/SUM;
MPRINT(EM_DIAGRAM):   if SUM ne . then BYPERCENT = 100*COUNT/SUM;
46162      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3280 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: There were 450 observations read from the data set WORK.CLUS_STATCOUNT.
NOTE: The data set EMWS3.CLUS_PROFILE has 3280 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46163      proc sort data=EMWS3.Clus_PROFILE NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Clus_PROFILE NOTHREADS;
46164      by _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _VARIABLE_;
46165      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3280 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set EMWS3.CLUS_PROFILE has 3280 observations and 8 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46166      proc sort data=WORK.M3TG_AN6;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M3TG_AN6;
46167      by Name;
MPRINT(EM_DIAGRAM):   by Name;
46168      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 46 observations read from the data set WORK.M3TG_AN6.
NOTE: The data set WORK.M3TG_AN6 has 46 observations and 21 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46169      data EMWS3.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_PROFILE;
46170      merge EMWS3.Clus_PROFILE(in=_a) WORK.M3TG_AN6(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_PROFILE(in=_a) WORK.M3TG_AN6(keep=Name Label Role rename=(Name=_Variable_ Label=_Label_));
46171      by _Variable_;
MPRINT(EM_DIAGRAM):   by _Variable_;
46172      label Role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Role = "Rol";
46173      label Label = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Etiqueta";
46174      if _a then output;
MPRINT(EM_DIAGRAM):   if _a then output;
46175      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable Label is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _VARIABLE_ by input data sets. This might cause unexpected results.
NOTE: There were 3280 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: There were 46 observations read from the data set WORK.M3TG_AN6.
NOTE: The data set EMWS3.CLUS_PROFILE has 3280 observations and 10 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46176      proc sort data=EMWS3.Clus_PROFILE;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Clus_PROFILE;
46177      by _SEGMENT_ _VARIABLE_ _X_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_ _X_;
46178      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3280 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set EMWS3.CLUS_PROFILE has 3280 observations and 10 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46179      data EMWS3.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_PROFILE(rename=(_VARIABLE_=Variable _X_=NumericValue _XLABEL_=FmtValue));
46180      set EMWS3.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_PROFILE;
46181      retain orderedValue 0;
MPRINT(EM_DIAGRAM):   retain orderedValue 0;
46182      label OrderedValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_OrderedValue_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label OrderedValue = "Valores ordenados";
46183      by _SEGMENT_ _VARIABLE_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_ _VARIABLE_;
46184      if first._variable_ then orderedValue=1;
MPRINT(EM_DIAGRAM):   if first._variable_ then orderedValue=1;
46185      else orderedValue+1;
MPRINT(EM_DIAGRAM):   else orderedValue+1;
46186      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3280 observations read from the data set EMWS3.CLUS_PROFILE.
NOTE: The data set EMWS3.CLUS_PROFILE has 3280 observations and 11 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

46187      proc transpose data=EMWS3.Clus_OUTVAR out=WORK.Clus_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS3.Clus_OUTVAR out=WORK.Clus_OUTVAR(where=(COL1 ^in('IMPUTED','OMITTED')));
46188      var ABSOLUT--ZUMA;
MPRINT(EM_DIAGRAM):   var ABSOLUT--ZUMA;
46189      where _TYPE_ in('TYPE' 'VARIABLE');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('TYPE' 'VARIABLE');
46190      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS3.CLUS_OUTVAR.
      WHERE _TYPE_ in ('TYPE', 'VARIABLE');
NOTE: The data set WORK.CLUS_OUTVAR has 1204 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

46191      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
46192      * Clus: variables DMVQ;
MPRINT(EM_DIAGRAM):   * Clus: variables DMVQ;
46193      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
46194      %macro dmvqvars;
46195          ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT
46196         ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI
46197         ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW
46198         ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI
46199         APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA
46200         ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN
46201         ATHENA ATTACH ATTACK ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI
46202         BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER
46203         BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON
46204         BOUGHT BOULDER BOX BRAD BRAIN BRAND BREAK BRIAN BRING BRITISH BROWN BTW BUFFER
46205         BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN
46206         CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER
46207         CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL CHARACT CHARG CHASTITI
46208         CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI
46209         CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR
46210         CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN
46211         COLOR COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON
46212         COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET
46213         CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT
46214         CONTACT CONTENT CONTEXT CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP
46215         CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN
46216         CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL
46217         DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD DEAL DEAR DEATH DECID DECOD DEFAULT
46218         DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL
46219         DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO
46220         DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG DISCLAIM DISCUSS DISEAS
46221         DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON
46222         DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI
46223         EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL
46224         ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP
46225         ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT
46226         EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE
46227         FACT FAIL FALS FAMILI FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT
46228         FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU
46229         FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE
46230         FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND FULL FUNCTION FUTUR GAIN GAME
46231         GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI
46232         GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG
46233         GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD
46234         HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT
46235         HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER
46236         HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD
46237         HUMAN HUNTSVIL ICON IDEA IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT
46238         IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT
46239         INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC
46240         INTERGRAPH INTERN INTERNET INTERVIEW INVENT INVOLV IRAN IRVIN ISLAM ISLAND ISN
46241         ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH
46242         JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD
46243         KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB LABEL
46244         LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV
46245         LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT
46246         LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG
46247         LONGER LOOK LOOP LOST LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN
46248         MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR
46249         MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON
46250         MEMBER MEMORI MENTION MENU MESSAG METAL METHOD METHODOLOG MICHAEL MIDDL MIGRAIN
46251         MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL
46252         MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG
46253         MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR NAZI
46254         NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW
46255         NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER
46256         OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM
46257         OMRAN OPEN OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL
46258         OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN
46259         PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD
46260         PERSIAN PERSON PETER PHONE PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL
46261         PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT
46262         POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER
46263         POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID PRESS PRETTI PREVENT PREVIOU
46264         PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM
46265         PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC
46266         PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST RADAR
46267         RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV
46268         RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL
46269         RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR
46270         RESEARCH RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN
46271         REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST
46272         RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE
46273         SCHEMAT SCHOOL SCHWARTZ SCI SCIENC SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU
46274         SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT
46275         SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME
46276         SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT SHOULDN SHOW SICK SIDE SIGN
46277         SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN
46278         SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC
46279         SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK SPOT STAI
46280         STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN
46281         STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB
46282         SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS
46283         SURGERI SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL
46284         TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL
46285         TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE
46286         THEORI THERAPI THERE THEY THINK THOMA THOUGHT THREAD THROW THU TIM TIME TIMER
46287         TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE
46288         TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE
46289         TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN UNDERSTAND UNIT UNIV
46290         UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL
46291         VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG
46292         WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK
46293         WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON
46294         WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG
46295         XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG
46296         ZIONISM ZIONIST ZUMA
46297      %mend ;
46298      
46299      

46300      data WORK.Clus_temp;
MPRINT(EM_DIAGRAM):    data WORK.Clus_temp;
46301      set EMWS3.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTMEAN;
46302      _idvar_=left(put(_SEGMENT_,4.));
MPRINT(EM_DIAGRAM):   _idvar_=left(put(_SEGMENT_,4.));
46303      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS3.CLUS_OUTMEAN.
NOTE: The data set WORK.CLUS_TEMP has 10 observations and 1214 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46304      proc distance data=WORK.Clus_temp out=EMWS3.Clus_DISTANCE method=l(2) shape=square;
MPRINT(EM_DIAGRAM):   proc distance data=WORK.Clus_temp out=EMWS3.Clus_DISTANCE method=l(2) shape=square;
46305      id _idvar_;
MPRINT(EM_DIAGRAM):   id _idvar_;
46306      var interval(%dmvqvars);
MPRINT(EM_DIAGRAM):   var interval(
MPRINT(DMVQVARS):  ABSOLUT ACCELER ACCEPT ACCESS ACCOUNT ACCUR ACID ACTION ACTIV ADAM ADCOM ADDIT ADDRESS ADMIN ADMINISTR ADRIAN ADVANC ADVIC AFFECT AGRE AID ALAN ALLERG ALLERGI ALLOC ALLOW ALTERN AMATEUR AMERICAN AMOUNT AMP AMPLIFI ANA ANALOG ANDI ANDREW 
ANGEL ANIM ANNOUNC ANSWER ANTENNA ANTI ANTIBIOT APP APPAR APPEAR APPL APPLI APPLIC APPRECI APPROACH APRIL ARAB ARCAD AREA AREN ARGIC ARGUMENT ARM ARMENIA ARMENIAN ARMI ARTICL ARTIFICI ASK ASSEMBL ASSIST ASSOCI ASSUM ATARI ATHEN ATHENA ATTACH ATTACK 
ATTEMPT ATTRIBUT AUDIO AUSTIN AUSTRALIA AUTHOR AVOID AZERI BACKGROUND BAND BANK BARBECU BASE BASIC BATTERI BECK BELL BENSON BERKELEI BEYER BILL BIRTHDAI BIT BITMAP BLACK BLOOD BLUE BOARD BODI BOMB BOOK BORDER BOSTON BOUGHT BOULDER BOX BRAD BRAIN BRAND 
BREAK BRIAN BRING BRITISH BROWN BTW BUFFER BUILD BUILT BULB BUNCH BUSH BUSI BUTTON CABL CALIFORNIA CALL CAMBRIDG CAN CANADA CANCER CANDIDA CAPABL CAPACITOR CAPIT CAR CARD CARE CARNEGI CARRI CARTER CASE CATALOG CAUS CELL CENTER CENTR CHANC CHANG CHANNEL 
CHARACT CHARG CHASTITI CHEAP CHECK CHEER CHEMIC CHICAGO CHILD CHILDREN CHINES CHIP CHOIC CHRI CHRISTIAN CHRISTOPH CIRCUIT CITI CITIZEN CIVIL CIVILIAN CLAIM CLASS CLEAR CLEVELAND CLIENT CLINIC CLINTON CLOCK CLOSE CLUB CMU CODE COLD COLLEG COLLIN COLOR 
COLORADO COLORMAP COLUMBIA COMBIN COMMAND COMMENT COMMERCI COMMIT COMMON COMMUN COMP COMPANI COMPAR COMPAT COMPIL COMPLET COMPON COMPUT CONCERN CONCRET CONDIT CONFER CONFIGUR CONFLICT CONFUS CONNECT CONSID CONSIST CONSTRUCT CONSULT CONTACT CONTENT CONTEXT 
CONTINU CONTROL CONVENT CONVERT COOL COPI CORN CORP CORPOR CORRECT COST COULDN COUNT COUNTRI COUPL COVER COVINGTON CPR CREAT CROHN CROSS CURE CURRENT CURSOR CUSTOM CUTE CYCL DAI DAILI DALE DAMAG DANGER DANIEL DANNI DATA DAVE DAVID DAVIDIAN DAYTON DEAD 
DEAL DEAR DEATH DECID DECOD DEFAULT DEFIN DEFINIT DEGRE DEIR DELET DEPART DEPEND DEPT DEPTH DESIGN DESTROI DETAIL DETECT DETECTOR DETERMIN DEVELOP DEVIC DIAGNOS DIAGRAM DIALOG DICK DIDN DIEGO DIET DIFFER DIGIT DIMENS DIOD DIRECT DIRECTORI DISCHARG 
DISCLAIM DISCUSS DISEAS DISK DISPLAI DISTANC DISTRIBUT DIVIS DOCTOR DOCUMENT DOESN DOMAIN DOMIN DON DONAT DORTMUND DOUBT DOUG DRAW DRIVE DRIVER DROP DRUG DUMP DYER EASI EASILI EAST EAT ECHO EDITOR EDU EDUC EDWARD EFFECT ELECTR ELECTRON EMAIL EMPLOY EMUL 
ENERGI ENGIN ENGLAND ENTIR ENTRI ENVIRON EPROM EQUAL EQUIP ERIC ERROR ESCAP ESSENTI EUROP EUROPEAN EVENT EVID EXACT EXECUT EXERCIS EXIST EXPANS EXPECT EXPENS EXPERI EXPERIENC EXPLAIN EXPLOD EXPOS EXPRESS EXTENS EXTERMIN EXTRA FACE FACT FAIL FALS FAMILI 
FAST FATHER FAVOR FAX FEATUR FEDER FEED FEEL FIELD FIGHT FIGUR FILE FILL FILTER FINAL FIND FINE FIRE FIX FLAME FLASH FLOOR FLUKE FOCU FOLK FOLLOWUP FONT FOOD FORC FORGET FORM FORMAT FOURD FRAME FRANC FRANK FREE FREEDOM FREEMAN FREQUENC FREQUENT FRI FRIEND 
FULL FUNCTION FUTUR GAIN GAME GARFIEL GARI GATEWAI GAZA GEB GENER GENOCID GEORG GEORGIA GERMAN GERMANI GILBERT GIVE GOOD GORDON GOVERN GRANT GRAPHIC GREAT GREATLI GREEK GREEN GREG GROUND GROUP GUESS GUEST GUI HAMAZA HAMID HAND HANDL HANG HAPPEN HAPPI HARD 
HARDWAR HARRI HARVARD HATE HAVEN HEAD HEADACH HEALTH HEAR HEARD HEART HEAT HEAVI HEIGHT HELP HENRI HENRIK HERNIA HERNLEM HEWLETT HEZBOLLAH HIGH HIGHER HINT HISTOR HISTORI HOLD HOLOCAUST HOME HOOK HOPE HOSPIT HOST HOUR HOUS HOWARD HUMAN HUNTSVIL ICON IDEA 
IGNOR ILLEG ILLINOI IMAG IMAGIN IMAK IMPLEMENT IMPORT IMPRESS IMPROV INCLUD INCREAS INDIVIDU INDUSTRI INFECT INFO INFORM INJECT INPUT INSTAL INSTITUT INSTRUMENT INTEL INTELLECT INTELLIG INTEND INTEREST INTERFAC INTERGRAPH INTERN INTERNET INTERVIEW INVENT 
INVOLV IRAN IRVIN ISLAM ISLAND ISN ISRA ISRAEL ISSU ITEM JACK JAKE JASON JEFF JEFFERSON JERUSALEM JESS JEW JEWISH JIM JIMMI JOEL JOHN JOSEPH JOYSTICK JUSTIFI KEI KEITH KEN KENNETH KEYBOARD KEYWORD KIDNEI KILL KIND KIRLIAN KLUTE KNOW KNOWLEDG KRILLEAN LAB 
LABEL LABORATORI LACK LAND LANGUAG LARG LARRI LASER LAW LEAD LEADER LEARN LEAV LEBANES LEBANON LEFT LEGAL LET LETTER LEVEL LIBRARI LICENS LIFE LIGHT LIMIT LINK LINUX LIST LISTEN LITERATUR LIVE LIVNI LOAD LOCAL LOCAT LOGIC LOGIN LONG LONGER LOOK LOOP LOST 
LOT LOVE LUCK LUNG LYME MACHIN MAHAN MAIL MAIN MAINTAIN MAJOR MAKE MAN MANAG MANUAL MAP MARC MARK MARKET MARTIN MASK MASS MASSACR MATERI MATH MATTER MCGILL MEAN MEASUR MECHAN MED MEDIA MEDIC MEDICIN MELLON MEMBER MEMORI MENTION MENU MESSAG METAL METHOD 
METHODOLOG MICHAEL MIDDL MIGRAIN MIKE MILE MILITARI MILLION MIND MINUT MISC MISS MISTAK MODE MODEL MODIFI MODUL MON MONEI MONITOR MONTH MORAL MOTIF MOTOROLA MOUNTAIN MOUS MOVE MOVEMENT MSG MULTI MULTIPL MURDER MUSCL MUSLIM NAFTALI NAME NASA NATION NATUR 
NAZI NECESSARILI NEED NEEDL NEGOTI NET NETANYAHU NETCOM NETNEW NETWORK NEUTRAL NEW NEWS NEWSREAD NICE NIGHT NNTP NOIS NORMAL NORTH NOTE NOTIC NUCLEAR NULL NUMBER OBJECT OBSERV OBTAIN OCCUP OCCUPI OCCUR ODOMET OFFER OFFIC OFFICI OHIO OLWM OMRAN OPEN 
OPENLOOK OPENWINDOW OPER OPINION OPTION ORDER ORG ORGAN ORIGIN OSCIL OUTLET OUTPUT OWNER PACKAG PACKARD PACKET PAGE PAID PAIN PALESTIN PALESTINIAN PAPER PARENT PART PARTI PASS PATCH PATIENT PATRICK PAUL PEAC PERFORM PERIOD PERSIAN PERSON PETER PHONE 
PHOTOGRAPHI PHYSIC PHYSICIAN PICA PICK PICTUR PILL PIN PITT PITTSBURGH PIXEL PIXMAP PLACE PLAI PLAIN PLAN PLANE PLAYER PLUG POINT POINTER POLIC POLICI POLIT POPUL POPULAR POPUP PORT POSIT POSSIBL POST POSTER POSTSCRIPT POWER PRACTIC PREFER PRESENT PRESID 
PRESS PRETTI PREVENT PREVIOU PRICE PRINT PRINTER PRIVAT PROBLEM PROCESS PRODUC PRODUCT PROGRAM PROGRAMM PROJECT PROLIN PROPAGANDA PROPER PROPOS PROTECT PROTOCOL PROVE PROVID PUBLIC PUBLISH PULL PURPOS PUT QUACK QUALITI QUESTION QUOT RACE RACISM RACIST 
RADAR RADIO RAINER RANG RATE REACTION READ READER REAL REALIZ REASON REC RECAL RECEIV RECOGN RECOMMEND REDUC REDUND REGION REGIST REILLI RELAI RELAT RELEAS RELIABL RELIGION REMAIN REMEMB REMOT REMOV REPEAT REPLAC REPLI REPORT REQUEST REQUIR RESEARCH 
RESERV RESIST RESISTOR RESOURC RESPOND RESPONS REST RESULT RETURN REVIEW RICH RICHARD RICHARDSON RIGHT RIND RING RISK RIVER ROAD ROBERT ROCHEST RON ROOM ROOT RUI RULE RUN RUSSEL RUSSIAN SALAH SALE SALMON SAMPL SAT SAVE SCHEMAT SCHOOL SCHWARTZ SCI SCIENC 
SCIENTIF SCIENTIST SCOPE SCOTT SCREEN SDSU SEA SEARCH SEATTL SECTION SECUR SEEK SEIZUR SELECT SELL SEMIT SEND SENS SENSIT SEPAR SEQUENC SERA SERDAR SERI SERIAL SERV SERVER SERVIC SET SEXUAL SHACK SHAME SHARE SHELL SHNEKENDORF SHOOT SHORT SHOSTACK SHOT 
SHOULDN SHOW SICK SIDE SIGN SIGNAL SIGNIFIC SIMILAR SIMM SIMPL SIMPLI SINGL SITE SITUAT SIZE SKEPTIC SKIN SLEEP SLOW SMALL SMOKE SOCIETI SOFTWAR SOLARI SOLDIER SOLUT SORT SOUND SOURC SOUTH SOVIET SPACE SPARC SPEAK SPEC SPECIAL SPECIF SPEED SPELL SPOCK 
SPOT STAI STAND STANDARD START STATE STATEMENT STATIC STATU STEIN STEPHEN STEVE STEVEN STONE STOP STORE STORI STRING STRIP STUDENT STUDI STUFF STUPID STYLE SUBSCRIB SUBSCRIV SUFFER SUGGEST SUIT SUMMARI SUN SUNO SUPERSTIT SUPPLI SUPPORT SUPPOS SURGERI 
SURPRIS SURREND SUSPECT SWITCH SYMBOL SYMPTOM SYNDROM SYRIA SYSTEM TABL TAKE TALK TAPE TARGET TAST TCP TECHNIC TECHNOLOG TEKTRONIX TEL TELEPHON TELL TEMPERATUR TERM TERMIN TERRITORI TERROR TERRORIST TEST TEXA TEXT THAT THEE THEORI THERAPI THERE THEY THINK 
THOMA THOUGHT THREAD THROW THU TIM TIME TIMER TITL TODAI TOLD TOM TONIGHT TOOL TOOLKIT TOPIC TORONTO TOTAL TOWER TRACE TRAFFIC TRAIN TRANSFORM TRANSLAT TRANSMIT TREAT TREATMENT TROOP TROUBL TRUE TRUTH TUBE TUE TURK TURKEI TURKISH TURN TYPE TYPIC UNDEFIN 
UNDERSTAND UNIT UNIV UNIVERS UNIX UNKNOWN UPDAT URBANA USA USENET USER UTEXA UUCP VALU VANDERBYL VARIABL VAX VERSION VIDEO VIEW VILLAG VIRGINIA VIRTUAL VISUAL VOIC VOLT VOLTAG WAI WAIT WALL WANT WAR WARN WASHINGTON WASN WAST WATCH WATER WAVE WAYN WED WEEK 
WEIGHT WEST WESTERN WHAT WHITE WIDE WIDGET WIDTH WIFE WIN WINDOW WIRE WOMEN WON WONDER WORD WORK WORLD WORTH WOULDN WPI WRITE WRITTEN WRONG WROTE XLIB XPUTIMAG XSERVER XTERM XTERMIN XVIEW XWINDOW YASSIN YEAH YEAR YEAST YIGAL YORK YOU YOUNG ZIONISM ZIONIST 
ZUMA
MPRINT(EM_DIAGRAM):  );
46307      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set EMWS3.CLUS_DISTANCE has 10 observations and 11 variables.
NOTE: PROCEDURE DISTANCE ha utilizado (Tiempo de proceso total):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

46308      proc mds data=EMWS3.Clus_DISTANCE out=WORK.Clus_mds level=absolute nohist shape=square dim=3;
MPRINT(EM_DIAGRAM):    proc mds data=EMWS3.Clus_DISTANCE out=WORK.Clus_mds level=absolute nohist shape=square dim=3;
46309      object _idvar_;
MPRINT(EM_DIAGRAM):   object _idvar_;
46310      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Convergence reached in 15 iterations.
NOTE: The data set WORK.CLUS_MDS has 11 observations and 8 variables.
NOTE: PROCEDURE MDS ha utilizado (Tiempo de proceso total):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
46311      quit;
46312      data WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   data WORK.Clus_mds;
46313      set WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   set WORK.Clus_mds;
46314      if _type_ ne 'CONFIG' then delete;
MPRINT(EM_DIAGRAM):   if _type_ ne 'CONFIG' then delete;
46315      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK.CLUS_MDS.
NOTE: The data set WORK.CLUS_MDS has 10 observations and 8 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

46316      data WORK.Clus_mds(label="&label" keep=_idvar_ _radius_ dim1 dim2 dim3);
WARNING: Apparent symbolic reference LABEL not resolved.
MPRINT(EM_DIAGRAM):   data WORK.Clus_mds(label="&label" KEEP=_idvar_ _radius_ dim1 dim2 dim3);
46317      merge WORK.Clus_temp WORK.Clus_mds;
MPRINT(EM_DIAGRAM):   merge WORK.Clus_temp WORK.Clus_mds;
46318      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set WORK.CLUS_TEMP.
NOTE: There were 10 observations read from the data set WORK.CLUS_MDS.
NOTE: The data set WORK.CLUS_MDS has 10 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

46319      goptions reset=all device=PNG;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG;
46320      options nodate;
MPRINT(EM_DIAGRAM):   options nodate;
46321      title1 "%sysfunc(sasmsg(sashelp.dmine, rpt_ClusterDistance_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title1 "Proximidades clúster";
46322      %plotit(data=WORK.Clus_mds, datatype=mds, radii=_radius_, labelvar=_idvar_, symtype=circle, symbols='*', gout=WORK.Clus, gname=DISTANCE, gopts2=nodisplay, gopts=device=GIF, gopplot=cback=white, titlecol=black, labelcol=black, tickcol=black,
MPRINT(EM_DIAGRAM):   *------debugging routine to dump out macro variables------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):  *=========================== Macro Start =============================;
46323         framecol=black, post=C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD17292_MIIKYMEDIA_\Prc2\plotit.ps);
MPRINT(PLOTIT):   options nonotes;
MPRINT(PLOTIT):   options missing='.';
MPRINT(PLOTIT):   options noserror;
MPRINT(PLOTIT):   options serror;
MPRINT(PLOTIT):   *------store starting time, initialize a few variables-------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length name $ 8 __debug value $ 500 glob $ 32767;
MPRINT(PLOTIT):   __time = datetime();
MPRINT(PLOTIT):   call symput('start',compress(put(__time,best15.)));
MPRINT(PLOTIT):   *------override parameters?-------;
MPRINT(PLOTIT):   glob = left(symget('plotitop'));
MPRINT(PLOTIT):   if glob ne ' ' then put 'Overridden Parameters:';
MPRINT(PLOTIT):   do while(glob ne ' ');
MPRINT(PLOTIT):   i = index(glob, '=');
MPRINT(PLOTIT):   name = substr(glob, 1, i - 1);
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   i = index(glob, ',');
MPRINT(PLOTIT):   if i = 0 then i = length(glob) + 1;
MPRINT(PLOTIT):   value = substr(glob, 1, i);
MPRINT(PLOTIT):   value = translate(value, ' ', ',');
MPRINT(PLOTIT):   glob = left(substr(glob, i + 1));
MPRINT(PLOTIT):   put name +(-1) '=' value;
MPRINT(PLOTIT):   call symput(name, trim(value));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------debugging flags-------;
MPRINT(PLOTIT):   __debug = symget('debug');
MPRINT(PLOTIT):   call symput('dbyes' ,compress(put(index(__debug,'vars') ,3.)));
MPRINT(PLOTIT):   call symput('dbprint' ,compress(put(index(__debug,'dprint'),3.)));
MPRINT(PLOTIT):   call symput('dbtime' ,compress(put(index(__debug,'time') ,3.)));
MPRINT(PLOTIT):   call symput('dbmprint',compress(put(index(__debug,'mprint'),3.)));
MPRINT(PLOTIT):   if (sysprod('stat') + sysprod('graph')) ne 2 then do;
MPRINT(PLOTIT):   put 'ERROR: SAS/STAT and SAS/GRAPH must be licensed ' 'to run this macro.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('style') ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: STYLE= is not supported in this release of the macro.' / '       Use OPTIONS NOGSTYLE to get the old appearance.' / '       Typically, you should set a style ' 'on the ODS destination.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length s $ 20;
MPRINT(PLOTIT):   retain s ' ';
MPRINT(PLOTIT):   file print;
MPRINT(PLOTIT):   set sashelp.vdest;
MPRINT(PLOTIT):   notb = style ne ' ';
MPRINT(PLOTIT):   style = lowcase(style);
MPRINT(PLOTIT):   if style eq 'listing' and s eq ' ' then call symputx('style', style, 'L');
MPRINT(PLOTIT):   else if style ne 'listing' and notb then do;
MPRINT(PLOTIT):   if s eq ' ' then s = style;
MPRINT(PLOTIT):   else if style ne s then do;
MPRINT(PLOTIT):   file log;
MPRINT(PLOTIT):   put 'ERROR: Multiple non-listing destinations with ' 'multiple ' 'styles ' 'are ' 'open.';
MPRINT(PLOTIT):   call symput('abort', '2');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if s ne ' ' then call symputx('style', s, 'L');
MPRINT(PLOTIT):   if _error_ then call symput('abort', '1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   *------mention var names for ordinary SAS syntax check-------;
MPRINT(PLOTIT):   retain _idvar_ __junk 0;
MPRINT(PLOTIT):   array __1 _idvar_ __junk;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(symget('labelvar')) > 67 or length(symget('symvar')) > 67 or length(symget('typevar')) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store current linesize and pagesize to restore later------;
MPRINT(PLOTIT):   length __ls __ps __var sysscp $ 8 ;
MPRINT(PLOTIT):   __num = getoption('number');
MPRINT(PLOTIT):   __ls = getoption('linesize');
MPRINT(PLOTIT):   __ps = getoption('pagesize');
MPRINT(PLOTIT):   __lab = getoption('label');
MPRINT(PLOTIT):   __var = getoption('validvarname');
MPRINT(PLOTIT):   __page = input(__ps, 8.);
MPRINT(PLOTIT):   if __page < 200 then __logps = __page + 1;
MPRINT(PLOTIT):   else __logps = 200;
MPRINT(PLOTIT):   if __logps < 20 then __logps = 20;
MPRINT(PLOTIT):   call symput('v7' , put(index(__var, '6') eq 0, 1.));
MPRINT(PLOTIT):   call symput('restornum',compress(__num));
MPRINT(PLOTIT):   call symput('restorla', compress(__lab));
MPRINT(PLOTIT):   call symput('restorls', compress(__ls));
MPRINT(PLOTIT):   call symput('restorps', compress(__ps));
MPRINT(PLOTIT):   call symput('logps' , compress(put(__logps, best8.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options label;
MPRINT(PLOTIT):   *------start parameter checking, initialization------;
MPRINT(PLOTIT):   *------initialization------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length data f1-f11 $ 72 name $ 70 post opts datatype plotvars $ 500 filepref $ 32;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------change other options based on GSTYLE/NOGSTYLE------;
MPRINT(PLOTIT):   if upcase(symget('style')) ne ' ' then do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'none');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LBFh');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if symget('font') eq ' ' then call symput('font', 'swiss');
MPRINT(PLOTIT):   if symget('tickaxes') eq ' ' then call symput('tickaxes', 'LRTBFlb');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   datatype = upcase(symget('datatype'));
MPRINT(PLOTIT):   *------start setting up background color, border------;
MPRINT(PLOTIT):   opts = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('noback', put(index(opts, 'noback') ge 1, 1.));
MPRINT(PLOTIT):   if symget('noback') eq '1' then call symput('cframe', ' ');
MPRINT(PLOTIT):   if index(opts, 'noborder') then b = '0';
MPRINT(PLOTIT):   else if index(opts, 'border') then b = '1';
MPRINT(PLOTIT):   else if upcase(symget('style')) eq ' ' then b = '0';
MPRINT(PLOTIT):   else b = '1';
MPRINT(PLOTIT):   call symput('border', b);
MPRINT(PLOTIT):   *------initialize some macro variables------;
MPRINT(PLOTIT):   call symput('onetype','1');
MPRINT(PLOTIT):   call symput('singular','1e-8');
MPRINT(PLOTIT):   call symput('allblank','1');
MPRINT(PLOTIT):   call symput('botblank','0');
MPRINT(PLOTIT):   call symput('nlines' ,'0');
MPRINT(PLOTIT):   call symput('symnumer','0');
MPRINT(PLOTIT):   call symput('typenum' ,'0');
MPRINT(PLOTIT):   call symput('search' ,' ');
MPRINT(PLOTIT):   call symput('actualls','-1');
MPRINT(PLOTIT):   call symput('symdummy','#');
MPRINT(PLOTIT):   call symput('paintcol',' ');
MPRINT(PLOTIT):   call symput('paintmin','.');
MPRINT(PLOTIT):   call symput('paintmax','.');
MPRINT(PLOTIT):   call symput('paintnum','0');
MPRINT(PLOTIT):   call symput('ncontour','0');
MPRINT(PLOTIT):   call symput('hcontour','0');
MPRINT(PLOTIT):   call symput('vcontour','0');
MPRINT(PLOTIT):   call symput('hcondir ','0');
MPRINT(PLOTIT):   call symput('vcondir ','0');
MPRINT(PLOTIT):   call symput('looklist','0');
MPRINT(PLOTIT):   call symput('sizsquar','1');
MPRINT(PLOTIT):   call symput('ntitles' ,'0');
MPRINT(PLOTIT):   call symput('device' ,symget('sysdevic'));
MPRINT(PLOTIT):   call symput('datatype',trim(datatype));
MPRINT(PLOTIT):   call symput('listtitl','*** Wrapped Listing of Point Locations ***');
MPRINT(PLOTIT):   *------set vector scale factor------;
MPRINT(PLOTIT):   name = ' ';
MPRINT(PLOTIT):   do i = 5 to 2 by -1;
MPRINT(PLOTIT):   if name = ' ' then name = scan(datatype,i,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if name = ' ' or nmiss(input(name,?? 32.)) then name = '1';
MPRINT(PLOTIT):   call symput('biplot',trim(name));
MPRINT(PLOTIT):   *------make sure there are input data------;
MPRINT(PLOTIT):   data = left(upcase(symget('data')));
MPRINT(PLOTIT):   if data in (' ' '_LAST_') then do;
MPRINT(PLOTIT):   data = symget('syslast');
MPRINT(PLOTIT):   call symput('data',trim(data));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if data = '_NULL_' then do;
MPRINT(PLOTIT):   put 'ERROR: No input data set.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default file name------;
MPRINT(PLOTIT):   post = symget('post');
MPRINT(PLOTIT):   if post = ' ' then do;
MPRINT(PLOTIT):   sysscp = symget('sysscp');
MPRINT(PLOTIT):   filepref = symget('filepref');
MPRINT(PLOTIT):   if filepref = ' ' then filepref = 'sasplot';
MPRINT(PLOTIT):   if sysscp = 'CMS' then post = trim(filepref) || ' ' || 'ps';
MPRINT(PLOTIT):   else if sysscp =: 'VMS' or sysscp = 'WIN' or sysscp = 'OS2' then post = trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   else post = '.' || trim(filepref) || '.' || 'ps';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('post', trim(post));
MPRINT(PLOTIT):   *------some options cannot have null values------;
MPRINT(PLOTIT):   if symget('out') = ' ' then call symput('out' ,'anno');
MPRINT(PLOTIT):   if symget('tempdat1') = ' ' then call symput('tempdat1','tempdat1');
MPRINT(PLOTIT):   if symget('tempdat2') = ' ' then call symput('tempdat2','tempdat2');
MPRINT(PLOTIT):   if symget('tempdat3') = ' ' then call symput('tempdat3','tempdat3');
MPRINT(PLOTIT):   if symget('tempdat4') = ' ' then call symput('tempdat4','tempdat4');
MPRINT(PLOTIT):   if symget('tempdat5') = ' ' then call symput('tempdat5','tempdat5');
MPRINT(PLOTIT):   if symget('tempdat6') = ' ' then call symput('tempdat6','tempdat6');
MPRINT(PLOTIT):   if symget('regdat') = ' ' then call symput('regdat' ,'regdat');
MPRINT(PLOTIT):   if symget('preproc') = ' ' then call symput('preproc' ,'preproc');
MPRINT(PLOTIT):   if symget('extraobs') = ' ' then call symput('extraobs','extraobs');
MPRINT(PLOTIT):   if symget('radii') = ' ' then call symput('radii' ,'1, 2');
MPRINT(PLOTIT):   if symget('cirsegs') = ' ' then call symput('cirsegs' ,'.1');
MPRINT(PLOTIT):   if symget('cursegs') = ' ' then call symput('cursegs' ,'200');
MPRINT(PLOTIT):   if symget('maxiter') = ' ' then call symput('maxiter' ,'15');
MPRINT(PLOTIT):   if symget('lsinc') = ' ' then call symput('lsinc' ,'15');
MPRINT(PLOTIT):   if symget('place') = ' ' then call symput('place' ,'2 search');
MPRINT(PLOTIT):   if symget('symlen') = ' ' then call symput('symlen' ,'1');
MPRINT(PLOTIT):   if symget('ls') = ' ' then call symput('ls','compute search');
MPRINT(PLOTIT):   if symget('maxokpen') = ' ' then call symput('maxokpen','0');
MPRINT(PLOTIT):   if symget('ticklen') = ' ' then call symput('ticklen' ,'1.5');
MPRINT(PLOTIT):   if symget('tickfor') = ' ' then call symput('tickfor' ,'32.');
MPRINT(PLOTIT):   if symget('hnobs') = ' ' then call symput('hnobs' ,'0');
MPRINT(PLOTIT):   if symget('vnobs') = ' ' then call symput('vnobs' ,'0');
MPRINT(PLOTIT):   *------is radii a variable name?------;
MPRINT(PLOTIT):   name = upcase(substr(left(symget('radii')),1,1));
MPRINT(PLOTIT):   call symput('radname', put('A' <= name <= 'Z' or name = '_' or name = '"' or name = "'", 1.));
MPRINT(PLOTIT):   *------always use a formchar------;
MPRINT(PLOTIT):   call symput('procopts', trim(symget('procopts')) || " formchar='|----|+|---'");
MPRINT(PLOTIT):   *------was TYPES= specified?------;
MPRINT(PLOTIT):   call symput('typespec', put(symget('types') ne ' ',1.));
MPRINT(PLOTIT):   *------set default plotvars------;
MPRINT(PLOTIT):   plotvars = symget('plotvars');
MPRINT(PLOTIT):   if plotvars = ' ' then do;
MPRINT(PLOTIT):   if index(datatype,'MDS') or index(datatype,'MCA') or index(datatype,'ROW') or index(datatype,'COLUMN') or index(datatype,'CORRESP') then plotvars = 'Dim2 Dim1';
MPRINT(PLOTIT):   else if index(datatype,'MDPREF') or index(datatype,'VECTOR') or index(datatype,'IDEAL') then plotvars = 'Prin2 Prin1';
MPRINT(PLOTIT):   call symput('plotvars',trim(plotvars));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for conflicting data set names------;
MPRINT(PLOTIT):   f1 = left(upcase(symget('data')));
MPRINT(PLOTIT):   f2 = left(upcase(symget('out')));
MPRINT(PLOTIT):   f3 = left(upcase(symget('tempdat1')));
MPRINT(PLOTIT):   f4 = left(upcase(symget('tempdat2')));
MPRINT(PLOTIT):   f5 = left(upcase(symget('tempdat3')));
MPRINT(PLOTIT):   f6 = left(upcase(symget('tempdat4')));
MPRINT(PLOTIT):   f7 = left(upcase(symget('tempdat5')));
MPRINT(PLOTIT):   f8 = left(upcase(symget('tempdat6')));
MPRINT(PLOTIT):   f9 = left(upcase(symget('preproc')));
MPRINT(PLOTIT):   f10 = left(upcase(symget('extraobs')));
MPRINT(PLOTIT):   f11 = left(upcase(symget('regdat')));
MPRINT(PLOTIT):   opts = 'DATA OUT TEMPDAT1 TEMPDAT2 TEMPDAT3 TEMPDAT4 TEMPDAT5 ' || 'TEMPDAT6 PREPROC EXTRAOBS REGDAT';
MPRINT(PLOTIT):   array f[11] f1-f11;
MPRINT(PLOTIT):   do i = 1 to 11;
MPRINT(PLOTIT):   if f[i] =: 'WORK.' then f[i] = substr(f[i],6);
MPRINT(PLOTIT):   __name = f[i];
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   f[i] = __name;
MPRINT(PLOTIT):   do j = 1 to (i - 1);
MPRINT(PLOTIT):   if f[i] = f[j] then do;
MPRINT(PLOTIT):   oi = scan(opts,i,' ');
MPRINT(PLOTIT):   oj = scan(opts,j,' ');
MPRINT(PLOTIT):   put 'ERROR: Data sets ' oi +(-1) '=' f[i] 'and ' oj +(-1) '=' f[j] 'must be different.';
MPRINT(PLOTIT):   if oj = 'DATA' then put 'WARNING: You may have not specified DATA=.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------store input data set variable names------;
MPRINT(PLOTIT):   proc contents data=WORK.Clus_mds noprint out=tempdat1;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort data=tempdat1(keep=varnum type name);
MPRINT(PLOTIT):   by varnum;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------look for the type variable, plot variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length tvname vplotvar hplotvar upname vnormvar hnormvar pnormvar snormvar $ 70 __list plotvars __name $ 500 __c $ 1;
MPRINT(PLOTIT):   retain tvname vplotvar hplotvar hnormvar vnormvar pnormvar snormvar ' ' ok 1 vfound hfound pfound sfound 0;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   f = (index(symget('datatype'), 'FUNCTION') or index(upcase(symget('symtype')), 'FUNCTION'));
MPRINT(PLOTIT):   call symput('functype', put(f, 1.));
MPRINT(PLOTIT):   __name = symget('typevar');
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   tvname = __name;
MPRINT(PLOTIT):   __list = symget('plotvars');
MPRINT(PLOTIT):   __n = 1;
MPRINT(PLOTIT):   plotvars = __list;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   vnormvar = __name;
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   hnormvar = __name;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   pfound = (lowcase(__name) eq '_blank_' or __name eq ' ');
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   pnormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   sfound = (lowcase(__name) eq '_symbol_' or __name eq ' ' or lowcase(__name) eq "'00'x" or lowcase(__name) eq '"00"x');
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   link norm;
MPRINT(PLOTIT):   snormvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __list = symget('paint');
MPRINT(PLOTIT):   link namescan;
MPRINT(PLOTIT):   call symput('paintvar',trim(__name));
MPRINT(PLOTIT):   call symput('paint' ,trim(__list));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   if upname = tvname or (tvname = ' ' and upname = '_TYPE_') then do;
MPRINT(PLOTIT):   if tvname = ' ' then call symput('typevar','_type_');
MPRINT(PLOTIT):   if (type = 1) then call symput('typenum','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------plotting variables must be numeric------;
MPRINT(PLOTIT):   if (upname = hnormvar or upname = vnormvar) and type = 2 then do;
MPRINT(PLOTIT):   put 'ERROR: PLOTVARS=' plotvars 'must be numeric.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set default plotting variables if not set yet------;
MPRINT(PLOTIT):   if type = 1 then do;
MPRINT(PLOTIT):   if hplotvar = ' ' then do;
MPRINT(PLOTIT):   hplotvar = name;
MPRINT(PLOTIT):   hnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if vplotvar = ' ' then do;
MPRINT(PLOTIT):   vplotvar = name;
MPRINT(PLOTIT):   vnormvar = upname;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------make sure axis variables are found------;
MPRINT(PLOTIT):   if upname = hnormvar then do;
MPRINT(PLOTIT):   hfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   hplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = vnormvar then do;
MPRINT(PLOTIT):   vfound = 1;
MPRINT(PLOTIT):   __name = name;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   vplotvar = __name;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if upname = pnormvar then pfound = 1;
MPRINT(PLOTIT):   if upname = snormvar then sfound = 1;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   call symput('vplotvar',trim(vplotvar));
MPRINT(PLOTIT):   call symput('hplotvar',trim(hplotvar));
MPRINT(PLOTIT):   __list = trim(hplotvar) || ' ' || trim(vplotvar);
MPRINT(PLOTIT):   call symput('plotvars',trim(hplotvar) || ' ' || trim(vplotvar));
MPRINT(PLOTIT):   name = 'A' || vplotvar;
MPRINT(PLOTIT):   call symput('appvar1',trim(name));
MPRINT(PLOTIT):   if vplotvar = ' ' or hplotvar = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Not enough variables to plot.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not hfound then do;
MPRINT(PLOTIT):   put 'ERROR: Horizontal axis variable ' hplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not vfound then do;
MPRINT(PLOTIT):   put 'ERROR: Vertical axis variable ' vplotvar 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not pfound then do;
MPRINT(PLOTIT):   __name = symget('labelvar');
MPRINT(PLOTIT):   put 'ERROR: Label variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not sfound then do;
MPRINT(PLOTIT):   __name = symget('symvar');
MPRINT(PLOTIT):   put 'ERROR: Symbol variable ' __name 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if hnormvar = '_TYPE_' or vnormvar = '_TYPE_' then put 'WARNING: _TYPE_ is one of the axis variables.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   norm: * Normalize name, upper case, strip n-literals. * Input: __name * Output: __name (updated) * Sample usage: * __name = '"a b"n';
MPRINT(PLOTIT):   * link norm;
MPRINT(PLOTIT):   * Creates: __name = 'A B';
MPRINT(PLOTIT):   __name = upcase(__name);
MPRINT(PLOTIT):   if substr(__name,1,1) in ("'", '"') then __name = dequote(__name);
MPRINT(PLOTIT):   drop __name;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to length(__name);
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   namescan: * Returns nth name from a list. * Input: __list, __n * Output: __list, (trashed) * __name * Sample usage: * __list = 'a "b"n "C d"N d';
MPRINT(PLOTIT):   * __n = 2;
MPRINT(PLOTIT):   * link namescan;
MPRINT(PLOTIT):   * Creates: __name = '"b"n' * Notes: __name must have a length of at least 67. * a much longer length (say > 256) helps guard * against long, blank padded n-literals.;
MPRINT(PLOTIT):   __list = left(__list);
MPRINT(PLOTIT):   do __i = 1 to __n;
MPRINT(PLOTIT):   __c = substr(__list, 1, 1);
MPRINT(PLOTIT):   if trim(__c) in ("'", '"') then do;
MPRINT(PLOTIT):   __e = 0;
MPRINT(PLOTIT):   __len = length(__list);
MPRINT(PLOTIT):   do __k = 2 to __len until(__e);
MPRINT(PLOTIT):   if upcase(substr(__list, __k, 2)) in ("''", '""') then __k + 1;
MPRINT(PLOTIT):   else if upcase(substr(__list, __k, 2)) = compress(__c || 'N') then __e = __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else __e = index(__list, ' ') - 1;
MPRINT(PLOTIT):   if __e < 1 then __e = length(__list);
MPRINT(PLOTIT):   __name = substr(__list, 1, __e);
MPRINT(PLOTIT):   __list = left(substr(__list, __e + 2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------guard against silly n-literals------;
MPRINT(PLOTIT):   if length(__name) > 67 then do;
MPRINT(PLOTIT):   put 'ERROR: Your names are too long!';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __list __n __i __k __len __name __c __e;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------generate TYPES= list from data?------;
MPRINT(PLOTIT):   *------preliminary preprocessing that changes the data------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   set WORK.Clus_mds;
MPRINT(PLOTIT):   if n(Dim2,Dim1) = 2;
MPRINT(PLOTIT):   *------eliminate anti-ideal points------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------get colors from style------;
MPRINT(PLOTIT):   data tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   length w c $ 20 n 8;
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Set defaults based on options (from the pre-style days);
MPRINT(PLOTIT):   data tempdat6;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   w = 'parent      ';
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   c = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gaxis       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('framecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gborderlines';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('color');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcfit       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('curvecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'glabel      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('labelcol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gtext       ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('titlecol');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gwalls      ';
MPRINT(PLOTIT):   n = .;
MPRINT(PLOTIT):   c = symget('cframe');
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata1     ';
MPRINT(PLOTIT):   n = 1;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata2     ';
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata3     ';
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata4     ';
MPRINT(PLOTIT):   n = 4;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata5     ';
MPRINT(PLOTIT):   n = 5;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata6     ';
MPRINT(PLOTIT):   n = 6;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata7     ';
MPRINT(PLOTIT):   n = 7;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata8     ';
MPRINT(PLOTIT):   n = 8;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata9     ';
MPRINT(PLOTIT):   n = 9;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata10    ';
MPRINT(PLOTIT):   n = 10;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata11    ';
MPRINT(PLOTIT):   n = 11;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   w = 'gcdata12    ';
MPRINT(PLOTIT):   n = 12;
MPRINT(PLOTIT):   c = scan(symget('colors'), n);
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   * Get values from style and style parents up to four levels;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.listing / file="C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD17292_MIIKYMEDIA_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat2(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD17292_MIIKYMEDIA_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and 
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc template;
MPRINT(PLOTIT):   source styles.default / file="C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD17292_MIIKYMEDIA_\Prc2\plotit.ps";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3(keep=w c n);
MPRINT(PLOTIT):   infile "C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD17292_MIIKYMEDIA_\Prc2\plotit.ps" lrecl=80 pad;
MPRINT(PLOTIT):   input line $80.;
MPRINT(PLOTIT):   length w c $ 20;
MPRINT(PLOTIT):   if _n_ eq 1 then call symput('abort', '0');
MPRINT(PLOTIT):   line = lowcase(line);
MPRINT(PLOTIT):   w = scan(line, 1, '"'' =');
MPRINT(PLOTIT):   c = left(scan(line, 2, '=;'));
MPRINT(PLOTIT):   if index(c, '(') then c = ' ';
MPRINT(PLOTIT):   if (w eq 'gaxis') or (w eq 'gtext') or (w eq 'parent') or (w eq 'glabel') or (w eq 'gcfit') or (index(line, 'gwalls') and not index(line, 'olor')) or (index(line, 'gborderlines') and not index(line, 'olor')) or (index(line, 'gcdata') and 
not index(line, 'contrast'));
MPRINT(PLOTIT):   line = left(translate(line, '  ', '''"'));
MPRINT(PLOTIT):   n = input(scan(line, 3, 'a '), ?? 3.);
MPRINT(PLOTIT):   if w = 'parent' then do;
MPRINT(PLOTIT):   call symputx('style', scan(c, 2, '.'), 'L');
MPRINT(PLOTIT):   n = ._;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sort;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   merge tempdat6 tempdat5 tempdat4 tempdat3 tempdat2;
MPRINT(PLOTIT):   by n w;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   length list $ 200;
MPRINT(PLOTIT):   retain list ' ';
MPRINT(PLOTIT):   set tempdat3 end=eof;
MPRINT(PLOTIT):   if w eq 'gaxis' then do;
MPRINT(PLOTIT):   if symget('framecol') eq ' ' then call symputx('framecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gtext' then do;
MPRINT(PLOTIT):   if symget('titlecol') eq ' ' then call symputx('titlecol', c, 'L');
MPRINT(PLOTIT):   if symget('tickcol') eq ' ' then call symputx('tickcol' , c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'glabel' then do;
MPRINT(PLOTIT):   if symget('labelcol') eq ' ' then call symputx('labelcol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if w eq 'gcfit' then do;
MPRINT(PLOTIT):   if symget('curvecol') eq ' ' then call symputx('curvecol', c, 'L');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not 0 and w eq 'gwalls' and symget('cframe') eq ' ' and c ne '_undef_' then call symputx('cframe', c, 'L');
MPRINT(PLOTIT):   else if 1 and w eq 'gborderlines' then call symput('border', c);
MPRINT(PLOTIT):   if 1 and w =: 'gcdata' then do;
MPRINT(PLOTIT):   if n = 1 then n = .;
MPRINT(PLOTIT):   else if n = . then n = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(n);
MPRINT(PLOTIT):   list = trim(list) || ' ' || c;
MPRINT(PLOTIT):   list = compbl(list);
MPRINT(PLOTIT):   if eof then call symput('colors', compbl(list));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------more initializations------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length name symvar $ 70 color framecol titlecol labelcol tickcol curvecol monochro font size name1-name2 tsize $ 12 anele anele2 $ 16 word $ 24 list list2 datatype types colors symbols symcol symtype symfont symsize labcol labfont 
labsize britypes rgbtypes exttypes $ 500;
MPRINT(PLOTIT):   *------finalize border, border color------;
MPRINT(PLOTIT):   word = symget('border');
MPRINT(PLOTIT):   if word eq '1' then word = "black";
MPRINT(PLOTIT):   else if word eq '0' then word = ' ';
MPRINT(PLOTIT):   call symput('border', trim(word));
MPRINT(PLOTIT):   *------set default symbol variable------;
MPRINT(PLOTIT):   symvar = symget('symvar');
MPRINT(PLOTIT):   *------list of valid DATATYPE= values------;
MPRINT(PLOTIT):   array dts[15] corresp mca row column mdpref mdpref2 vector ideal mds curve curve2 function contour square symbol;
MPRINT(PLOTIT):   *------22 lists, 10 lists of ntypes elements, 9 single-element lists 3 longer lists------;
MPRINT(PLOTIT):   listn = 22;
MPRINT(PLOTIT):   listm = 10;
MPRINT(PLOTIT):   listo = 19;
MPRINT(PLOTIT):   array vars[22] $ types colors symbols symcol symtype symfont symsize labcol labfont labsize color framecol titlecol labelcol tickcol curvecol monochro font cframe britypes rgbtypes exttypes;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   *------check method------;
MPRINT(PLOTIT):   name = symget('method');
MPRINT(PLOTIT):   word = lowcase(compress(name,' 2'));
MPRINT(PLOTIT):   if not (word in ('gplot' 'print' 'plot' 'none')) then do;
MPRINT(PLOTIT):   put 'ERROR: METHOD=' name 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   call symput('method',trim(word));
MPRINT(PLOTIT):   if word = 'plot' then call symput('looklist', '1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------convert binary options ------;
MPRINT(PLOTIT):   list = lowcase(symget('options'));
MPRINT(PLOTIT):   call symput('diag' ,put(index(list,'diag') > 0,1.));
MPRINT(PLOTIT):   call symput('expand' ,put(index(list,'expand') > 0,1.));
MPRINT(PLOTIT):   call symput('closebord',put(index(list,'close') > 0,1.));
MPRINT(PLOTIT):   call symput('center' ,put(index(list,'nocenter') = 0,1.));
MPRINT(PLOTIT):   call symput('clip' ,put(index(list,'noclip') = 0,1.));
MPRINT(PLOTIT):   call symput('delete' ,put(index(list,'nodelete') = 0,1.));
MPRINT(PLOTIT):   call symput('linetext' ,put(index(list,'textline') = 0,1.));
MPRINT(PLOTIT):   call symput('squarplt' ,put(index(list,'square') > 0,1.));
MPRINT(PLOTIT):   print = (index(list,'noprint') = 0);
MPRINT(PLOTIT):   call symput('legend' ,put(index(list,'nolegend') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('history',put(index(list,'nohistory') = 0 and print,1.));
MPRINT(PLOTIT):   call symput('code' ,put(index(list,'nocode') = 0 and print,1.));
MPRINT(PLOTIT):   *------make sure all options are recognized------;
MPRINT(PLOTIT):   list2 = 'noborder border close diag expand noclip nocode nodelete ' || 'nocenter noback nohistory nolegend noprint square textline';
MPRINT(PLOTIT):   do i = 1 to 13;
MPRINT(PLOTIT):   word = scan(list2,i);
MPRINT(PLOTIT):   j = index(list,trim(word));
MPRINT(PLOTIT):   if j then substr(list,j,length(word)) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: The following options are not recognized: ' list +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check INTERPOL=------;
MPRINT(PLOTIT):   list = lowcase(symget('interpol'));
MPRINT(PLOTIT):   call symput('intrtick',put((index(list,'tick') or not (index(list,'ls') or index(list,'no'))),1.));
MPRINT(PLOTIT):   call symput('intrls' ,put((index(list,'ls') or not index(list,'no')),1.));
MPRINT(PLOTIT):   call symput('hlogscal',put((index(list,'hlog') > 0),1.));
MPRINT(PLOTIT):   call symput('vlogscal',put((index(list,'vlog') > 0),1.));
MPRINT(PLOTIT):   *------parse the DATATYPE= option------;
MPRINT(PLOTIT):   datatype = symget('datatype');
MPRINT(PLOTIT):   list = datatype;
MPRINT(PLOTIT):   do i = 1 to 15;
MPRINT(PLOTIT):   call vname(dts[i],name);
MPRINT(PLOTIT):   j = index(datatype,trim(upcase(name)));
MPRINT(PLOTIT):   if j then substr(list,j,length(name)) = ' ';
MPRINT(PLOTIT):   dts[i] = (j ne 0);
MPRINT(PLOTIT):   call symput(name,compress(put(dts[i],1.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list = compress(list,'0123456789.e+-');
MPRINT(PLOTIT):   if list ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid DATATYPE=' datatype +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------get the lists that must be quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   vars[i] = symget(name);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symtype = lowcase(symtype);
MPRINT(PLOTIT):   britypes = lowcase(britypes);
MPRINT(PLOTIT):   rgbtypes = lowcase(rgbtypes);
MPRINT(PLOTIT):   exttypes = lowcase(exttypes);
MPRINT(PLOTIT):   *-----make sure these are set------;
MPRINT(PLOTIT):   if font = ' ' then font = 'swiss';
MPRINT(PLOTIT):   tsize = symget('tsize');
MPRINT(PLOTIT):   if tsize = ' ' then do;
MPRINT(PLOTIT):   tsize = '1';
MPRINT(PLOTIT):   call symput('tsize','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------process DATATYPE= option------;
MPRINT(PLOTIT):   if datatype ne ' ' then do;
MPRINT(PLOTIT):   if contour then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' contour';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' solid';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' contour';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' contour';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if square then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' U';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' square';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' marker';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   rgbtypes = trim(rgbtypes) || ' square';
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' square';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if function then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' function';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' 1';
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ';
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   exttypes = trim(exttypes) || ' function';
MPRINT(PLOTIT):   name = symget('labelvar');
MPRINT(PLOTIT):   if name = ' ' then call symput('labelvar','_blank_');
MPRINT(PLOTIT):   if symvar = ' ' then put 'WARNING: Null symbol variable ' 'specified with ' 'DATATYPE=function.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref or vector or ideal then types = trim(types) || ' SCORE';
MPRINT(PLOTIT):   if mdpref or vector or ideal or symbol then do;
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if corresp or row or mca or column then do;
MPRINT(PLOTIT):   types = trim(types) || ' VAR OBS SUPVAR SUPOBS';
MPRINT(PLOTIT):   if row then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " '' * * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if column then do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol vector symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || " * '' * *";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol symbol symbol symbol';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' * * * *';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   symsize = trim(symsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   symfont = trim(symfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   labsize = trim(labsize) || repeat(' ' || trim(tsize),3);
MPRINT(PLOTIT):   labfont = trim(labfont) || repeat(' ' || trim(font) ,3);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref then do;
MPRINT(PLOTIT):   types = trim(types) || ' CORR';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mdpref2 then labsize = trim(labsize) || ' ' || compress(put(input(tsize, ?? 32.) * 0.75, best8.));
MPRINT(PLOTIT):   else labsize = trim(labsize) || ' 0';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   size = compress(put(input(tsize,?? 32.) * 1.5, best8.));
MPRINT(PLOTIT):   if vector then do;
MPRINT(PLOTIT):   types = trim(types) || ' MCOEFFI';
MPRINT(PLOTIT):   symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   symtype = trim(symtype) || ' vector';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ideal then do;
MPRINT(PLOTIT):   types = trim(types) || ' MPOINT';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' +';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' circle';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || size;
MPRINT(PLOTIT):   if lowcase(font) eq 'none' then do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font);
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || trim(font) || 'i';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if mds then do;
MPRINT(PLOTIT):   types = trim(types) || ' CONFIG';
MPRINT(PLOTIT):   symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   symtype = trim(symtype) || ' symbol';
MPRINT(PLOTIT):   symsize = trim(symsize) || ' ' || tsize;
MPRINT(PLOTIT):   symfont = trim(symfont) || ' ' || font;
MPRINT(PLOTIT):   labsize = trim(labsize) || ' ' || tsize;
MPRINT(PLOTIT):   labfont = trim(labfont) || ' ' || font;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (mds or corresp or mca or row or column or mdpref or mdpref2 or vector or ideal) and symget('label') = ' ' then call symput('label','typical');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ in case these were only specified in the symtype------;
MPRINT(PLOTIT):   if index(symtype, 'contour' ) then call symput('contour' , '1');
MPRINT(PLOTIT):   if index(symtype, 'square' ) then call symput('square' , '1');
MPRINT(PLOTIT):   *------set colors, other defaults------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   if colors = ' ' then colors = color;
MPRINT(PLOTIT):   if framecol = ' ' then framecol = color;
MPRINT(PLOTIT):   if titlecol = ' ' then titlecol = color;
MPRINT(PLOTIT):   if labelcol = ' ' then labelcol = color;
MPRINT(PLOTIT):   if tickcol = ' ' then tickcol = color;
MPRINT(PLOTIT):   if curvecol = ' ' then curvecol = color;
MPRINT(PLOTIT):   if symtype = ' ' then symtype = 'symbol';
MPRINT(PLOTIT):   if symsize = ' ' then symsize = tsize;
MPRINT(PLOTIT):   if symfont = ' ' then symfont = font;
MPRINT(PLOTIT):   if labsize = ' ' then labsize = tsize;
MPRINT(PLOTIT):   if labfont = ' ' then labfont = font;
MPRINT(PLOTIT):   if exttypes = ' ' then exttypes = "''";
MPRINT(PLOTIT):   if rgbtypes = ' ' then rgbtypes = "''";
MPRINT(PLOTIT):   labcol = trim(labcol) || ' ' || colors;
MPRINT(PLOTIT):   symcol = trim(symcol) || ' ' || colors;
MPRINT(PLOTIT):   *------default symbols when unspecified------;
MPRINT(PLOTIT):   if index(symtype, 'symbol') and symvar eq '_symbol_' and symbols = ' ' then do;
MPRINT(PLOTIT):   word = scan(symtype, 1, ' ');
MPRINT(PLOTIT):   do i = 1 to 500 while(word ne ' ');
MPRINT(PLOTIT):   if index(word, 'symbol') then symbols = trim(symbols) || ' *';
MPRINT(PLOTIT):   else symbols = trim(symbols) || " ''";
MPRINT(PLOTIT):   word = scan(symtype, i + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symbols = ' ' then symbols = "''";
MPRINT(PLOTIT):   *------count the number of types------;
MPRINT(PLOTIT):   if types = ' ' then types = "''";
MPRINT(PLOTIT):   do until(word eq ' ');
MPRINT(PLOTIT):   ntypes + 1;
MPRINT(PLOTIT):   word = scan(types, ntypes + 1, ' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   holdntyp = ntypes;
MPRINT(PLOTIT):   *------output number of observation types------;
MPRINT(PLOTIT):   call symput('ntypes',compress(put(ntypes,3.)));
MPRINT(PLOTIT):   *------output lists, make sure they are quoted------;
MPRINT(PLOTIT):   do i = 1 to listn;
MPRINT(PLOTIT):   if i > listm then ntypes = 1;
MPRINT(PLOTIT):   if i > listo then ntypes = 200;
MPRINT(PLOTIT):   link qlist;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   ntypes = holdntyp;
MPRINT(PLOTIT):   *------output sizes for squares------;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   word = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(word, 'square') then call symput('sizsquar', compress(scan(symsize, i, ' '), " '"||'"'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for constant symvar with vectors------;
MPRINT(PLOTIT):   symcon = (symvar = ' ' or (compress(symvar,"'"||'"') ne symvar));
MPRINT(PLOTIT):   if symcon then do;
MPRINT(PLOTIT):   i = length(symvar);
MPRINT(PLOTIT):   if i > 3 then do;
MPRINT(PLOTIT):   word = upcase(substr(symvar, i - 1));
MPRINT(PLOTIT):   if word in ('"N', "'N") then symcon = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('symcon',put(symcon,1.));
MPRINT(PLOTIT):   if symcon and index(symtype,'vector') then do;
MPRINT(PLOTIT):   put 'ERROR: Constant SYMVAR= is not allowed with vectors.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse RGBROUND= option------;
MPRINT(PLOTIT):   list = symget('rgbround');
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   do i = 1 to 4;
MPRINT(PLOTIT):   name = scan(list, i, ' ');
MPRINT(PLOTIT):   num = input(name, ?? 32.);
MPRINT(PLOTIT):   if nmiss(num) then num = .;
MPRINT(PLOTIT):   if i > 1 and num <= 0 then num = 1;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || compress(put(num,best8.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('rgbround',trim(left(list2)));
MPRINT(PLOTIT):   *------anything specified for the BRIGHT= option?------;
MPRINT(PLOTIT):   if symget('bright') = ' ' then do;
MPRINT(PLOTIT):   britypes = ' ';
MPRINT(PLOTIT):   call symput('britypes', compress(britypes));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------anything specified for the PAINT= option?------;
MPRINT(PLOTIT):   list = left(symget('paint'));
MPRINT(PLOTIT):   if symget('paintvar') = ' ' then do;
MPRINT(PLOTIT):   rgbtypes = ' ';
MPRINT(PLOTIT):   call symput('rgbtypes', compress(rgbtypes));
MPRINT(PLOTIT):   if contour then put 'WARNING: PAINT= was not specified ' 'with a contour plot.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------parse PAINT= option------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------count list elements------;
MPRINT(PLOTIT):   do n = 1 to 500 until(name2 = ' ');
MPRINT(PLOTIT):   name2 = scan(list,n,' ');
MPRINT(PLOTIT):   if n(input(name2,?? 32.)) then name2 = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   n = n - 1;
MPRINT(PLOTIT):   *------set default, when only a variable name is specified------;
MPRINT(PLOTIT):   if n < 1 then do;
MPRINT(PLOTIT):   n = 3;
MPRINT(PLOTIT):   list = 'blue magenta red';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if n < 2 then do;
MPRINT(PLOTIT):   n = 2;
MPRINT(PLOTIT):   name2 = scan(list,1,' ');
MPRINT(PLOTIT):   list = compress(name2) || ' ' || compress(name2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('paintcol', trim(list));
MPRINT(PLOTIT):   *------store, check number of list elements------;
MPRINT(PLOTIT):   call symput('paintnum',compress(put(n,3.)));
MPRINT(PLOTIT):   *------table of recognized colors and their hex rgb------;
MPRINT(PLOTIT):   allcols = 'BLACK--BLUE---BROWN--GRAY---GREEN--OLIVE--ORANGE-' || 'PINK---PURPLE-RED----VIOLET-WHITE--YELLOW-MAGENTA' || 'CYAN---';
MPRINT(PLOTIT):   hexcols = '000000 0000ff a05000 808080 00ff00 2a8307 ff8000 ' || 'ff0080 703070 ff0000 b090d0 ffffff ffff00 ff00ff ' || '00ffff ';
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   *------construct list of (decimal) RGB values------;
MPRINT(PLOTIT):   do j = 1 to 3;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   color = upcase(scan(list, i, ' '));
MPRINT(PLOTIT):   k = index(allcols,trim(color));
MPRINT(PLOTIT):   *------grab hex code for name, or parse CXrrggbb------;
MPRINT(PLOTIT):   if k then name1 = substr(hexcols,k + (j - 1) * 2,2);
MPRINT(PLOTIT):   else name1 = substr(color ,(j - 1) * 2 + 3,2);
MPRINT(PLOTIT):   *------check for validity------;
MPRINT(PLOTIT):   num = input(name1,?? hex2.);
MPRINT(PLOTIT):   if nmiss(num) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= color of ' color 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 4;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = compress(put(num,3.));
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   j = 3;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------build list------;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || trim(name1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store line segment end points in list if specified------;
MPRINT(PLOTIT):   list2 = left(list2);
MPRINT(PLOTIT):   name1 = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   do i = 1 to n;
MPRINT(PLOTIT):   name1 = scan(list,n + i,' ');
MPRINT(PLOTIT):   if nmiss(input(name1,?? 32.)) then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value of ' name1 'is not valid.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if length(list2) + length(name1) + 1 > 500 then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || name1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   name1 = scan(list,2 * n + 1,' ');
MPRINT(PLOTIT):   if name1 ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: PAINT= data value list is too long.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store processed PAINT= list------;
MPRINT(PLOTIT):   call symput('paint',trim(list2));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if input(symget('legend'), ?? 32.) then do;
MPRINT(PLOTIT):   awidth = 9;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = scan(types, i, ' ');
MPRINT(PLOTIT):   awidth = max(awidth, length(anele) + 1);
MPRINT(PLOTIT):   awidth = max(awidth, length(scan(symbols, i, ' ')) + 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   cols = min(15 + awidth * ntypes, 256);
MPRINT(PLOTIT):   cols = 15 + floor((cols - 15) / awidth) * awidth;
MPRINT(PLOTIT):   m = floor((256 - cols) / 2);
MPRINT(PLOTIT):   cols = cols - 1;
MPRINT(PLOTIT):   put / +m 'Types Legend  |' @@;
MPRINT(PLOTIT):   list = types;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   substr(list, 15, 1) = '+';
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   put +m 'Symbol Types  |' @@;
MPRINT(PLOTIT):   list = symtype;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbols       |' @@;
MPRINT(PLOTIT):   list = symbols;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Colors |' @@;
MPRINT(PLOTIT):   list = symcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Label  Colors |' @@;
MPRINT(PLOTIT):   list = labcol;
MPRINT(PLOTIT):   link legendc;
MPRINT(PLOTIT):   put +m 'Symbol Sizes  |' @@;
MPRINT(PLOTIT):   list = symsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Sizes  |' @@;
MPRINT(PLOTIT):   list = labsize;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Symbol Fonts  |' @@;
MPRINT(PLOTIT):   list = symfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   put +m 'Label  Fonts  |' @@;
MPRINT(PLOTIT):   list = labfont;
MPRINT(PLOTIT):   link legend;
MPRINT(PLOTIT):   list = repeat('-', cols);
MPRINT(PLOTIT):   put +m list;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legend: *------print legend------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   legendc: *------print legend for colors------;
MPRINT(PLOTIT):   j = 0;
MPRINT(PLOTIT):   do i = 1 to ntypes;
MPRINT(PLOTIT):   anele2 = scan(symtype, i, ' ');
MPRINT(PLOTIT):   if index(rgbtypes, trim(anele2)) or index(britypes, trim(anele2)) then anele = ' ';
MPRINT(PLOTIT):   else anele = compress(scan(list, i, ' '), "'"||'"');
MPRINT(PLOTIT):   link printele;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   printele: *------print one table element------;
MPRINT(PLOTIT):   j = j + 1;
MPRINT(PLOTIT):   if (15 + awidth * j) > 256 then do;
MPRINT(PLOTIT):   put / +(m+14) '|' @@;
MPRINT(PLOTIT):   j = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   put @(m + 17 + (j - 1) * awidth) anele $ @@;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   qlist: *------quote the elements of a list------;
MPRINT(PLOTIT):   call vname(vars[i],name);
MPRINT(PLOTIT):   list2 = ' ';
MPRINT(PLOTIT):   list = vars[i];
MPRINT(PLOTIT):   charv = not index(upcase(name),'SIZE');
MPRINT(PLOTIT):   word = scan(list,1,' ');
MPRINT(PLOTIT):   do n = 1 to ntypes while(word ne ' ');
MPRINT(PLOTIT):   if charv then do;
MPRINT(PLOTIT):   word = compress("'" || compress(word,"'"||'"') || "'");
MPRINT(PLOTIT):   if not index(substr(word,2),"'") then do;
MPRINT(PLOTIT):   put 'ERROR: The list element ' name +(-1) '=' word 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if (length(list2) + length(word)) >= 500 then do;
MPRINT(PLOTIT):   put 'ERROR: The list ' name +(-1) '=' list2 'is too long.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   list2 = trim(list2) || ' ' || word;
MPRINT(PLOTIT):   word = scan(list,n + 1,' ');
MPRINT(PLOTIT):   if word = ' ' and i <= listm then word = scan(list2,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput(name,trim(left(list2)));
MPRINT(PLOTIT):   vars[i] = list2;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;

                                                                                                                    Types Legend  | CONFIG
                                                                                                                    --------------+---------
                                                                                                                    Symbol Types  | circle
                                                                                                                    Symbols       | *
                                                                                                                    Symbol Colors | cx000000
                                                                                                                    Label  Colors | cx000000
                                                                                                                    Symbol Sizes  | 1
                                                                                                                    Label  Sizes  | 1
                                                                                                                    Symbol Fonts  | none
                                                                                                                    Label  Fonts  | none
                                                                                                                    ------------------------
MPRINT(PLOTIT):   *------inertias for correspondence analysis variable labels------;
MPRINT(PLOTIT):   *------check, set remaining variables------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   set tempdat1 end=eof;
MPRINT(PLOTIT):   length __name setl labelvar tvname symvar paintvar upname $ 70;
MPRINT(PLOTIT):   retain setl labelvar tvname symvar paintvar ' ' paintfou typefoun 0 ok 1;
MPRINT(PLOTIT):   upname = upcase(name);
MPRINT(PLOTIT):   *------get current names------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   tvname = dequote(symget('typevar'));
MPRINT(PLOTIT):   labelvar = dequote(symget('labelvar'));
MPRINT(PLOTIT):   paintvar = dequote(symget('paintvar'));
MPRINT(PLOTIT):   if 0 then symvar = _symbol_;
MPRINT(PLOTIT):   else symvar = dequote(symget('symvar'));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------is the symbol variable numeric or character?------;
MPRINT(PLOTIT):   if not 0 and upname = upcase(symvar) and type = 1 then call symput('symnumer','1');
MPRINT(PLOTIT):   *------find _type_ variable------;
MPRINT(PLOTIT):   if upname = upcase(tvname) then typefoun = 1;
MPRINT(PLOTIT):   *------find PAINT= variable------;
MPRINT(PLOTIT):   if upname = upcase(paintvar) and type = 1 then paintfou = 1;
MPRINT(PLOTIT):   *------find default label variable name------;
MPRINT(PLOTIT):   else if type = 2 and (setl = ' ' or upname ne '_TYPE_') then setl = name;
MPRINT(PLOTIT):   *------at end, output results------;
MPRINT(PLOTIT):   if eof then do;
MPRINT(PLOTIT):   if labelvar = ' ' and setl ne ' ' then labelvar = setl;
MPRINT(PLOTIT):   if labelvar = ' ' then labelvar = '_blank_';
MPRINT(PLOTIT):   __name = labelvar;
MPRINT(PLOTIT):   link nliteral;
MPRINT(PLOTIT):   call symput('labelvar', trim(__name));
MPRINT(PLOTIT):   *------assorted error checking------;
MPRINT(PLOTIT):   if not typefoun and tvname ne ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: TYPEVAR=' tvname 'not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not typefoun and input(symget('typespec'), ?? 32.) then do;
MPRINT(PLOTIT):   put 'ERROR: A type variable must be available ' 'when TYPES= ' 'is specified.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (paintvar = ' ' or paintfou) then do;
MPRINT(PLOTIT):   put 'ERROR: A numeric PAINT=' paintvar 'variable was not found.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not ok or _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   nliteral: * Puts n-literal on name if necessary. * Input: __name * Output: __name (updated) * Sample usage: * __name = 'a b';
MPRINT(PLOTIT):   * link nliteral;
MPRINT(PLOTIT):   * Creates: __name = "'a b'n";
MPRINT(PLOTIT):   __v7 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';
MPRINT(PLOTIT):   __len = length(__name);
MPRINT(PLOTIT):   if index(__name, ' ') < __len or '0' <= substr(__name, 1, 1) <= '9' or compress(upcase(__name), __v7) ne ' ' then do;
MPRINT(PLOTIT):   __k = 1;
MPRINT(PLOTIT):   do __i = 1 to __len;
MPRINT(PLOTIT):   if substr(__name, __k, 1) eq "'" then do;
MPRINT(PLOTIT):   substr(__name, __k + 1) = "'" || substr(__name, __k + 1);
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __k + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __name = "'" || trim(__name) || "'n";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   drop __name __i __k __v7 __len;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find minima, maxima------;
MPRINT(PLOTIT):   proc means data=preproc noprint;
MPRINT(PLOTIT):   output out=tempdat1 max(Dim2 Dim1 )=vmax hmax min(Dim2 Dim1 )=vmin hmin;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set goptions------;
MPRINT(PLOTIT):   goptions nodisplay device=PNG cback=white device=GIF;
MPRINT(PLOTIT):   *------check some parameters for valid values, set up others------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length c $ 1 vplotvar hplotvar labelvar $ 70 opt $ 8 str place vecheadr vecheadw tinc device $ 12 outward search vechead ls $ 32 label plotreq plotopts upopts pl list labely labelx label $ 500 ind1 ind2 $ 35;
MPRINT(PLOTIT):   ok = 1;
MPRINT(PLOTIT):   call symput('somedata','0');
MPRINT(PLOTIT):   set tempdat1(drop=_type_);
MPRINT(PLOTIT):   call symput('somedata','1');
MPRINT(PLOTIT):   call symput('vinter', '.');
MPRINT(PLOTIT):   call symput('hinter', '.');
MPRINT(PLOTIT):   call symput('hslope', '.');
MPRINT(PLOTIT):   call symput('vslope', '.');
MPRINT(PLOTIT):   *------check missings------;
MPRINT(PLOTIT):   if n(vmin,hmin,vmax,hmax) < 4 then do;
MPRINT(PLOTIT):   put 'ERROR: At least one variable is all missing.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check for nonpositive data with log scales------;
MPRINT(PLOTIT):   if (vmin <= 0 and 0) or (hmin <= 0 and 0) then do;
MPRINT(PLOTIT):   put "ERROR: Nonpositive data with INTERPOL=yes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------store extend values------;
MPRINT(PLOTIT):   list = symget('extend');
MPRINT(PLOTIT):   call symput('close',compress(put(index(list,'close'),best3.)));
MPRINT(PLOTIT):   if nmiss(input(scan(list,1,' '),?? 32.)) then call symput('extendl',' ');
MPRINT(PLOTIT):   else call symput('extendl',scan(list,1,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,2,' '),?? 32.)) then call symput('extendr',' ');
MPRINT(PLOTIT):   else call symput('extendr',scan(list,2,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,3,' '),?? 32.)) then call symput('extendt',' ');
MPRINT(PLOTIT):   else call symput('extendt',scan(list,3,' '));
MPRINT(PLOTIT):   if nmiss(input(scan(list,4,' '),?? 32.)) then call symput('extendb',' ');
MPRINT(PLOTIT):   else call symput('extendb',scan(list,4,' '));
MPRINT(PLOTIT):   *------make sure PAINT= minimum, maximum are stored------;
MPRINT(PLOTIT):   call symput('rgbround', trim(symget('rgbround')) || ' .');
MPRINT(PLOTIT):   *------compute (possibly adjusted) range------;
MPRINT(PLOTIT):   isavec = index(symget('symtype'),'vector');
MPRINT(PLOTIT):   if isavec then do;
MPRINT(PLOTIT):   vmin = min(0,vmin);
MPRINT(PLOTIT):   hmin = min(0,hmin);
MPRINT(PLOTIT):   vmax = max(0,vmax);
MPRINT(PLOTIT):   hmax = max(0,hmax);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   vmax = max(vmax,hmax);
MPRINT(PLOTIT):   hmax = vmax;
MPRINT(PLOTIT):   vmin = min(vmin,hmin);
MPRINT(PLOTIT):   hmin = vmin;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 and not 0 then range = vmax - vmin;
MPRINT(PLOTIT):   else if 0 and not 0 then range = hmax - hmin;
MPRINT(PLOTIT):   else range = max(vmax - vmin, hmax - hmin);
MPRINT(PLOTIT):   range = max(1e4 * 1e-8,range);
MPRINT(PLOTIT):   *------default increment, minima, maxima------;
MPRINT(PLOTIT):   inc = input(symget('inc'),?? 32.);
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   inc = 10 ** ceil(log10(range) - 1.0);
MPRINT(PLOTIT):   if range / inc >= 7.5 then inc = inc * 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   if range / inc <= 2.5 then inc = inc / 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   tinc = compress(put(inc,best12.));
MPRINT(PLOTIT):   if n(inc) = 0 then do;
MPRINT(PLOTIT):   put 'ERROR: Input data set is empty, constant, or corrupt.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('inc' ,trim(tinc));
MPRINT(PLOTIT):   call symput('hmax',compress(put(hmax,best15.)));
MPRINT(PLOTIT):   call symput('hmin',compress(put(hmin,best15.)));
MPRINT(PLOTIT):   call symput('vmax',compress(put(vmax,best15.)));
MPRINT(PLOTIT):   call symput('vmin',compress(put(vmin,best15.)));
MPRINT(PLOTIT):   *------construct plot request------;
MPRINT(PLOTIT):   vplotvar = symget('vplotvar');
MPRINT(PLOTIT):   hplotvar = symget('hplotvar');
MPRINT(PLOTIT):   plotopts = symget('plotopts');
MPRINT(PLOTIT):   labelvar = symget('labelvar');
MPRINT(PLOTIT):   upopts = upcase(plotopts);
MPRINT(PLOTIT):   plotreq = trim(vplotvar) || ' * ' || trim(hplotvar) || ' $ ' || trim(labelvar) || ' = _symbol_';
MPRINT(PLOTIT):   *------check for HREF= VREF= options------;
MPRINT(PLOTIT):   if index(upopts,'HREF') or index(upopts,'VREF') then put 'WARNING: HREF= and VREF= PLOT options are ignored.  ' 'Specify ' 'them as ' 'macro options ' 'instead.';
MPRINT(PLOTIT):   *------see if we need to generate a placement list------;
MPRINT(PLOTIT):   pl = ' ';
MPRINT(PLOTIT):   i = index(upopts,'PLACE');
MPRINT(PLOTIT):   if i then do;
MPRINT(PLOTIT):   pl = substr(plotopts,i);
MPRINT(PLOTIT):   if i > 1 then plotopts = substr(plotopts,1,i - 1);
MPRINT(PLOTIT):   else plotopts = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle horizontal ticks if not already specified------;
MPRINT(PLOTIT):   c = 'h';
MPRINT(PLOTIT):   maxim = hmax;
MPRINT(PLOTIT):   minim = hmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------handle vertical ticks if not already specified------;
MPRINT(PLOTIT):   c = 'v';
MPRINT(PLOTIT):   maxim = vmax;
MPRINT(PLOTIT):   minim = vmin;
MPRINT(PLOTIT):   logscal = 0;
MPRINT(PLOTIT):   link maketick;
MPRINT(PLOTIT):   *------outward option------;
MPRINT(PLOTIT):   outward = symget('outward');
MPRINT(PLOTIT):   if outward ne 'none' then do;
MPRINT(PLOTIT):   if outward = ' ' and isavec then outward = symget('symdummy');
MPRINT(PLOTIT):   if outward ne ' ' then plotopts = trim(plotopts) || ' outward="' || compress(outward,"'"||'" ') || '"';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------box option------;
MPRINT(PLOTIT):   plotopts = trim(left(plotopts)) || ' box';
MPRINT(PLOTIT):   *------reference lines------;
MPRINT(PLOTIT):   list = symget('href');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' href=' || list;
MPRINT(PLOTIT):   list = symget('vref');
MPRINT(PLOTIT):   if list ne ' ' then plotopts = trim(plotopts) || ' vref=' || list;
MPRINT(PLOTIT):   *------set up vector heads------;
MPRINT(PLOTIT):   vechead = symget('vechead');
MPRINT(PLOTIT):   vecheadr = scan(vechead,1,' ');
MPRINT(PLOTIT):   vecheadw = scan(vechead,2,' ');
MPRINT(PLOTIT):   if vecheadw = ' ' then vecheadr = ' ';
MPRINT(PLOTIT):   *------determine graphics area------;
MPRINT(PLOTIT):   rc1 = ginit();
MPRINT(PLOTIT):   call gask('maxdisp',units,xmax,ymax,xpix,ypix,rc2);
MPRINT(PLOTIT):   call gask('device',device,rc3);
MPRINT(PLOTIT):   rc4 = gterm();
MPRINT(PLOTIT):   if rc1 or rc2 or rc3 or rc4 then do;
MPRINT(PLOTIT):   put 'ERROR: GASK call for XMAX= and YMAX= failed.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = xmax * 100;
MPRINT(PLOTIT):   ymax = ymax * 100;
MPRINT(PLOTIT):   if symget('unit') = 'in' then do;
MPRINT(PLOTIT):   xmax = xmax / 2.54;
MPRINT(PLOTIT):   ymax = ymax / 2.54;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   xmax = floor(xmax * 100) / 100;
MPRINT(PLOTIT):   ymax = floor(ymax * 100) / 100;
MPRINT(PLOTIT):   *------max horizontal graph size------;
MPRINT(PLOTIT):   if symget('xmax') = ' ' then call symput('xmax',compress(put(xmax,9.2)));
MPRINT(PLOTIT):   *-------max vertical graph size------;
MPRINT(PLOTIT):   if symget('ymax') = ' ' then call symput('ymax',compress(put(ymax,9.2)));
MPRINT(PLOTIT):   *------construct typical label------;
MPRINT(PLOTIT):   label = symget('label');
MPRINT(PLOTIT):   if label = 'typical' then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar,length(vplotvar),1);
MPRINT(PLOTIT):   ind2 = substr(hplotvar,length(hplotvar),1);
MPRINT(PLOTIT):   if not ('1' <= ind1 <= '9' and '1' <= ind2 <= '9') then label = ' ';
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   do i = length(vplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(vplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind1 = substr(vplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   do i = length(hplotvar) to 1 by -1;
MPRINT(PLOTIT):   x = substr(hplotvar,i,1);
MPRINT(PLOTIT):   if not ('1' <= x <= '9') then do;
MPRINT(PLOTIT):   ind2 = substr(hplotvar, i + 1);
MPRINT(PLOTIT):   i = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------for correspondence analysis, ------;
MPRINT(PLOTIT):   *------put inertia percentages in labels------;
MPRINT(PLOTIT):   if labelx = ' ' then do;
MPRINT(PLOTIT):   labely = "Dimension " || compress(ind1);
MPRINT(PLOTIT):   labelx = "Dimension " || compress(ind2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   label = 'label ' || symget('vplotvar') || " = '" || trim(labely) || "' " || symget('hplotvar') || " = '" || trim(labelx) || "'";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------simple, imperfect, label statement check------;
MPRINT(PLOTIT):   label = left(label);
MPRINT(PLOTIT):   if label ne ' ' and compress(label,"'"||'="') = label then do;
MPRINT(PLOTIT):   put 'ERROR: Invalid LABEL statement, LABEL=' label +(-1) '.';
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   str = upcase(scan(label,1));
MPRINT(PLOTIT):   if str ne 'LABEL' and str ne ' ' then label = 'label ' || label;
MPRINT(PLOTIT):   call symput('label' ,trim(label));
MPRINT(PLOTIT):   *------make sure we have britypes with BRIGHT= specified------;
MPRINT(PLOTIT):   if symget('bright') ne ' ' and symget('britypes') = ' ' then do;
MPRINT(PLOTIT):   put 'ERROR: Null BRITYPES= is not ' 'permitted ' 'with ' "BRIGHT=.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up search parameters------;
MPRINT(PLOTIT):   ls = symget('ls');
MPRINT(PLOTIT):   if index(ls,'search') then do;
MPRINT(PLOTIT):   ls = scan(ls,1,' ');
MPRINT(PLOTIT):   if ls = 'compute' then search = 'compute';
MPRINT(PLOTIT):   else search = 'ls';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if ls = ' ' or ls = 'compute' then ls = '.';
MPRINT(PLOTIT):   if pl = ' ' then place = symget('place');
MPRINT(PLOTIT):   else place = '.';
MPRINT(PLOTIT):   if index(place,'search') then do;
MPRINT(PLOTIT):   search = trim(search) || ' place';
MPRINT(PLOTIT):   place = scan(place,1,' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if place = ' ' then place = '.';
MPRINT(PLOTIT):   *------see if we should store device------;
MPRINT(PLOTIT):   list = upcase(symget('gopprint'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopplot'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts2'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   list = upcase(symget('gopts'));
MPRINT(PLOTIT):   if index(list,'DEVICE') then device = ' ';
MPRINT(PLOTIT):   *------output generated macro variables------;
MPRINT(PLOTIT):   call symput('search' ,trim(search));
MPRINT(PLOTIT):   call symput('ls' ,trim(ls));
MPRINT(PLOTIT):   call symput('place' ,trim(place));
MPRINT(PLOTIT):   call symput('plotopts',trim(plotopts));
MPRINT(PLOTIT):   call symput('plotreq' ,trim(plotreq));
MPRINT(PLOTIT):   call symput('pl' ,trim(pl));
MPRINT(PLOTIT):   call symput('vecheadr',trim(vecheadr));
MPRINT(PLOTIT):   call symput('vecheadw',trim(vecheadw));
MPRINT(PLOTIT):   call symput('device' ,trim(device));
MPRINT(PLOTIT):   *------check some parameters for valid values------;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadr;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VECHEAD';
MPRINT(PLOTIT):   str=vecheadw;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='INC';
MPRINT(PLOTIT):   str=tinc;
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VNOBS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max=1e35;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BIPLOT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-8;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='SYMLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 22;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='OFFSET';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 100;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='TICKLEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='ANTIIDEA';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -2;
MPRINT(PLOTIT):   max= 2;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CIRSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min=1e-4;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='CURSEGS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 20;
MPRINT(PLOTIT):   max= 500;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VTOH';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 3;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAKEFIT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -10;
MPRINT(PLOTIT):   max= 10;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VSIZE';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='XMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='YMAX';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='HPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='VPOS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0.1;
MPRINT(PLOTIT):   max= 1e5;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='PS';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 15;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXITER';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='MAXOKPEN';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 1e9;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='BRIGHT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 5;
MPRINT(PLOTIT):   max= 250;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDL';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDR';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDT';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='EXTENDB';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= -50;
MPRINT(PLOTIT):   max= 50;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LSINC';
MPRINT(PLOTIT):   str=symget(opt);
MPRINT(PLOTIT):   min= 1;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   link checkit;
MPRINT(PLOTIT):   opt='LS';
MPRINT(PLOTIT):   str=ls;
MPRINT(PLOTIT):   min= 64;
MPRINT(PLOTIT):   max= 200;
MPRINT(PLOTIT):   if ls ne '.' then link checkit;
MPRINT(PLOTIT):   opt='PLACE';
MPRINT(PLOTIT):   str=place;
MPRINT(PLOTIT):   min= 0;
MPRINT(PLOTIT):   max= 13;
MPRINT(PLOTIT):   if place ne '.' then link checkit;
MPRINT(PLOTIT):   list = compress(symget('tickaxes'));
MPRINT(PLOTIT):   call symput('tickaxes',trim(list));
MPRINT(PLOTIT):   if compress(list,'LRTBlrtbFh') ne ' ' then do;
MPRINT(PLOTIT):   put "ERROR: TICKAXES=LBFh is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('frame',put(indexc(list,'RTrtF') > 0,1.));
MPRINT(PLOTIT):   if not (symget('unit') in ('in' 'cm')) then do;
MPRINT(PLOTIT):   put "ERROR: UNIT=in is not valid.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if scan(symget('lsizes'),5,' ') = ' ' then do;
MPRINT(PLOTIT):   put "ERROR: LSIZES=1 1 1 1 1 must specify five sizes.";
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ or not ok then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   checkit: *------check parameter range------;
MPRINT(PLOTIT):   if str ne ' ' then do;
MPRINT(PLOTIT):   param = input(str,?? 32.);
MPRINT(PLOTIT):   if not (min <= param <= max) then do;
MPRINT(PLOTIT):   ok = 0;
MPRINT(PLOTIT):   put 'ERROR: ' opt +(-1) '=' str 'is not valid.  ' 'The valid range is ' min '<= ' opt '<= ' max +(-1) '.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   maketick: *------handle ticks if not already specified------;
MPRINT(PLOTIT):   minor = input(symget(c ||'minor'),?? 32.);
MPRINT(PLOTIT):   if index(upopts,upcase(c) || 'AXIS') = 0 then do;
MPRINT(PLOTIT):   if maxim > 0 then logmax = ceil(log10(maxim));
MPRINT(PLOTIT):   else logmax = .;
MPRINT(PLOTIT):   if minim > 0 then logmin = floor(log10(minim));
MPRINT(PLOTIT):   else logmin = .;
MPRINT(PLOTIT):   *------major ticks for log scale------;
MPRINT(PLOTIT):   if logscal and n(logmin) then do;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || ' ' || c || 'axis=';
MPRINT(PLOTIT):   do i = logmin to logmax;
MPRINT(PLOTIT):   plotopts = trim(plotopts) || '1e' || compress(put(i,4.)) || ',';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   plotopts = substr(plotopts,1,length(plotopts) - 1);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------ordinary major ticks------;
MPRINT(PLOTIT):   else plotopts = trim(plotopts) || ' ' || c || 'axis=by ' || tinc;
MPRINT(PLOTIT):   *------minor ticks------;
MPRINT(PLOTIT):   if minor >= 1 then do;
MPRINT(PLOTIT):   if n(logmax) then do;
MPRINT(PLOTIT):   if logscal then do;
MPRINT(PLOTIT):   maxim = logmax;
MPRINT(PLOTIT):   minim = logmin;
MPRINT(PLOTIT):   i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else i = inc;
MPRINT(PLOTIT):   maxim = ceil(2 + maxim / i) * i;
MPRINT(PLOTIT):   minim = floor(minim / i - 2) * i;
MPRINT(PLOTIT):   call symput(c || 'minor', compress(put(minim,best12.)) || ' to ' || compress(put(maxim,best12.)) || ' by ' || compress(put(i / (minor + 1),best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------number of minor ticks only allowed with inc is known------;
MPRINT(PLOTIT):   else if n(minor) then do;
MPRINT(PLOTIT):   put 'WARNING: Minor ticks are suppressed when HAXIS= ' 'or VAXIS= ' 'is specified ' 'on PLOTOPTS=.';
MPRINT(PLOTIT):   call symput(c||'minor',' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *========================preprocessing of data========================;
MPRINT(PLOTIT):   *------preprocess the input data set------;
MPRINT(PLOTIT):   data preproc;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length _symbol_ $ 1 __symbol $ 1 __lfont __lcolor __sfont __scolor __stype __color $ 12 __otype $ 16 __temp $ 60 __excols $ 64;
MPRINT(PLOTIT):   retain __nblank __bblank 0 __oldx __oldy . __color __excols ' ';
MPRINT(PLOTIT):   drop __nblank __bblank __dummy __mrkwrn __nconto __oldx __oldy __excols;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------set the variable labels------;
MPRINT(PLOTIT):   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
MPRINT(PLOTIT):   call label(Dim2, __temp);
MPRINT(PLOTIT):   call symput('labely',trim(__temp));
MPRINT(PLOTIT):   call label(Dim1, __temp);
MPRINT(PLOTIT):   call symput('labelx',trim(__temp));
MPRINT(PLOTIT):   drop __temp;
MPRINT(PLOTIT):   *------output x coordinates for the curve------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *------excluded colors------;
MPRINT(PLOTIT):   __excols = lowcase(symget('excolors'));
MPRINT(PLOTIT):   drop __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   retain __roupai __roured __rougre __roublu;
MPRINT(PLOTIT):   array __rou[5] __dummy __roured __rougre __roublu __roupai (-240 1 1 1 .);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set up observation type variable------;
MPRINT(PLOTIT):   _type_ = repeat(' ',7);
MPRINT(PLOTIT):   *------preprocess raw data------;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   *------store label/symbol colors, sizes, fonts, types------;
MPRINT(PLOTIT):   array a__ty[1] $ 15 _temporary_ ('CONFIG');
MPRINT(PLOTIT):   __li = 1;
MPRINT(PLOTIT):   drop __li __i;
MPRINT(PLOTIT):   do __i = 1 to 1;
MPRINT(PLOTIT):   _type_ = compress(_type_);
MPRINT(PLOTIT):   __otype = _type_;
MPRINT(PLOTIT):   if _type_ = a__ty[__i] then do;
MPRINT(PLOTIT):   __li = __i;
MPRINT(PLOTIT):   __i = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   array a__ls[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__ss[1] _temporary_ (1);
MPRINT(PLOTIT):   array a__lf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__lc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__sf[1] $ 12 _temporary_ ('none');
MPRINT(PLOTIT):   array a__sc[1] $ 12 _temporary_ ('cx000000');
MPRINT(PLOTIT):   array a__st[1] $ 12 _temporary_ ('circle');
MPRINT(PLOTIT):   array a__sy[1] $ 1 _temporary_ ('*');
MPRINT(PLOTIT):   __lsize = a__ls[__li];
MPRINT(PLOTIT):   __ssize = a__ss[__li];
MPRINT(PLOTIT):   __lfont = a__lf[__li];
MPRINT(PLOTIT):   __lcolor = a__lc[__li];
MPRINT(PLOTIT):   __sfont = a__sf[__li];
MPRINT(PLOTIT):   __scolor = a__sc[__li];
MPRINT(PLOTIT):   __stype = a__st[__li];
MPRINT(PLOTIT):   __symbol = a__sy[__li];
MPRINT(PLOTIT):   if upcase(__sfont) = 'MARKER' and upcase(__stype) = 'CONTOUR' then do;
MPRINT(PLOTIT):   __mrkwrn + 1;
MPRINT(PLOTIT):   __sfont = 'solid';
MPRINT(PLOTIT):   if __mrkwrn = 1 then put 'WARNING: The marker font is obsolete ' 'for contour ' 'plots.  The ' 'SOLID font ' 'will be ' 'used instead.';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------assign specialized symbols------;
MPRINT(PLOTIT):   if symget('symvar') = '_symbol_' then do;
MPRINT(PLOTIT):   _symbol_ = __symbol;
MPRINT(PLOTIT):   if __stype in ('vector' 'circle') and _symbol_ = ' ' then _symbol_ = "#";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   _symbol_ = _symbol_;
MPRINT(PLOTIT):   __symbol = _symbol_;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------blank out labels?------;
MPRINT(PLOTIT):   if __lsize = 0 or symget('labelvar') = '_blank_' then _idvar_ = ' ';
MPRINT(PLOTIT):   *------stretch vectors------;
MPRINT(PLOTIT):   *------computed colors------;
MPRINT(PLOTIT):   *-------count contour observations, determine directions------;
MPRINT(PLOTIT):   if __stype = 'contour' then do;
MPRINT(PLOTIT):   __nconto + 1;
MPRINT(PLOTIT):   if __nconto = 1 then do;
MPRINT(PLOTIT):   __oldx = Dim1;
MPRINT(PLOTIT):   __oldy = Dim2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if __nconto = 2 then do;
MPRINT(PLOTIT):   call symput('hcondir',compress(put(Dim1-__oldx,best8.)));
MPRINT(PLOTIT):   call symput('vcondir',compress(put(Dim2-__oldy,best8.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('ncontour',compress(put(__nconto,best12.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if __color eq ' ' or index(__excols, trim(lowcase(__color))) = 0;
MPRINT(PLOTIT):   *------adjustments to preprocessed data------;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   __xvar = Dim1;
MPRINT(PLOTIT):   __yvar = Dim2;
MPRINT(PLOTIT):   *------are labels all blank?------;
MPRINT(PLOTIT):   if not __nblank then do;
MPRINT(PLOTIT):   if _idvar_ ne ' ' then do;
MPRINT(PLOTIT):   __nblank = 1;
MPRINT(PLOTIT):   call symput('allblank','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------are there obs with both label and symbol blank?------;
MPRINT(PLOTIT):   if not __bblank then do;
MPRINT(PLOTIT):   if _idvar_ = ' ' and _symbol_ = ' ' then do;
MPRINT(PLOTIT):   __bblank = 1;
MPRINT(PLOTIT):   call symput('botblank','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   *------create regression data set for curve fitting------;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------separate out obs that will not go through PROC PLOT------;
MPRINT(PLOTIT):   data preproc extraobs;
MPRINT(PLOTIT):   retain __listit 0;
MPRINT(PLOTIT):   length __stype $ 12;
MPRINT(PLOTIT):   *------make sure PROC PLOT scales axes based on min, max------;
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   __stype = 'dummy';
MPRINT(PLOTIT):   output extraobs;
MPRINT(PLOTIT):   do Dim1 = -0.205470529714, 0.712715762283;
MPRINT(PLOTIT):   do Dim2 = -0.259257777973, 0.1844344499072;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   __stype = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set preproc;
MPRINT(PLOTIT):   if "gplot" = "plot" then output preproc;
MPRINT(PLOTIT):   else if _idvar_ = ' ' and __stype in ('vector') then output extraobs;
MPRINT(PLOTIT):   else if _idvar_ ne ' ' or not (0 or (0 and (_symbol_ = ' ' and _idvar_ = ' '))) then do;
MPRINT(PLOTIT):   if __listit = 0 then do;
MPRINT(PLOTIT):   call symput('looklist','1');
MPRINT(PLOTIT):   __listit = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   output preproc;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else output extraobs;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------find regression function------;
MPRINT(PLOTIT):   *------see if there is anything more than corners in preproc------;
MPRINT(PLOTIT):   *------initpen=0 when nothing to plot, otherwise missing ------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   if _n_ = 0 then set preproc nobs=__nobs;
MPRINT(PLOTIT):   call symput('initpen', scan('0 .', (__nobs > 4) + 1, ' '));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------set up iteration parameters------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=========================create printer plot=========================;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length pl $ 200 search $ 24;
MPRINT(PLOTIT):   iternum = 0 + 1;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = .;
MPRINT(PLOTIT):   search = symget('search');
MPRINT(PLOTIT):   ispl = index(search,'place');
MPRINT(PLOTIT):   isls = index(search,'ls');
MPRINT(PLOTIT):   isco = index(search,'compute');
MPRINT(PLOTIT):   *------adjust placement list, line size------;
MPRINT(PLOTIT):   if iternum > 1 then do;
MPRINT(PLOTIT):   if ispl then place = place + 1;
MPRINT(PLOTIT):   if isls then ls = ls + 15;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if isco then ls = round(36 + 29 * iternum - 20 * log(iternum),5);
MPRINT(PLOTIT):   isls = (isls or isco);
MPRINT(PLOTIT):   *------last iteration if we cannot increment------;
MPRINT(PLOTIT):   *------the parameters any more. ------;
MPRINT(PLOTIT):   if (isls and ispl and ls >= 200 and place >= 13) or (isls and not ispl and ls >= 200) or (ispl and not isls and place >= 13) or (not ispl and not isls and not isco) then maxiter = iternum;
MPRINT(PLOTIT):   else maxiter = 15;
MPRINT(PLOTIT):   if ls > 200 then ls = 200;
MPRINT(PLOTIT):   if ls < 64 then ls = 64;
MPRINT(PLOTIT):   actualps = input(symget('ps'),?? 32.);
MPRINT(PLOTIT):   if n(actualps) = 0 then do;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then do;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if nmiss(hsize) then hsize = 8.33;
MPRINT(PLOTIT):   if nmiss(vsize) then vsize = 6.24;
MPRINT(PLOTIT):   actualps = round(ls * (vsize / (hsize * 2)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else actualps = round(10 + ls / vtoh,5);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if actualps > 200 then actualps = 200;
MPRINT(PLOTIT):   *------construct placement list------;
MPRINT(PLOTIT):   if n(place) then do;
MPRINT(PLOTIT):   if place > 13 then place = 13;
MPRINT(PLOTIT):   if place = 0 then pl = '(s=center)';
MPRINT(PLOTIT):   else pl = '(h=2 -2 : s=right left)';
MPRINT(PLOTIT):   if place = 1 then pl = trim(pl) || ' (v=1 * h=0 -1 to -2 by alt)';
MPRINT(PLOTIT):   else if place = 2 then pl = trim(pl) || ' (v=1 -1 * h=0 -1 to -5 by alt)';
MPRINT(PLOTIT):   else if place > 2 then pl = trim(pl) || ' (v=1 to 2 by alt * h=0 -1 to -10 by alt)';
MPRINT(PLOTIT):   if place > 3 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' (s=center right left * v=0 1 to ' || compress(put(place - 2,5.)) || ' by alt * h=0 -1 to ' || compress(put(-3 * (place - 2),5.)) || ' by alt * l= 1 to ' || compress(put(2 + (place - 3.5) / 3,5.)) || ')';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   pl = 'placement=(' || trim(pl) || ')';
MPRINT(PLOTIT):   if place > 4 then do;
MPRINT(PLOTIT):   pl = trim(pl) || ' penalty(7)=' || compress(put(1.5 * place,5.));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('maxiter' ,compress(put(maxiter,5.)));
MPRINT(PLOTIT):   call symput('iternum' ,compress(put(iternum,5.)));
MPRINT(PLOTIT):   call symput('place' ,compress(put(place,5.)));
MPRINT(PLOTIT):   call symput('ls' ,compress(put(ls,5.)));
MPRINT(PLOTIT):   call symput('actualps',compress(put(actualps,5.)));
MPRINT(PLOTIT):   if pl ne ' ' then call symput('pl',trim(pl));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------initialize data sets because they might not be created------;
MPRINT(PLOTIT):   data tempdat3;
MPRINT(PLOTIT):   value = .;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat4;
MPRINT(PLOTIT):   retain label symbol startposition ' ' vaxis haxis penalty lines vshift hshift length n vposition hposition 0;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options nonumber ls=65 ps=45;
Sistema SAS

MPRINT(PLOTIT):   ods exclude all;
MPRINT(PLOTIT):   proc plot nolegend formchar='|----|+|---' 
data=preproc vtoh=2;
MPRINT(PLOTIT):   ods output LocateFacts(nowarn)=tempdat3 
Locate(nowarn)=tempdat4 Plot=tempdat5;
MPRINT(PLOTIT):   plot Dim2 * Dim1 $ _idvar_ = _symbol_ / 
haxis=by 0.2 vaxis=by 0.2 box placement=((h=2 -2 : s=right left) 
(v=1 -1 * h=0 -1 to -5 by alt)) list=-1;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   label Dim2 = '#' Dim1 = '#';
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   ods exclude none;
MPRINT(PLOTIT):   ods output close;
MPRINT(PLOTIT):   options NONUMBER ls=256 ps=10000;
MPRINT(PLOTIT):   *------look at the total penalty------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   done = '0';
MPRINT(PLOTIT):   set tempdat3(obs=1 rename=(value=penalty));
MPRINT(PLOTIT):   if n(penalty) & penalty <= 0 then done = '1';
MPRINT(PLOTIT):   iternum = 1;
MPRINT(PLOTIT):   *------print iteration history line------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   place = 2;
MPRINT(PLOTIT):   ls = 65;
MPRINT(PLOTIT):   actualps = 45;
MPRINT(PLOTIT):   m = floor((256 - 55) / 2);
MPRINT(PLOTIT):   if iternum = 1 then do;
MPRINT(PLOTIT):   put / +m +5 'Iterative Scatter Plot of Labeled Points Macro' /;
MPRINT(PLOTIT):   put +m 'Iteration' +4 'Place' +4 'Line Size' +4 'Page Size' +4 'Penalty';
MPRINT(PLOTIT):   put +m '-------------------------------------------------------';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   m = m - 4;
MPRINT(PLOTIT):   put +m iternum 9. place 11. ls 11. actualps 13. penalty 13.;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iternum >= 15 then done = '1';
MPRINT(PLOTIT):   call symput('done',compress(done));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   run;

                                                                                                         Iterative Scatter Plot of Labeled Points Macro

                                                                                                    Iteration    Place    Line Size    Page Size    Penalty
                                                                                                    -------------------------------------------------------
                                                                                                        1          2         65           45            0
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *======================post-process plot, step 1======================;
MPRINT(PLOTIT):   *------put titles, footnotes in plot------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat6;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   proc sql;
MPRINT(PLOTIT):   create view tempdat6 as select * from dictionary.titles;
MPRINT(PLOTIT):   quit;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   set tempdat6 end=eof;
MPRINT(PLOTIT):   if type = 'T' then ntitles + 1;
MPRINT(PLOTIT):   if eof then call symput('ntitles', trim(put(ntitles, 2. -L)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   data tempdat5(keep=batch);
MPRINT(PLOTIT):   length batch $ 256;
MPRINT(PLOTIT):   if 0 then set tempdat5;
MPRINT(PLOTIT):   set tempdat6(where=(type='T') rename=(text=batch)) tempdat5 tempdat6(where=(type='F') rename=(text=batch));
MPRINT(PLOTIT):   if type = 'F' or type = 'T' then do;
MPRINT(PLOTIT):   i = round((65 - length(batch)) / 2);
MPRINT(PLOTIT):   if i > 1 then do;
MPRINT(PLOTIT):   substr(batch, i) = batch;
MPRINT(PLOTIT):   substr(batch, 1, i - 1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if not (batch = ' ' and lag(batch) = ' ') then output;
MPRINT(PLOTIT):   if type = 'T' and number = 1 then do;
MPRINT(PLOTIT):   batch = ' ';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------start storing locations of lines------;
MPRINT(PLOTIT):   data anno(keep=tx ty comment);
MPRINT(PLOTIT):   length c $ 1 line title $ 256 comment $ 80;
MPRINT(PLOTIT):   retain coln top bottom afterbot nlines xlabline 0 topn botn topextra botextra past 0 vtick1 vtick2 htick1 htick2 . counttop 1 right left col1 labcolum 65 title ' ';
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if xlabline and _n_ > xlabline and not past then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > xlabline + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------initialize------;
MPRINT(PLOTIT):   length = length(line);
MPRINT(PLOTIT):   if line = ' ' then length = 0;
MPRINT(PLOTIT):   comment = 'frame, tick';
MPRINT(PLOTIT):   *------store first title line------;
MPRINT(PLOTIT):   if title = ' ' then title = line;
MPRINT(PLOTIT):   *------find frame location------;
MPRINT(PLOTIT):   if left(line) =: '-' and index(line,'-+-') and substr(line,length,1) = '-' then do;
MPRINT(PLOTIT):   bottom = _n_;
MPRINT(PLOTIT):   if top = 0 then do;
MPRINT(PLOTIT):   top = _n_;
MPRINT(PLOTIT):   left = index(line,'-');
MPRINT(PLOTIT):   right = length;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------flag lines after the bottom line of the plot------;
MPRINT(PLOTIT):   c = substr(line,left,1);
MPRINT(PLOTIT):   if _n_ > top and afterbot = 0 and c = '-' and substr(line,right,1) = '-' then afterbot = 1;
MPRINT(PLOTIT):   else if afterbot then afterbot = afterbot + 1;
MPRINT(PLOTIT):   *------can we drop extra top of the plot lines?------;
MPRINT(PLOTIT):   if top and _n_ > top and not afterbot then do;
MPRINT(PLOTIT):   botn = botn + 1;
MPRINT(PLOTIT):   if c = '+' then do;
MPRINT(PLOTIT):   counttop = 0;
MPRINT(PLOTIT):   botextra = 0;
MPRINT(PLOTIT):   botn = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if counttop then topn = topn + 1;
MPRINT(PLOTIT):   if compress(line,'| ') = ' ' then do;
MPRINT(PLOTIT):   if abs(_n_ - top - 1 - topextra) < 1e-8 then topextra = topextra + 1;
MPRINT(PLOTIT):   botextra = botextra + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output horizontal axis tick mark coordinates------;
MPRINT(PLOTIT):   if afterbot = 1 then do;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   do i = left to right;
MPRINT(PLOTIT):   if substr(line,i,1) = '+' then do;
MPRINT(PLOTIT):   tx = i;
MPRINT(PLOTIT):   if nmiss(htick1) then htick1 = tx;
MPRINT(PLOTIT):   else if nmiss(htick2) then htick2 = tx;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------find last line in plot region------;
MPRINT(PLOTIT):   if afterbot > 2 and not past then do;
MPRINT(PLOTIT):   past = (index(line,"*** Wrapped Listing of Point Locations ***") or index(line,title));
MPRINT(PLOTIT):   if length and not past then do;
MPRINT(PLOTIT):   nlines = _n_;
MPRINT(PLOTIT):   *------find x-axis label line------;
MPRINT(PLOTIT):   if compress(line) = '#' then do;
MPRINT(PLOTIT):   xlabline = _n_;
MPRINT(PLOTIT):   *------check for vertically printing ticks------;
MPRINT(PLOTIT):   if not (afterbot = 3 or afterbot = 4) then do;
MPRINT(PLOTIT):   put 'WARNING: Ticks may be printing vertically.  ' 'The plot may be wrong.';
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   call symput('intrls' ,'1');
MPRINT(PLOTIT):   call symput('intrtick','0');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------first, last nonblank column, label column------;
MPRINT(PLOTIT):   if nlines = 0 and length then do;
MPRINT(PLOTIT):   coln = max(coln,length);
MPRINT(PLOTIT):   i = length + 1 - length(left(line));
MPRINT(PLOTIT):   col1 = min(col1,i);
MPRINT(PLOTIT):   if top then labcolum = min(labcolum,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output vertical axis tick mark coordinates------;
MPRINT(PLOTIT):   if top and substr(line,left,1) = '+' then do;
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = _n_;
MPRINT(PLOTIT):   if nmiss(vtick1) then vtick1 = ty;
MPRINT(PLOTIT):   else if nmiss(vtick2) then vtick2 = ty;
MPRINT(PLOTIT):   output anno;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------on last observation, output results to macro variables------;
MPRINT(PLOTIT):   if past or eof then do;
MPRINT(PLOTIT):   *------check VTOH=------;
MPRINT(PLOTIT):   vtoh = input(symget('vtoh'),?? 32.);
MPRINT(PLOTIT):   if nmiss(vtoh) then vtoh = 2;
MPRINT(PLOTIT):   else if n(htick1,htick2,vtick1,vtick2) = 4 then do;
MPRINT(PLOTIT):   vtoh = vtick2 - vtick1;
MPRINT(PLOTIT):   if vtoh > 1e-8 then vtoh = (htick2 - htick1) / vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put vtoh= vtick2= vtick1= htick2= htick1=;
MPRINT(PLOTIT):   call symput('vtoh',compress(put(vtoh,best15.)));
MPRINT(PLOTIT):   *------size of plot parameters------;
MPRINT(PLOTIT):   ls = coln - col1 + 1;
MPRINT(PLOTIT):   left = left - col1 + 1;
MPRINT(PLOTIT):   right = right - col1 + 1;
MPRINT(PLOTIT):   labcolum = labcolum - col1 + 1;
MPRINT(PLOTIT):   hpos = ls + 0.5 * (1.0 + abs(1.5));
MPRINT(PLOTIT):   vpos = nlines + 1;
MPRINT(PLOTIT):   uhpos = input(symget('hpos'),?? 32.);
MPRINT(PLOTIT):   if n(uhpos) then do;
MPRINT(PLOTIT):   if uhpos < hpos then do;
MPRINT(PLOTIT):   put "ERROR: HPOS= is too small.  " 'The default ' 'minimum for ' 'this plot is ' hpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else hpos = uhpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   uvpos = input(symget('vpos'),?? 32.);
MPRINT(PLOTIT):   if n(uvpos) then do;
MPRINT(PLOTIT):   if uvpos < vpos then do;
MPRINT(PLOTIT):   put "ERROR: VPOS= is too small.  " 'The electronics' 'minimum for ' 'this plot is ' vpos +(-1) '.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else vpos = uvpos;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   hpos = ceil(hpos);
MPRINT(PLOTIT):   vpos = ceil(vpos);
MPRINT(PLOTIT):   *------scale plot to use MAKEFIT= proportion of area------;
MPRINT(PLOTIT):   makefit1 = input(symget('makefit'),?? 32.);
MPRINT(PLOTIT):   makefit = makefit1;
MPRINT(PLOTIT):   *------makefit value can be changed inside this loop------;
MPRINT(PLOTIT):   do until(itfits);
MPRINT(PLOTIT):   itfits = 1;
MPRINT(PLOTIT):   *------determine hsize and vsize------;
MPRINT(PLOTIT):   hsize = input(symget('hsize'),?? 32.);
MPRINT(PLOTIT):   vsize = input(symget('vsize'),?? 32.);
MPRINT(PLOTIT):   if n(vsize) and nmiss(hsize) then hsize = hpos * vsize / (vpos * vtoh);
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   if n(hsize) = 0 then hsize = 8.33;
MPRINT(PLOTIT):   if n(vsize) = 0 then vsize = (vpos / hpos) * hsize * vtoh;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *-------scale sizes so plot fits in specified area------;
MPRINT(PLOTIT):   if n(makefit) then do;
MPRINT(PLOTIT):   scale = max(hsize / (abs(makefit) * (8.33)), vsize / (abs(makefit) * (6.24)));
MPRINT(PLOTIT):   if scale > 1.0 then do;
MPRINT(PLOTIT):   hsize = hsize / scale;
MPRINT(PLOTIT):   vsize = vsize / scale;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------add extra positions to center plot, extend axes------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'),?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'),?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'),?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'),?? 32.);
MPRINT(PLOTIT):   setlr = (nmiss(extendl,extendr) = 2 and not 0);
MPRINT(PLOTIT):   settb = (nmiss(extendt,extendb) = 2 and not 0);
MPRINT(PLOTIT):   *------centering, compute horizontal, vertical offsets------;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   hposoff = max(0.5 * ((8.33) - hsize) / (hsize / hpos), 0);
MPRINT(PLOTIT):   vposoff = max(0.5 * ((6.24) - vsize) / (vsize / vpos), 0);
MPRINT(PLOTIT):   hsize = 8.33;
MPRINT(PLOTIT):   vsize = 6.24;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   vposoff = 0;
MPRINT(PLOTIT):   hposoff = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------can we extend the left and right axes a little?------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   extendl = max(min(hposoff - 2.5, 2), 0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------even the top and bottom extra positions------;
MPRINT(PLOTIT):   if settb and topn > botn then do;
MPRINT(PLOTIT):   i = topn - botn;
MPRINT(PLOTIT):   if i <= topextra then extendt = -i;
MPRINT(PLOTIT):   else extendb = i;
MPRINT(PLOTIT):   i = -0.5 * sum(extendb,extendt);
MPRINT(PLOTIT):   if i > 0 then do;
MPRINT(PLOTIT):   extendb = sum(extendb,i);
MPRINT(PLOTIT):   extendt = sum(extendt,i);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set the extend variables if not set yet------;
MPRINT(PLOTIT):   if nmiss(extendt) then extendt = 0;
MPRINT(PLOTIT):   if nmiss(extendl) then extendl = 0;
MPRINT(PLOTIT):   if nmiss(extendr) then extendr = 0;
MPRINT(PLOTIT):   if nmiss(extendb) then extendb = 0;
MPRINT(PLOTIT):   *------make the plot square------;
MPRINT(PLOTIT):   if 0 and not 0 then do;
MPRINT(PLOTIT):   *------first try to adjust the left and right------;
MPRINT(PLOTIT):   if setlr then do;
MPRINT(PLOTIT):   setlr = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / 2;
MPRINT(PLOTIT):   extendl = extendl - setlr;
MPRINT(PLOTIT):   extendl = max(min(extendl,hposoff - 2.5),0);
MPRINT(PLOTIT):   extendr = extendl;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------next try to adjust the top and bottom------;
MPRINT(PLOTIT):   if settb then do;
MPRINT(PLOTIT):   settb = ((right - left + extendr + extendl) - (vtoh * (bottom - top + extendt + extendb))) / (-2 * vtoh);
MPRINT(PLOTIT):   extendt = extendt - settb;
MPRINT(PLOTIT):   extendb = extendb - settb;
MPRINT(PLOTIT):   if -extendt > topextra then extendt = -topextra;
MPRINT(PLOTIT):   if -extendb > botextra then extendb = -botextra;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------check to see if we succeeded, should be zero------;
MPRINT(PLOTIT):   setlr = (right - left + extendr + extendl) - vtoh * (bottom - top + extendt + extendb);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if the plot fits, otherwise try again------;
MPRINT(PLOTIT):   if n(makefit) and makefit < 0 and not 0 and ((0 and abs(setlr) > (1e-8 * hpos)) or (1 and (((extendl + extendr) > (2 * hposoff - 2.5)) or ((extendt + extendb) > (2 * vposoff - 0.25))))) and makefit <= 0.75 * makefit1 then do;
MPRINT(PLOTIT):   makefit = makefit * 0.99;
MPRINT(PLOTIT):   itfits = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------warn if we changed MAKEFIT= to make the plot square------;
MPRINT(PLOTIT):   if n(makefit) and abs(makefit - makefit1) > 1e-8 then put 'WARNING: MAKEFIT=' makefit 'was used ' 'to make ' 'the plot ' 'fit.';
MPRINT(PLOTIT):   * put extendt= extendb= extendl= extendr= vtoh= hposoff= vposoff=;
MPRINT(PLOTIT):   *------override electronics positions------;
MPRINT(PLOTIT):   if n(uhpos) then hposoff = 0;
MPRINT(PLOTIT):   else hpos = ceil(hpos + 2.0 * hposoff);
MPRINT(PLOTIT):   if n(uvpos) then vposoff = 0;
MPRINT(PLOTIT):   else vpos = ceil(vpos + 2.0 * vposoff);
MPRINT(PLOTIT):   *------output plot size parameters------;
MPRINT(PLOTIT):   call symput('col1', compress(put(col1,5.0)));
MPRINT(PLOTIT):   call symput('actualls', compress(put(ls,5.0)));
MPRINT(PLOTIT):   call symput('nlines', compress(put(nlines,5.0)));
MPRINT(PLOTIT):   call symput('top', compress(put(top,5.0)));
MPRINT(PLOTIT):   call symput('bottom', compress(put(bottom,5.0)));
MPRINT(PLOTIT):   call symput('left', compress(put(left,5.0)));
MPRINT(PLOTIT):   call symput('right', compress(put(right,5.0)));
MPRINT(PLOTIT):   call symput('labcolum', compress(put(labcolum,5.0)));
MPRINT(PLOTIT):   call symput('xlabline', compress(put(xlabline,5.0)));
MPRINT(PLOTIT):   call symput('hposoff', compress(put(hposoff,7.1)));
MPRINT(PLOTIT):   call symput('vposoff', compress(put(vposoff,7.1)));
MPRINT(PLOTIT):   call symput('hpos', compress(put(hpos,9.0)));
MPRINT(PLOTIT):   call symput('vpos', compress(put(vpos,9.0)));
MPRINT(PLOTIT):   call symput('hsize', compress(put(hsize,9.2)));
MPRINT(PLOTIT):   call symput('vsize', compress(put(vsize,9.2)));
MPRINT(PLOTIT):   call symput('extendl', compress(put(extendl,9.2)));
MPRINT(PLOTIT):   call symput('extendr', compress(put(extendr,9.2)));
MPRINT(PLOTIT):   call symput('extendt', compress(put(extendt,9.2)));
MPRINT(PLOTIT):   call symput('extendb', compress(put(extendb,9.2)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=======================post-process plot, step 2======================;
MPRINT(PLOTIT):   data tempdat1(keep=function x y text angle position comment color size style n __xvar __yvar __otype) tempdat2(keep=tx ty comment _radius_ color size style n __xvar __yvar);
MPRINT(PLOTIT):   length text line label $ 256 function color style $ 8 position symbol $ 1 comment $ 80;
MPRINT(PLOTIT):   retain style ' ';
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   color = ' ';
MPRINT(PLOTIT):   size = .;
MPRINT(PLOTIT):   *------read the plot------;
MPRINT(PLOTIT):   if _n_ <= 23 then do;
MPRINT(PLOTIT):   comment = 'text';
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   *------skip leading blank lines------;
MPRINT(PLOTIT):   if _n_ = 1 then do while(line = ' ');
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------skip note lines and subsequent blanks lines------;
MPRINT(PLOTIT):   if _n_ > 23 then do;
MPRINT(PLOTIT):   if line =: 'NOTE:' then line = ' ';
MPRINT(PLOTIT):   if _n_ > 23 + 1 then do;
MPRINT(PLOTIT):   do while((line =: 'NOTE:' or line = ' ') and not eof);
MPRINT(PLOTIT):   link getline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   line = substr(line, 2, 62);
MPRINT(PLOTIT):   *------is this an axis line?------;
MPRINT(PLOTIT):   istop = (_n_ = 3);
MPRINT(PLOTIT):   isbot = (_n_ = 20);
MPRINT(PLOTIT):   *------set the y-axis label------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 20 and substr(line,1,1) = '#' then substr(line,1,1) = ' ';
MPRINT(PLOTIT):   if _n_ = 23 then do;
MPRINT(PLOTIT):   y = ((2 * 23) - 3 - 20) / 2;
MPRINT(PLOTIT):   x = 1;
MPRINT(PLOTIT):   text = symget('labely');
MPRINT(PLOTIT):   if 1.7 > 1 then x = x - 0.5;
MPRINT(PLOTIT):   if length(text) > 1 then angle = 90;
MPRINT(PLOTIT):   comment = 'text, y label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   angle = 0;
MPRINT(PLOTIT):   *------remove stuff in the plot------;
MPRINT(PLOTIT):   if 3 <= _n_ <= 20 then substr(line,8,62 - 8 + 1) = ' ';
MPRINT(PLOTIT):   *------output ticks, titles, and so on------;
MPRINT(PLOTIT):   y = 23 - _n_;
MPRINT(PLOTIT):   do iwhile = 1 to 65 while(line ne ' ');
MPRINT(PLOTIT):   i = length(line) - length(left(line)) + 1;
MPRINT(PLOTIT):   text = substr(line,i,1);
MPRINT(PLOTIT):   *------isolate and process one label------;
MPRINT(PLOTIT):   if text ne ' ' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   x = i;
MPRINT(PLOTIT):   *------special handling of title lines, xaxis label------;
MPRINT(PLOTIT):   if _n_ < 3 or _n_ >= 23 then do;
MPRINT(PLOTIT):   text = left(line);
MPRINT(PLOTIT):   i = 62 + 1;
MPRINT(PLOTIT):   line = ' ';
MPRINT(PLOTIT):   x = (8 + 62) / 2.0;
MPRINT(PLOTIT):   *------special handling of title lines------;
MPRINT(PLOTIT):   if _n_ < 3 then do;
MPRINT(PLOTIT):   comment = 'text, title';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------footnotes------;
MPRINT(PLOTIT):   else if _n_ > 23 then do;
MPRINT(PLOTIT):   comment = 'text, footnote';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle x-axis label------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   text = symget('labelx');
MPRINT(PLOTIT):   comment = 'text, x label';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle label outside the plot, not title------;
MPRINT(PLOTIT):   else if i < 8 or _n_ > 20 then do;
MPRINT(PLOTIT):   do j = i + 1 to 62 until(done);
MPRINT(PLOTIT):   done = substr(line,j,1) = ' ';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   text = substr(line,i,j - i + 1);
MPRINT(PLOTIT):   substr(line,i,j - i + 1) = ' ';
MPRINT(PLOTIT):   *------handle ticks------;
MPRINT(PLOTIT):   position = '<';
MPRINT(PLOTIT):   x = i + length(text) - 1;
MPRINT(PLOTIT):   if j < 8 then comment = 'text, y tick';
MPRINT(PLOTIT):   else if _n_ < 23 then do;
MPRINT(PLOTIT):   comment = 'text, x tick';
MPRINT(PLOTIT):   *------tweak the placement a tad with new options------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else comment = 'text, other';
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   * put i= text= position=;
MPRINT(PLOTIT):   *------output label------;
MPRINT(PLOTIT):   if text ne ' ' then output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if iwhile >= 65 and symget('abort') ne '1' then do;
MPRINT(PLOTIT):   put 'ERROR: The frame location algorithm is confused.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   *------bring in the extra observations------;
MPRINT(PLOTIT):   eofextra = 0;
MPRINT(PLOTIT):   p = '+';
MPRINT(PLOTIT):   tx = .;
MPRINT(PLOTIT):   ty = .;
MPRINT(PLOTIT):   vshift = .;
MPRINT(PLOTIT):   hshift = .;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   lines = 0;
MPRINT(PLOTIT):   do while(not eofextra);
MPRINT(PLOTIT):   set extraobs(keep=__: _radius_) end=eofextra;
MPRINT(PLOTIT):   comment = 'extra,';
MPRINT(PLOTIT):   if n(__xvar,__yvar) = 2 then link process;
MPRINT(PLOTIT):   n = n + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------determine point count------;
MPRINT(PLOTIT):   set tempdat3(firstobs=2 rename=(value=npoints));
MPRINT(PLOTIT):   if nmiss(npoints) then do;
MPRINT(PLOTIT):   npoints = 0;
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   sumh = 0;
MPRINT(PLOTIT):   sumv = 0;
MPRINT(PLOTIT):   sumx = 0;
MPRINT(PLOTIT):   sumy = 0;
MPRINT(PLOTIT):   sumx2 = 0;
MPRINT(PLOTIT):   sumy2 = 0;
MPRINT(PLOTIT):   sumxh = 0;
MPRINT(PLOTIT):   sumyv = 0;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   midh = 62 / 2;
MPRINT(PLOTIT):   midv = 45 / 2;
MPRINT(PLOTIT):   midx = (0.712715762283 + -0.205470529714) / 2;
MPRINT(PLOTIT):   midy = (0.1844344499072 + -0.259257777973) / 2;
MPRINT(PLOTIT):   *------read the labels------;
MPRINT(PLOTIT):   do pointn = 1 to npoints;
MPRINT(PLOTIT):   link getlabel;
MPRINT(PLOTIT):   ty = vpositio;
MPRINT(PLOTIT):   tx = hpositio;
MPRINT(PLOTIT):   comment = 'list,';
MPRINT(PLOTIT):   if _error_ = 1 then put _all_;
MPRINT(PLOTIT):   if startpos = 'Center' then p = '+';
MPRINT(PLOTIT):   else if startpos = 'Left' then p = '<';
MPRINT(PLOTIT):   else p = '>';
MPRINT(PLOTIT):   text = symbol;
MPRINT(PLOTIT):   i = n;
MPRINT(PLOTIT):   set preproc(keep=__: _radius_) point=i;
MPRINT(PLOTIT):   link process;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------least-squares slope and intercept------;
MPRINT(PLOTIT):   b = .;
MPRINT(PLOTIT):   a = .;
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = sumx - nobs * midx;
MPRINT(PLOTIT):   b = nobs * sumx2 - d * d;
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumxh - d * (sumh - nobs * midh)) / b;
MPRINT(PLOTIT):   a = sumh / nobs - b * sumx / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if nobs > 0 then do;
MPRINT(PLOTIT):   d = (sumy - nobs * midy);
MPRINT(PLOTIT):   b = (nobs * sumy2 - d * d);
MPRINT(PLOTIT):   if abs(b) < 1e-8 then b = 0;
MPRINT(PLOTIT):   else b = (nobs * sumyv - d * (sumv - nobs * midv)) / b;
MPRINT(PLOTIT):   a = sumv / nobs - b * sumy / nobs;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   process: *------handle a point in the plot------;
MPRINT(PLOTIT):   type = __stype;
MPRINT(PLOTIT):   if n(tx) then do;
MPRINT(PLOTIT):   tx = tx + 8 + 1;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(ty) then do;
MPRINT(PLOTIT):   ty = ty + 1 + 23 - 20;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   colorset = 0;
MPRINT(PLOTIT):   *------random colors------;
MPRINT(PLOTIT):   *------store full label------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   line = label;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   line = compress('('||type||',') || ' ' || compress(put(n,5.)||')');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set colors, sizes, and so on for symbols------;
MPRINT(PLOTIT):   if not colorset then color = __scolor;
MPRINT(PLOTIT):   size = __ssize;
MPRINT(PLOTIT):   style = __sfont;
MPRINT(PLOTIT):   if text = 'NONE' then text = ' ';
MPRINT(PLOTIT):   if __symbol ne '00'x then text = __symbol;
MPRINT(PLOTIT):   if type = 'contour' then function = 'BAR';
MPRINT(PLOTIT):   else if type = 'square' then function = 'SYMBOL';
MPRINT(PLOTIT):   else function = 'LABEL';
MPRINT(PLOTIT):   *------output list info to lines data set------;
MPRINT(PLOTIT):   if type =: 'vector' or type =: 'circle' then do;
MPRINT(PLOTIT):   comment = trim(comment) || ' ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------output list info to text data set------;
MPRINT(PLOTIT):   if (text ne ' ' and type ne 'dummy') or type = 'contour' or type = 'function' then do;
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------intermediate results for slope, intercept------;
MPRINT(PLOTIT):   if n(tx,ty,__xvar,__yvar) = 4 then do;
MPRINT(PLOTIT):   sumh = sumh + tx;
MPRINT(PLOTIT):   sumv = sumv + ty;
MPRINT(PLOTIT):   sumx = sumx + __xvar;
MPRINT(PLOTIT):   sumy = sumy + __yvar;
MPRINT(PLOTIT):   d = __xvar - midx;
MPRINT(PLOTIT):   sumx2 = sumx2 + d * d;
MPRINT(PLOTIT):   sumxh = sumxh + (tx - midh) * d;
MPRINT(PLOTIT):   d = __yvar - midy;
MPRINT(PLOTIT):   sumy2 = sumy2 + d * d;
MPRINT(PLOTIT):   sumyv = sumyv + (ty - midv) * d;
MPRINT(PLOTIT):   nobs = nobs + 1;
MPRINT(PLOTIT):   * put sumh= tx= sumv= ty= sumx= __xvar= sumy= __yvar= midx= sumx2= sumxh= midy= sumy2= sumyv= nobs=;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------handle the label fragments------;
MPRINT(PLOTIT):   if lines then do;
MPRINT(PLOTIT):   if not colorset then color = __lcolor;
MPRINT(PLOTIT):   size = __lsize;
MPRINT(PLOTIT):   style = __lfont;
MPRINT(PLOTIT):   function = 'LABEL';
MPRINT(PLOTIT):   position = p;
MPRINT(PLOTIT):   comment = trim(scan(comment,1,' ')) || ' text, label, ' || trim(type) || ', ' || line;
MPRINT(PLOTIT):   shift = floor(1e-8 + (lines - 1) / 2);
MPRINT(PLOTIT):   do i = 1 to lines;
MPRINT(PLOTIT):   if lines > 1 then link getlabel;
MPRINT(PLOTIT):   text = label;
MPRINT(PLOTIT):   if text ne ' ' and type ne 'dummy' then do;
MPRINT(PLOTIT):   x = tx + hshift;
MPRINT(PLOTIT):   y = 1 + ty + vshift + shift - i;
MPRINT(PLOTIT):   output tempdat1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getline: set tempdat5(keep=batch rename=(batch=line)) end=eof;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   getlabel: set tempdat4(keep=lines symbol n label vshift hshift vposition hposition startposition rename=(startposition=startpos vposition=vpositio hposition=hpositio));
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete extraobs;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------tick mark based slope and intercept------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   merge anno(where=(index(substr(comment,1,12),'tick')) keep=ty tx comment) tempdat1(where=(index(comment,'tick')) keep=text comment);
MPRINT(PLOTIT):   if n(ty) then ty = 23 - ty;
MPRINT(PLOTIT):   data = input(text,?? 32.);
MPRINT(PLOTIT):   if (0 and n(tx)) or (0 and n(ty)) then do;
MPRINT(PLOTIT):   if data > 0 then data = log10(data);
MPRINT(PLOTIT):   else data = .;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   oldty = lag(ty);
MPRINT(PLOTIT):   oldtx = lag(tx);
MPRINT(PLOTIT):   olddata = lag(data);
MPRINT(PLOTIT):   if n(data,olddata) = 2 then do;
MPRINT(PLOTIT):   den = data - olddata;
MPRINT(PLOTIT):   if abs(den) > 1e-8 then do;
MPRINT(PLOTIT):   if n(oldty,ty) = 2 then do;
MPRINT(PLOTIT):   b = (ty - oldty) / den;
MPRINT(PLOTIT):   a = ty - b * data;
MPRINT(PLOTIT):   call symput('vslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('vinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(oldtx,tx) = 2 then do;
MPRINT(PLOTIT):   b = (tx - oldtx) / den;
MPRINT(PLOTIT):   a = tx - b * data - 2 + 1;
MPRINT(PLOTIT):   call symput('hslope',compress(put(b,best15.)));
MPRINT(PLOTIT):   call symput('hinter',compress(put(a,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------switch top and bottom to annotate coordinates------;
MPRINT(PLOTIT):   *------make goptions statement------;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *=================create annotate data set with lines=================;
MPRINT(PLOTIT):   data anno(keep=function x y comment color size style n);
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length text $ 256 comment $ 100 function color style $ 8;
MPRINT(PLOTIT):   retain curven -1 tickaxes "LBFh" vtoh 2 vinter 13 hinter 27 hslope 40 vslope 20 hmax 0.712715762283 vmax 0.1844344499072 vmin -0.259257777973 hmin -0.205470529714 singular 1e-8 left 8 right 62 top 20 bottom 3;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   *------check slope, intercept------;
MPRINT(PLOTIT):   if n(hinter,vinter,hslope,vslope) ne 4 then do;
MPRINT(PLOTIT):   put 'ERROR: Plot algorithm failed.  ' 'Coordinates could ' 'not be ' 'computed.  ' 'Vertically printing ' 'ticks is a ' 'possible cause.  ' 'Another ' 'explanation ' 'is no locate list ' 'was available.  ' 'Look ' 'at the ' 'printer plot 
' 'to check.';
MPRINT(PLOTIT):   call symput('abort','1');
MPRINT(PLOTIT):   stop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------how far should plot be extended?------;
MPRINT(PLOTIT):   extendl = input(symget('extendl'), ?? 32.);
MPRINT(PLOTIT):   extendr = input(symget('extendr'), ?? 32.);
MPRINT(PLOTIT):   extendt = input(symget('extendt'), ?? 32.);
MPRINT(PLOTIT):   extendb = input(symget('extendb'), ?? 32.);
MPRINT(PLOTIT):   *------rectangle sizes for contour plots------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then vcontour = abs(vslope) * (vmax - vmin) / nobs;
MPRINT(PLOTIT):   else vcontour = .;
MPRINT(PLOTIT):   call symput('vcontour',compress(put(vcontour,best15.)));
MPRINT(PLOTIT):   nobs = 0;
MPRINT(PLOTIT):   if nobs <= 0 and 0 > singular then nobs = sqrt(0);
MPRINT(PLOTIT):   nobs = nobs - 1;
MPRINT(PLOTIT):   if nobs > singular then hcontour = abs(hslope) * (hmax - hmin) / nobs;
MPRINT(PLOTIT):   else hcontour = .;
MPRINT(PLOTIT):   call symput('hcontour',compress(put(hcontour,best15.)));
MPRINT(PLOTIT):   *------optionally close up all white space------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   if n(hcontour) then do;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin - 0.5 * hcontour);
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax + 0.5 * hcontour) - right;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if n(vcontour) then do;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax + 0.5 * vcontour) - top;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin - 0.5 * vcontour);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------optionally close up white space with square contours------;
MPRINT(PLOTIT):   if 0 and 0 and not 0 then do;
MPRINT(PLOTIT):   contour = 1 * 0.5;
MPRINT(PLOTIT):   extendl = extendl + left - (hinter + hslope * hmin) + vtoh * contour;
MPRINT(PLOTIT):   extendr = extendr + (hinter + hslope * hmax) - right + vtoh * contour;
MPRINT(PLOTIT):   extendt = extendt + (vinter + vslope * vmax) - top + contour;
MPRINT(PLOTIT):   extendb = extendb + bottom - (vinter + vslope * vmin) + contour;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   call symput('extendl',compress(put(extendl,best15.)));
MPRINT(PLOTIT):   call symput('extendr',compress(put(extendr,best15.)));
MPRINT(PLOTIT):   call symput('extendt',compress(put(extendt,best15.)));
MPRINT(PLOTIT):   call symput('extendb',compress(put(extendb,best15.)));
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------final locations of the axes------;
MPRINT(PLOTIT):   left = left - extendl;
MPRINT(PLOTIT):   right = right + extendr;
MPRINT(PLOTIT):   top = top + extendt;
MPRINT(PLOTIT):   bottom = bottom - extendb;
MPRINT(PLOTIT):   *------frame background color------;
MPRINT(PLOTIT):   color = 'cxffffff';
MPRINT(PLOTIT):   size = 1;
MPRINT(PLOTIT):   style = 'msolid';
MPRINT(PLOTIT):   function = 'POLY';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, background, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'POLYCONT';
MPRINT(PLOTIT):   comment = 'frame, background, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, background, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   *------draw frame------;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   comment = 'frame, box, left top start';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'frame, box, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, right bottom';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   comment = 'frame, box, right top';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, box, left top';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------diagonal reference line------;
MPRINT(PLOTIT):   if 0 then do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   x = left;
MPRINT(PLOTIT):   comment = 'frame, diag, left bottom';
MPRINT(PLOTIT):   y = bottom;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'frame, diag, right top';
MPRINT(PLOTIT):   x = right;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   y = top;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------vertical axis reference lines------;
MPRINT(PLOTIT):   *------horizontal axis reference lines------;
MPRINT(PLOTIT):   *------vertical axis minor tick marks------;
MPRINT(PLOTIT):   *------horizontal axis minor tick marks------;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat2(in=td2);
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td2 and not (comment =: 'frame');
MPRINT(PLOTIT):   if i or (nmiss(tx) and n(__xvar)) then tx = hinter + hslope * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(ty) and n(__yvar)) then ty = vinter + vslope * __yvar;
MPRINT(PLOTIT):   *------figure out curve coordinates------;
MPRINT(PLOTIT):   if comment = 'frame, tick' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[2];
MPRINT(PLOTIT):   halftick = 0.5 * abs(1.5);
MPRINT(PLOTIT):   ticklen = (1 + (1.5 > 0)) * halftick;
MPRINT(PLOTIT):   if index(tickaxes,'h') then ticklen = ticklen / 2;
MPRINT(PLOTIT):   *------adjust for blank cols------;
MPRINT(PLOTIT):   if n(tx) then tx = tx - 2 + 1;
MPRINT(PLOTIT):   *------draw y-axis tick marks------;
MPRINT(PLOTIT):   if nmiss(tx) then do;
MPRINT(PLOTIT):   y = 23 - ty;
MPRINT(PLOTIT):   if bottom <= y <= top then do;
MPRINT(PLOTIT):   if index(tickaxes,'L') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, left';
MPRINT(PLOTIT):   x = left - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'R') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, right';
MPRINT(PLOTIT):   x = right + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw x-axis tick marks------;
MPRINT(PLOTIT):   else if nmiss(ty) then do;
MPRINT(PLOTIT):   halftick = halftick / vtoh;
MPRINT(PLOTIT):   ticklen = ticklen / vtoh;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   if left <= x <= right then do;
MPRINT(PLOTIT):   if index(tickaxes,'T') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, top';
MPRINT(PLOTIT):   y = top + halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y - ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if index(tickaxes,'B') then do;
MPRINT(PLOTIT):   comment = 'frame, tick, bottom';
MPRINT(PLOTIT):   y = bottom - halftick;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   y = y + ticklen;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw vectors------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'vector') then do;
MPRINT(PLOTIT):   size = lsizes[3];
MPRINT(PLOTIT):   x = hinter;
MPRINT(PLOTIT):   y = vinter;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = index(comment,'vector');
MPRINT(PLOTIT):   comment = substr(comment,1,r + 7) || 'head,' || substr(comment,r + 7);
MPRINT(PLOTIT):   *------compute slope of vector------;
MPRINT(PLOTIT):   vecslope = tx - hinter;
MPRINT(PLOTIT):   if abs(vecslope) > singular then vecslope = (ty - vinter) / (vecslope / vtoh);
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------find point on vector vecheadr distance from end------;
MPRINT(PLOTIT):   r = -0.1;
MPRINT(PLOTIT):   fromx = tx;
MPRINT(PLOTIT):   fromy = ty;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   fromx = tox;
MPRINT(PLOTIT):   fromy = toy;
MPRINT(PLOTIT):   *------slope of line perpendicular to vector------;
MPRINT(PLOTIT):   if nmiss(vecslope) then vecslope = 0;
MPRINT(PLOTIT):   else if abs(vecslope) > singular then vecslope = -1.0 / vecslope;
MPRINT(PLOTIT):   else vecslope = .;
MPRINT(PLOTIT):   *------draw vector head------;
MPRINT(PLOTIT):   r = -0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   r = 0.025;
MPRINT(PLOTIT):   link linept;
MPRINT(PLOTIT):   x = tx;
MPRINT(PLOTIT):   y = ty;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = tox;
MPRINT(PLOTIT):   y = toy;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw circles------;
MPRINT(PLOTIT):   else if index(substr(comment,1,13),'circle') then do;
MPRINT(PLOTIT):   size = lsizes[4];
MPRINT(PLOTIT):   comsplit = 15 + (comment =: 'extra');
MPRINT(PLOTIT):   holdcom = comment;
MPRINT(PLOTIT):   pi = 3.1415926536;
MPRINT(PLOTIT):   do rad = _radius_;
MPRINT(PLOTIT):   radius = max(rad, 0) * hslope;
MPRINT(PLOTIT):   comment = substr(holdcom,1,comsplit - 1) || compress(put(rad,best5.) || ',') || ' ' || compress('(' || put(__xvar,best5.) || ',' || put(__yvar,best5.) || '),') || ' ' || substr(holdcom,comsplit);
MPRINT(PLOTIT):   i = (8.33) / (68);
MPRINT(PLOTIT):   if "in" = 'cm' then i = i / 2.54;
MPRINT(PLOTIT):   inc = 2.0 * pi / ceil(20 + (2.0 * pi * radius * i / .1) ** 0.8);
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   seg0 = (inc * singular) ** 2;
MPRINT(PLOTIT):   do i = -pi + inc to pi by inc;
MPRINT(PLOTIT):   x1 = tx + cos(i - inc) * radius;
MPRINT(PLOTIT):   y1 = ty + sin(i - inc) * radius / vtoh;
MPRINT(PLOTIT):   x2 = tx + cos(i) * radius;
MPRINT(PLOTIT):   y2 = ty + sin(i) * radius / vtoh;
MPRINT(PLOTIT):   link clipline;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   linept: *------find a point (tox,toy) r distance from ------;
MPRINT(PLOTIT):   *------(fromx,fromy) on a line with slope vecslope------;
MPRINT(PLOTIT):   *------negative r means toward origin ------;
MPRINT(PLOTIT):   r = r * (68) / (8.33);
MPRINT(PLOTIT):   if "in" = 'cm' then r = r * 2.54;
MPRINT(PLOTIT):   vecdir = -sign(r);
MPRINT(PLOTIT):   if n(vecslope) then do;
MPRINT(PLOTIT):   vecm2 = sqrt(r * r / (1.0 + vecslope * vecslope));
MPRINT(PLOTIT):   if fromx > hinter then vecm2 = -vecm2;
MPRINT(PLOTIT):   tox = vecdir * vecm2 + fromx;
MPRINT(PLOTIT):   toy = vecdir * vecslope * vecm2 / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   tox = fromx;
MPRINT(PLOTIT):   if fromy > vinter then vecdir = -vecdir;
MPRINT(PLOTIT):   toy = vecdir * abs(r) / vtoh + fromy;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   clipline: *------clip a line that crosses an edge------;
MPRINT(PLOTIT):   *------find where line crosses edges------;
MPRINT(PLOTIT):   b = (x2 - x1);
MPRINT(PLOTIT):   bi = (y2 - y1);
MPRINT(PLOTIT):   xtop = .;
MPRINT(PLOTIT):   xbottom = .;
MPRINT(PLOTIT):   yleft = .;
MPRINT(PLOTIT):   yright = .;
MPRINT(PLOTIT):   if abs(b) > singular then do;
MPRINT(PLOTIT):   b = (y2 - y1) / b;
MPRINT(PLOTIT):   a = y1 - b * x1;
MPRINT(PLOTIT):   yleft = b * left + a;
MPRINT(PLOTIT):   yright = b * right + a;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if abs(bi) > singular then do;
MPRINT(PLOTIT):   bi = (x2 - x1) / bi;
MPRINT(PLOTIT):   xtop = (top - y1) * bi + x1;
MPRINT(PLOTIT):   xbottom = (bottom - y1) * bi + x1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust coordinates when line crosses edges------;
MPRINT(PLOTIT):   if x1 < left then do;
MPRINT(PLOTIT):   x1 = left;
MPRINT(PLOTIT):   y1 = yleft;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x1 > right then do;
MPRINT(PLOTIT):   x1 = right;
MPRINT(PLOTIT):   y1 = yright;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 < bottom then do;
MPRINT(PLOTIT):   y1 = bottom;
MPRINT(PLOTIT):   x1 = xbottom;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y1 > top then do;
MPRINT(PLOTIT):   y1 = top;
MPRINT(PLOTIT):   x1 = xtop;
MPRINT(PLOTIT):   justdraw = 0;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 < left then do;
MPRINT(PLOTIT):   x2 = left;
MPRINT(PLOTIT):   y2 = yleft;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if x2 > right then do;
MPRINT(PLOTIT):   x2 = right;
MPRINT(PLOTIT):   y2 = yright;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 < bottom then do;
MPRINT(PLOTIT):   y2 = bottom;
MPRINT(PLOTIT):   x2 = xbottom;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if y2 > top then do;
MPRINT(PLOTIT):   y2 = top;
MPRINT(PLOTIT):   x2 = xtop;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------see if segment should be output------;
MPRINT(PLOTIT):   if n(x1,x2,y1,y2) = 4 and ((x2 - x1) ** 2 + (y2 - y1) ** 2) > seg0 then do;
MPRINT(PLOTIT):   *------draw line------;
MPRINT(PLOTIT):   if not justdraw then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   justdraw = 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else justdraw = 0;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------debugging output------;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat2 regdat;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *======================combine annotate data sets======================;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   keep color style function comment x y size text position angle n obstype;
MPRINT(PLOTIT):   length color style function $ 8 comment $ 100 x y size 8 text $ 62 position $ 1 angle n 8 obstype $ 12 excolors $ 64;
MPRINT(PLOTIT):   retain left right top bottom contok conoldx conoldy excolors;
MPRINT(PLOTIT):   array lsizes[5] _temporary_ (1 1 1 1 1);
MPRINT(PLOTIT):   if _n_ = 1 then do;
MPRINT(PLOTIT):   left = 8 - 0.00;
MPRINT(PLOTIT):   right = 62 + 0.00;
MPRINT(PLOTIT):   top = 20 + -0.50;
MPRINT(PLOTIT):   bottom = 3 - 0.50;
MPRINT(PLOTIT):   contok = (n(0,0) = 2);
MPRINT(PLOTIT):   excolors = lowcase(symget('excolors'));
MPRINT(PLOTIT):   *------store goptions with annotate data set------;
MPRINT(PLOTIT):   if not 0 then do;
MPRINT(PLOTIT):   comment = symget('gopts');
MPRINT(PLOTIT):   n = 0;
MPRINT(PLOTIT):   function = 'COMMENT';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------draw border------;
MPRINT(PLOTIT):   if "cx000000" ne ' ' then do;
MPRINT(PLOTIT):   color = 'black';
MPRINT(PLOTIT):   size = lsizes[1];
MPRINT(PLOTIT):   position = '+';
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   y = 26 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   comment = 'border, box, left top start';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 0.00 < 0 then x = x - 0.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   function = 'DRAW';
MPRINT(PLOTIT):   comment = 'border, box, left bottom';
MPRINT(PLOTIT):   y = 0;
MPRINT(PLOTIT):   if 0 and 0.50 < 0 then y = y - 0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right bottom';
MPRINT(PLOTIT):   x = 68 - 0.001;
MPRINT(PLOTIT):   if 0 and 0.00 < 0 then x = x + 0.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, right top';
MPRINT(PLOTIT):   y = 26 - 0.001;
MPRINT(PLOTIT):   if 0 and -0.50 < 0 then y = y + -0.50;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   comment = 'border, box, left top';
MPRINT(PLOTIT):   x = 0;
MPRINT(PLOTIT):   if 0 and 0.00 < 0 then x = x - 0.00;
MPRINT(PLOTIT):   n + 0.1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   set anno tempdat1(in=td1 rename=(text=text2));
MPRINT(PLOTIT):   text = text2;
MPRINT(PLOTIT):   if comment = 'text, y label' then x = x - 0.00;
MPRINT(PLOTIT):   if comment = 'text, title' then y = y + -0.50;
MPRINT(PLOTIT):   if comment = 'text, x label' then y = y - 0.50;
MPRINT(PLOTIT):   if comment = 'text, y tick' then x = x - 0.00;
MPRINT(PLOTIT):   if comment = 'text, x tick' then y = y - 0.50;
MPRINT(PLOTIT):   obstype = __otype;
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   *------discard clipped ticks if necessary------;
MPRINT(PLOTIT):   if comment = 'text, y tick' then do;
MPRINT(PLOTIT):   if not (bottom <= y <= top) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if comment = 'text, x tick' then do;
MPRINT(PLOTIT):   d = right + floor(1e-8 + len / 2);
MPRINT(PLOTIT):   if not (left <= x <= d) then return;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------uncategorize symbol locations------;
MPRINT(PLOTIT):   i = (1 or 1) and td1 and (comment =: 'list' or comment =: 'extra') and not (index(substr(comment,1,18),', text, label'));
MPRINT(PLOTIT):   if i or (nmiss(x) and n(__xvar)) then x = 27 + 40 * __xvar;
MPRINT(PLOTIT):   if i or (nmiss(y) and n(__yvar)) then y = 13 + 20 * __yvar;
MPRINT(PLOTIT):   *------all angles are zero, except the y-axis label------;
MPRINT(PLOTIT):   if nmiss(angle) then angle = 0;
MPRINT(PLOTIT):   *------set position if not yet set------;
MPRINT(PLOTIT):   if position = ' ' then position = '+';
MPRINT(PLOTIT):   *------flag contour observations------;
MPRINT(PLOTIT):   contour = (function = 'BAR' and style = 'solid');
MPRINT(PLOTIT):   *------clip if necessary------;
MPRINT(PLOTIT):   if comment =: 'extra, text' or comment =: 'list, text' and text ne ' ' and not contour then do;
MPRINT(PLOTIT):   if y >= top or y <= bottom then return;
MPRINT(PLOTIT):   if position = '<' then d = x - len + 1 - left;
MPRINT(PLOTIT):   else if position = '>' then d = x - left;
MPRINT(PLOTIT):   else d = x - len / 2 - left;
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if position = '<' then d = right - x;
MPRINT(PLOTIT):   else if position = '>' then d = right - (x + len - 1);
MPRINT(PLOTIT):   else d = right - (x + len / 2);
MPRINT(PLOTIT):   d = floor(d);
MPRINT(PLOTIT):   if d <= 0 then do;
MPRINT(PLOTIT):   if (len + d) > 0 then text = substr(text, 1, len + d);
MPRINT(PLOTIT):   else text = ' ';
MPRINT(PLOTIT):   len = length(text);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------adjust justifications------;
MPRINT(PLOTIT):   if position = '<' then x = x + 0.5;
MPRINT(PLOTIT):   else if position = '>' then x = x - 0.5;
MPRINT(PLOTIT):   *------set line, text sizes------;
MPRINT(PLOTIT):   if nmiss(size) then do;
MPRINT(PLOTIT):   if function = 'LABEL' then size = 1;
MPRINT(PLOTIT):   else size = lsizes[1];
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   *------set font------;
MPRINT(PLOTIT):   if style = ' ' and not (comment =: 'list, text' or comment =: 'extra, text') then style = 'none';
MPRINT(PLOTIT):   *------if color is still not set, set it------;
MPRINT(PLOTIT):   if color = ' ' then color = 'black';
MPRINT(PLOTIT):   *------offset (jitter) coincident symbols but not ptr symbols------;
MPRINT(PLOTIT):   length lastpos $ 1;
MPRINT(PLOTIT):   retain oldx oldy 0 offsetn 1 lastpos '+';
MPRINT(PLOTIT):   if comment =: 'list, text, symbol' or comment =: 'extra, text, symbol' then do;
MPRINT(PLOTIT):   if abs(oldx - x) < 1e-8 and abs(oldy - y) < 1e-8 then do;
MPRINT(PLOTIT):   *------usually go center, right, left, but skip right------;
MPRINT(PLOTIT):   *------on second symbol if last label was right ------;
MPRINT(PLOTIT):   offsetn + 1 + (offsetn = 1 and lastpos = '>');
MPRINT(PLOTIT):   x = x + (mod(offsetn,3) - 1) * (0.25);
MPRINT(PLOTIT):   d = mod(floor((offsetn - 1) / 3) + 1, 3) - 1;
MPRINT(PLOTIT):   y = y + d * (0.25) / (2);
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   offsetn = 1;
MPRINT(PLOTIT):   oldx = x;
MPRINT(PLOTIT):   oldy = y;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   lastpos = position;
MPRINT(PLOTIT):   *------override colors for monochrome device------;
MPRINT(PLOTIT):   *------exclude observations in excluded color list------;
MPRINT(PLOTIT):   if index(excolors, trim(lowcase(color))) = 0;
MPRINT(PLOTIT):   *------add offsets to center plot ------;
MPRINT(PLOTIT):   *------adjust y so bottom line has coordinate 0.5------;
MPRINT(PLOTIT):   x = x + 1.7;
MPRINT(PLOTIT):   y = y + 0.6 + 0.5;
MPRINT(PLOTIT):   *------set ID variable for sort for functions------;
MPRINT(PLOTIT):   *------create rectangles for contour plots------;
MPRINT(PLOTIT):   if contour and contok then do;
MPRINT(PLOTIT):   text = ' ';
MPRINT(PLOTIT):   epsh = size * 0;
MPRINT(PLOTIT):   epsv = size * 0;
MPRINT(PLOTIT):   x1 = x - epsh / 2;
MPRINT(PLOTIT):   x2 = x1 + epsh;
MPRINT(PLOTIT):   epsh = epsh * 0.1;
MPRINT(PLOTIT):   y1 = y - epsv / 2;
MPRINT(PLOTIT):   y2 = y1 + epsv;
MPRINT(PLOTIT):   epsv = epsv * 0.1;
MPRINT(PLOTIT):   if abs(x1 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y1 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x2 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if abs(x1 - conoldx) < epsh and abs(y2 - conoldy) < epsv then do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   function = 'MOVE';
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   if (abs(0) < epsh and 0 > 0) or (abs(0) < epsv and 0 > 0) then do;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else do;
MPRINT(PLOTIT):   x = x2;
MPRINT(PLOTIT):   y = y2;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   x = x1;
MPRINT(PLOTIT):   y = y1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   function = 'BAR';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   conoldx = x;
MPRINT(PLOTIT):   conoldy = y;
MPRINT(PLOTIT):   *------final adjustments------;
MPRINT(PLOTIT):   if text = '*' and function = 'LABEL' then do;
MPRINT(PLOTIT):   style = ' ';
MPRINT(PLOTIT):   text = 'star';
MPRINT(PLOTIT):   function = 'SYMBOL';
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   ;
MPRINT(PLOTIT):   nobs + 1;
MPRINT(PLOTIT):   output;
MPRINT(PLOTIT):   call symput('nobs',compress(put(nobs,5.)));
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------delete intermediate data sets------;
MPRINT(PLOTIT):   proc datasets nolist;
MPRINT(PLOTIT):   delete tempdat1 tempdat3 tempdat4 tempdat5 tempdat6(memtype=view);
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *------post-processing for functions------;
MPRINT(PLOTIT):   *------post-processing for expand------;
MPRINT(PLOTIT):   *------make sure that the frame is never covered------;
MPRINT(PLOTIT):   data anno;
MPRINT(PLOTIT):   set anno anno(where=(comment =: 'frame, box'));
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   *===========set up for and produce the graphical scatter plot==========;
MPRINT(PLOTIT):   goptions nodisplay hpos=68 vpos=26 hsize=8.33in vsize=6.24in cback=white device=GIF;
MPRINT(PLOTIT):  ;
MPRINT(PLOTIT):   *------print final plot request------;
MPRINT(PLOTIT):   data _null_;
MPRINT(PLOTIT):   file log ps=200;
MPRINT(PLOTIT):   length string $ 500;
MPRINT(PLOTIT):   if 1 then do;
MPRINT(PLOTIT):   put / 'The following code will create the ' @@;
MPRINT(PLOTIT):   if not 1 then put '(empty) ' @@;
MPRINT(PLOTIT):   put 'printer plot ' 'on which ' 'the ' 'graphical ' 'plot is ' 'based:' /;
MPRINT(PLOTIT):   string = "options nonumber ls=65 ps=45;";
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = symget('procopts');
MPRINT(PLOTIT):   indent2 = 10;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'plot ' || trim(symget('plotreq')) || ' /';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('plotopts')) || ' list=1';
MPRINT(PLOTIT):   indent1 = 8;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('pl')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('label')) || ';';
MPRINT(PLOTIT):   indent1 = 3;
MPRINT(PLOTIT):   indent2 = 9;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = trim(symget('adjust2')) || ';';
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   string = 'label ' || symget('vplotvar') || " = '#' " || symget('hplotvar') || " = '#';";
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put +3 'run; quit;' /;
MPRINT(PLOTIT):   put 'The plot was created with the following goptions:' /;
MPRINT(PLOTIT):   string = 'goptions ' || symget('gopts') || ';';
MPRINT(PLOTIT):   indent1 = 0;
MPRINT(PLOTIT):   link wrap;
MPRINT(PLOTIT):   put / "The OUT=anno Annotate data set has 67 observations.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if symget('method') = 'print' then put "The graphics stream file name is C:\Users\Admin\AppData\Local\Temp\SAS Temporary Files\_TD17292_MIIKYMEDIA_\Prc2\plotit.ps.";
MPRINT(PLOTIT):   if 1 and upcase(getoption("STIMER")) eq "STIMER" and getoption('stimer') eq 'STIMER' then do;
MPRINT(PLOTIT):   time = datetime();
MPRINT(PLOTIT):   cum = put(time - 1923345894.875,6.1);
MPRINT(PLOTIT):   put 'The PLOTIT macro used ' cum "seconds to create OUT=anno.";
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   if _error_ then call symput('abort','1');
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   wrap: *------print a line, wrapped and indented------;
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   string = left(string);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   if len < 2 or string = ' ' or string = ';' then return;
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   do while(i < (len - 1) and not nlit);
MPRINT(PLOTIT):   string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   i = index(string,' '||' ');
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   i = index(string,' ;');
MPRINT(PLOTIT):   if i then string = substr(string,1,i - 1) || substr(string,i + 1);
MPRINT(PLOTIT):   len = 1;
MPRINT(PLOTIT):   end = 0;
MPRINT(PLOTIT):   indent = indent1 + 1;
MPRINT(PLOTIT):   do while(len > end);
MPRINT(PLOTIT):   string = left(substr(string,end + 1));
MPRINT(PLOTIT):   len = length(string);
MPRINT(PLOTIT):   nlit = index(upcase(string), "'N");
MPRINT(PLOTIT):   if nlit = 0 then nlit = index(upcase(string), '"N');
MPRINT(PLOTIT):   maxlen = 256 - indent;
MPRINT(PLOTIT):   if len > maxlen and not nlit then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   do while(end > 0 and not (substr(string,end,1) in (' ' ',')));
MPRINT(PLOTIT):   end = end - 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else if len > maxlen then do;
MPRINT(PLOTIT):   end = maxlen;
MPRINT(PLOTIT):   if nlit then end = nlit + 2;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   else end = len;
MPRINT(PLOTIT):   str = substr(string,1,end);
MPRINT(PLOTIT):   put @indent str;
MPRINT(PLOTIT):   indent = indent2 + 1;
MPRINT(PLOTIT):   end;
MPRINT(PLOTIT):   return;
MPRINT(PLOTIT):   run;

The following code will create the printer plot on which the graphical plot is based:

options nonumber ls=65 ps=45;
proc plot nolegend formchar='|----|+|---' data=preproc vtoh=2;
   plot Dim2 * Dim1 $ _idvar_ = _symbol_ /
        haxis=by 0.2 vaxis=by 0.2 box list=1
        placement=((h=2 -2 : s=right left) (v=1 -1 * h=0 -1 to -5 by alt));
   label Dim2 = 'Dimension 2' Dim1 = 'Dimension 1';
   label Dim2 = '#' Dim1 = '#';
   run; quit;

The plot was created with the following goptions:

goptions nodisplay hpos=68 vpos=26 hsize=8.33in vsize=6.24in cback=white device=GIF;

The OUT=anno Annotate data set has 67 observations.
The PLOTIT macro used 1.5 seconds to create OUT=anno.
MPRINT(PLOTIT):   *------produce the plot------;
MPRINT(PLOTIT):   proc ganno annotate=anno gout=WORK.Clus name="DISTANCE";
MPRINT(PLOTIT):   run;
MPRINT(PLOTIT):   options LABEL;
Sistema SAS

MPRINT(PLOTIT):   *------restore options, quit------;
MPRINT(PLOTIT):   options NOTES missing=".";
MPRINT(EM_DIAGRAM):  ;
46324      goptions display;
MPRINT(EM_DIAGRAM):   goptions display;
46325      title;
MPRINT(EM_DIAGRAM):   title;
46326      filename gsasfile
46326    ! "C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\GRAPH
46326    ! \Distance.gif";
MPRINT(EM_DIAGRAM):    filename gsasfile 
"C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\GRAPH\Distance.g
if";
46327      goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace cback= white;
MPRINT(EM_DIAGRAM):   goptions reset=all device=PNG display gaccess= gsasfile gsfmode= replace 
cback= white;
46328      proc greplay igout=WORK.Clus nofs;
MPRINT(EM_DIAGRAM):   proc greplay igout=WORK.Clus nofs;
NOTE: Building list of graphs from the catalog.

NOTE: Enter greplay commands or statements.
46329      replay DISTANCE;
MPRINT(EM_DIAGRAM):   replay DISTANCE;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this 
      session.
NOTE: 22700 bytes written to 
      C:\Users\Admin\Documents\GitHub\AMUL-PRACTICA\practica_AMUL\Workspaces\EMWS3\Clus\GRAPH\Dista
      nce.gif.
46330      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE GREPLAY ha utilizado (Tiempo de proceso total):
      real time           0.25 seconds
      cpu time            0.17 seconds
      

46331      goptions reset=all;
MPRINT(EM_DIAGRAM):   goptions reset=all;
46332      filename gsasfile;
MPRINT(EM_DIAGRAM):   filename gsasfile;
NOTE: Fileref GSASFILE has been deassigned.
46333      proc datasets lib=EMWS3 nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS3 nolist;
46334      modify Clus_DISTANCE;
MPRINT(EM_DIAGRAM):   modify Clus_DISTANCE;
46335      rename _idvar_=_SEGMENT_;
MPRINT(EM_DIAGRAM):   rename _idvar_=_SEGMENT_;
NOTE: Renaming variable _idvar_ to _SEGMENT_.
MPRINT(EM_DIAGRAM):   run;
46336      run;

NOTE: MODIFY was successful for EMWS3.CLUS_DISTANCE.DATA.
46337      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
Sistema SAS

      

46338      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
46339      * Clus: creando conjunto de datos para el informe Input de la media;
MPRINT(EM_DIAGRAM):   * Clus: creando conjunto de datos para el informe Input de la media;
46340      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46341      data temp(drop=_type_ over_all);
MPRINT(EM_DIAGRAM):   data temp(drop=_type_ over_all);
46342      set EMWS3.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTSTAT;
46343      where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
MPRINT(EM_DIAGRAM):   where _type_ in('DMDB_MEAN', 'CLUS_MEAN');
46344      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set EMWS3.CLUS_OUTSTAT.
      WHERE _type_ in ('CLUS_MEAN', 'DMDB_MEAN');
NOTE: The data set WORK.TEMP has 11 observations and 1205 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46345      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
46346      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
46347      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 11 observations and 1205 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46348      proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
MPRINT(EM_DIAGRAM):   proc stdize data=temp out=stdtemp pctlpts=0 100 outstat=stat;
46349      var ABSOLUT--ZUMA;
MPRINT(EM_DIAGRAM):   var ABSOLUT--ZUMA;
46350      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 11 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.STDTEMP has 11 observations and 1205 variables.
NOTE: The data set WORK.STAT has 10 observations and 1205 variables.
NOTE: PROCEDURE STDIZE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

46351      proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN COL4=MAX));
MPRINT(EM_DIAGRAM):   proc transpose data=stat out=tstat(rename=(COL1=MEAN COL2=STD COL3=MIN 
COL4=MAX));
46352      where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
Sistema SAS

MPRINT(EM_DIAGRAM):   where _type_ in ('LOCATION', 'SCALE','P0', 'P100');
46353      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.STAT.
      WHERE _type_ in ('LOCATION', 'P0', 'P100', 'SCALE');
NOTE: The data set WORK.TSTAT has 1204 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

46354      data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
MPRINT(EM_DIAGRAM):   data tstat( rename=(_NAME_=NAME) keep=_NAME_ cv stdmin stdmax);
46355      set tstat;
MPRINT(EM_DIAGRAM):   set tstat;
46356      if std ^in (0, .) then do;
MPRINT(EM_DIAGRAM):   if std ^in (0, .) then do;
46357      stdmin = abs((min-mean)/std);
MPRINT(EM_DIAGRAM):   stdmin = abs((min-mean)/std);
46358      stdmax = abs((max-mean)/std);
MPRINT(EM_DIAGRAM):   stdmax = abs((max-mean)/std);
46359      end;
MPRINT(EM_DIAGRAM):   end;
46360      if mean ^in(0, .) then cv = std/mean;
MPRINT(EM_DIAGRAM):   if mean ^in(0, .) then cv = std/mean;
46361      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 1204 observations and 4 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46362      proc sort data=tstat;
MPRINT(EM_DIAGRAM):   proc sort data=tstat;
46363      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46364      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTAT has 1204 observations and 4 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46365      proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL COL1=MEAN));
MPRINT(EM_DIAGRAM):   proc transpose data=stdtemp out=tstdtemp(rename=(_NAME_=NAME _LABEL_=LABEL 
COL1=MEAN));
46366      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
46367      run;
MPRINT(EM_DIAGRAM):   run;

Sistema SAS

WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 11 observations read from the data set WORK.STDTEMP.
NOTE: The data set WORK.TSTDTEMP has 13244 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46368      proc sort data=tstdtemp;
MPRINT(EM_DIAGRAM):   proc sort data=tstdtemp;
46369      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46370      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13244 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set WORK.TSTDTEMP has 13244 observations and 3 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46371      data tstdtemp;
MPRINT(EM_DIAGRAM):   data tstdtemp;
46372      merge tstdtemp tstat;
MPRINT(EM_DIAGRAM):   merge tstdtemp tstat;
46373      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46374      STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
MPRINT(EM_DIAGRAM):   STDMEAN = (MEAN + stdmin)/(stdmin + stdmax);
46375      drop stdmin stdmax mean;
MPRINT(EM_DIAGRAM):   drop stdmin stdmax mean;
46376      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13244 observations read from the data set WORK.TSTDTEMP.
NOTE: There were 1204 observations read from the data set WORK.TSTAT.
NOTE: The data set WORK.TSTDTEMP has 13244 observations and 4 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46377      proc transpose data=EMWS3.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME
46377    ! VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS3.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( 
_NAME_=NAME VARIABLE=INPUT));
46378      var ABSOLUT--ZUMA;
MPRINT(EM_DIAGRAM):   var ABSOLUT--ZUMA;
46379      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
46380      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
46381      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 1 observations read from the data set EMWS3.CLUS_OUTVAR.
Sistema SAS

      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 1204 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46382      proc sort data=tempVar;
MPRINT(EM_DIAGRAM):   proc sort data=tempVar;
46383      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46384      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 1204 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46385      data EMWS3.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_INPUTMEAN(rename=(NAME=VARIABLE));
46386      Length _SEGMENT_CHAR_ $7;
MPRINT(EM_DIAGRAM):   Length _SEGMENT_CHAR_ $7;
46387      label _SEGMENT_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentName_vlabel,  NOQUOTE))"
46387    ! _SEGMENT_CHAR_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_segmentId_vlabel,    NOQUOTE))"
46387    ! NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel,     NOQUOTE))" INPUT =
46388         "%sysfunc(sasmsg(sashelp.dmine, rpt_input_vlabel,        NOQUOTE))" LABEL =
46388    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_label_vlabel,        NOQUOTE))" CV =
46388    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_cv_vlabel,           NOQUOTE))" STDMEAN =
46389         "%sysfunc(sasmsg(sashelp.dmine, rpt_normmean_vlabel,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = "Nombre del segmento" _SEGMENT_CHAR_ = "Id de segmento" 
NAME = "Variable" INPUT = "Input" LABEL = "Etiqueta" CV = "Coeficiente de variación" STDMEAN = 
"Media normalizada";
46390      merge tempvar tstdtemp;
MPRINT(EM_DIAGRAM):   merge tempvar tstdtemp;
46391      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
46392      if LABEL='' then LABEL=NAME;
MPRINT(EM_DIAGRAM):   if LABEL='' then LABEL=NAME;
46393      _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
MPRINT(EM_DIAGRAM):   _SEGMENT_CHAR_ = strip(put(_SEGMENT_, best.));
46394      if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = . then _SEGMENT_CHAR_='Overall';
46395      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TEMPVAR.
NOTE: There were 13244 observations read from the data set WORK.TSTDTEMP.
NOTE: The data set EMWS3.CLUS_INPUTMEAN has 13244 observations and 7 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

46396      proc sort data=EMWS3.Clus_INPUTMEAN;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Clus_INPUTMEAN;
Sistema SAS

46397      by descending cv;
MPRINT(EM_DIAGRAM):   by descending cv;
46398      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 13244 observations read from the data set EMWS3.CLUS_INPUTMEAN.
NOTE: The data set EMWS3.CLUS_INPUTMEAN has 13244 observations and 7 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46399      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
46400      * Clus: determinando las variables importantes;
MPRINT(EM_DIAGRAM):   * Clus: determinando las variables importantes;
46401      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

46402      %let _nobs = 0;
46403      data keepvars(rename=(NAME=INPUT));
MPRINT(EM_DIAGRAM):    data keepvars(rename=(NAME=INPUT));
46404      set EMWS3.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTIMPORT(where=(IMPORTANCE>0.5)) end=eof;
46405      if eof then call symput('_nobs', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   if eof then call symput('_nobs', strip(put(_N_, best.)));
46406      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set EMWS3.CLUS_OUTIMPORT.
      WHERE IMPORTANCE>0.5;
NOTE: The data set WORK.KEEPVARS has 12 observations and 5 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46407      proc transpose data=EMWS3.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( _NAME_=NAME
46407    ! VARIABLE=INPUT));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS3.Clus_OUTVAR out=tempVar(drop=_LABEL_ rename=( 
_NAME_=NAME VARIABLE=INPUT));
46408      var ABSOLUT--ZUMA;
MPRINT(EM_DIAGRAM):   var ABSOLUT--ZUMA;
46409      id _type_;
MPRINT(EM_DIAGRAM):   id _type_;
46410      where _type_ = 'VARIABLE';
MPRINT(EM_DIAGRAM):   where _type_ = 'VARIABLE';
46411      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: The variable _LABEL_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 1 observations read from the data set EMWS3.CLUS_OUTVAR.
      WHERE _type_='VARIABLE';
NOTE: The data set WORK.TEMPVAR has 1204 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE ha utilizado (Tiempo de proceso total):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
Sistema SAS


46412      proc sort data=keepvars;
MPRINT(EM_DIAGRAM):   proc sort data=keepvars;
46413      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
46414      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.KEEPVARS has 12 observations and 5 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46415      proc sort data=tempvar;
MPRINT(EM_DIAGRAM):   proc sort data=tempvar;
46416      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
46417      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1204 observations read from the data set WORK.TEMPVAR.
NOTE: The data set WORK.TEMPVAR has 1204 observations and 2 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46418      data vars;
MPRINT(EM_DIAGRAM):   data vars;
46419      merge tempvar keepvars(in=b);
MPRINT(EM_DIAGRAM):   merge tempvar keepvars(in=b);
46420      by INPUT;
MPRINT(EM_DIAGRAM):   by INPUT;
46421      if b then output;
MPRINT(EM_DIAGRAM):   if b then output;
46422      run;
MPRINT(EM_DIAGRAM):   run;

WARNING: Multiple lengths were specified for the BY variable INPUT by input data sets. This might 
         cause unexpected results.
NOTE: There were 1204 observations read from the data set WORK.TEMPVAR.
NOTE: There were 12 observations read from the data set WORK.KEEPVARS.
NOTE: The data set WORK.VARS has 12 observations and 6 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46423      proc sort data=vars;
MPRINT(EM_DIAGRAM):   proc sort data=vars;
46424      by descending importance;
MPRINT(EM_DIAGRAM):   by descending importance;
46425      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set WORK.VARS.
Sistema SAS

NOTE: The data set WORK.VARS has 12 observations and 6 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46426      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
46427      set vars;
MPRINT(EM_DIAGRAM):   set vars;
46428      if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('CLUS_PROFVARS', strip(NAME));
46429      else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
MPRINT(EM_DIAGRAM):   else call symput('CLUS_PROFVARS',symget('CLUS_PROFVARS')!!' '!!strip(NAME));
46430      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set WORK.VARS.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * mergeVarMeansandClusLabel;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46431      *------------------------------------------------------------*;
46432      * mergeVarMeansandClusLabel;
46433      *------------------------------------------------------------*;
46434      data temp(keep=_SEGMENT_ &CLUS_PROFVARS);
MPRINT(EM_DIAGRAM):   data temp(keep=_SEGMENT_ WINDOW COMP SERVER DISPLAI MOTIF APPLIC MED MEDIC 
DOCTOR DISEAS PITT PATIENT);
46435      length _SEGMENT_ &CLUS_PROFVARS 8;
MPRINT(EM_DIAGRAM):   length _SEGMENT_ WINDOW COMP SERVER DISPLAI MOTIF APPLIC MED MEDIC DOCTOR 
DISEAS PITT PATIENT 8;
46436      set EMWS3.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   set EMWS3.Clus_OUTSTAT;
46437      where _type_ ='CLUS_MEAN';
MPRINT(EM_DIAGRAM):   where _type_ ='CLUS_MEAN';
46438      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS3.CLUS_OUTSTAT.
      WHERE _type_='CLUS_MEAN';
NOTE: The data set WORK.TEMP has 10 observations and 13 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46439      proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
46440      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
46441      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set WORK.TEMP.
Sistema SAS

NOTE: The data set WORK.TEMP has 10 observations and 13 variables.
NOTE: PROCEDURE SORT ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46442      data EMWS3.Clus_LABEL;
MPRINT(EM_DIAGRAM):   data EMWS3.Clus_LABEL;
46443      merge EMWS3.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
MPRINT(EM_DIAGRAM):   merge EMWS3.Clus_LABEL(keep=_SEGMENT_ LABEL) temp;
46444      by _SEGMENT_;
MPRINT(EM_DIAGRAM):   by _SEGMENT_;
46445      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS3.CLUS_LABEL.
NOTE: There were 10 observations read from the data set WORK.TEMP.
NOTE: The data set EMWS3.CLUS_LABEL has 10 observations and 14 variables.
NOTE: DATA statement ha utilizado (Tiempo de proceso total):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
